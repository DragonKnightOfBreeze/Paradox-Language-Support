{"version":3,"file":"docsify-select.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import {version as pkgVersion} from '../package.json';\n\n// eslint-disable-next-line import/no-unassigned-import\nimport './styles.scss';\n\nconst commentReplaceMark = 'select:replace';\nconst classNames = {\n\tselectContainer: 'content',\n\tselectBlock: 'docsify-select',\n\tselectGroup: 'docsify-select-group',\n\tselectMenuContainer: 'docsify-select-menu-container',\n\tselectMenu: 'docsify-select-menu',\n\tselectOption: 'docsify-select__option',\n\tselectContent: 'docsify-select__content',\n\tselectContentActive: 'docsify-select__content--active'\n};\n\nconst regex = {\n\t// Matches markdown code blocks (inline and multi-line)\n\t// Example: ```text```N\n\tcodeMarkup: /(```[\\s\\S]*?```)/gm,\n\n\t// Matches select replacement comment\n\t// 0: Match\n\t// 1: Replacement HTML\n\tcommentReplaceMarkup: new RegExp(`<!-- ${commentReplaceMark} (.*) -->`),\n\n\t// Matches select set by start/end comment\n\t// 0: Match\n\t// 1: Indent\n\t// 2: Start comment: <!-- select:start -->\n\t// 3: Labels and content\n\t// 4: End comment: <!-- select:end -->\n\tselectBlockMarkup: /[\\r\\n]*(\\s*)(<!-+\\s+select:\\s*?start\\s+-+>)[\\r\\n]+([\\s|\\S]*?)[\\r\\n\\s]+(<!-+\\s+select:\\s*?end\\s+-+>)/m,\n\n\t// Matches select lables by select-label comment\n\t// given - <!-- select-menu-labels: some,labels -->\n\t// 0: Match\n\t// 1: Indent\n\t// 2: Comment: <!-- select-menu-labels:\n\t// 3: Menu Labels: some,labels\n\t// 4: Comment tail: -->\n\tselectMenuLabelsMarkup: /[\\r\\n]*(\\s*)(<!-+\\s+select-menu-labels:\\s*)([\\s|\\S]*?)(\\s+-+>)/m,\n\n\t// Matches select option and content\n\t// 0: Match\n\t// 1: Option: #### --Label-- OR #### ~~Label~~\n\t// 2: Content\n\tselectHeadingMarkup: /[\\r\\n]*(\\s*)#{1,6}\\s*[~-]{2}\\s*(.*[^\\s])\\s*[~-]{2}[\\r\\n]+([\\s\\S]*?)(?=#{1,6}\\s*[~-]{2}|<!-+\\s+select:\\s*?end\\s+-+>)/m\n};\n\nconst settings = {\n\tsync: false,\n\tdetectOperatingSystem: {enabled: false, menuId: 'operating-system'},\n\ttheme: 'classic'\n};\n\n// Functions\n// =============================================================================\n/**\n * Converts select content into \"stage 1\" markup. Stage 1 markup contains temporary\n * comments which are replaced with HTML during Stage 2. This approach allows\n * all markdown to be converted to HTML before select-specific HTML is added.\n *\n * @param {string} content\n * @returns {string}\n */\nfunction renderSelectGroupsStage1(content) {\n\tconst codeBlockMatch = content.match(regex.codeMarkup) || [];\n\tconst codeBlockMarkers = codeBlockMatch.map((item, i) => {\n\t\tconst codeMarker = `<!-- ${commentReplaceMark} CODEBLOCK${i} -->`;\n\n\t\t// Replace code block with marker to ensure select markup within code\n\t\t// blocks is not processed. These markers are replaced with their\n\t\t// associated code blocs after selects have been processed.\n\t\tcontent = content.replace(item, codeMarker);\n\n\t\treturn codeMarker;\n\t});\n\n\tconst selectTheme = settings.theme === 'none' ? '' : `${classNames.selectBlock}--${settings.theme}`;\n\n\tlet selectBlockMatch;\n\tlet selectMatch;\n\n\t// Process each select block\n\twhile ((selectBlockMatch = regex.selectBlockMarkup.exec(content)) !== null) {\n\t\tlet selectBlock = selectBlockMatch[0];\n\t\tlet selectGroups = [];\n\t\tlet selectStartReplacement = '';\n\t\tlet selectEndReplacement = '';\n\n\t\t// Headings\n\t\tconst hasSelectHeadings = regex.selectHeadingMarkup.test(selectBlock);\n\t\tconst selectBlockIndent = selectBlockMatch[1];\n\t\tconst selectBlockStart = selectBlockMatch[2];\n\t\tconst selectBlockEnd = selectBlockMatch[4];\n\n\t\t// Labels\n\t\tconst selectMenuLabelsMatch = regex.selectMenuLabelsMarkup.exec(selectBlock);\n\t\tconst selectMenuLabels = selectMenuLabelsMatch[3].split(',');\n\n\t\tif (hasSelectHeadings) {\n\t\t\t// ### selectGroup1, selectGroup2\n\t\t\t// Process each select group\n\t\t\tconst selectGroupOptions = [];\n\n\t\t\t// Generate <options>\n\t\t\twhile ((selectMatch = regex.selectHeadingMarkup.exec(selectBlock)) !== null) {\n\t\t\t\tconst selectOptions = selectMatch[2].trim().split(',');\n\t\t\t\tconst selectContent = (selectMatch[3] || '').trim();\n\t\t\t\tconst dataSelectContentAttribute = prepareDataSelectAttribute(\n\t\t\t\t\tselectOptions\n\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(/[,\\s]/g)\n\t\t\t\t\t\t.join('-')\n\t\t\t\t);\n\n\t\t\t\tselectBlock = selectBlock.replace(selectMatch[0], [\n\t\t\t\t\t`\\n${selectBlockIndent}<!-- ${commentReplaceMark} <div class=\"${classNames.selectContent}\" data-select-content=\"${dataSelectContentAttribute}\"> -->`,\n\t\t\t\t\t`\\n\\n${selectBlockIndent}${selectContent}`,\n\t\t\t\t\t`\\n\\n${selectBlockIndent}<!-- ${commentReplaceMark} </div> -->`\n\t\t\t\t].join(''));\n\n\t\t\t\tselectOptions.forEach((selectOption, index) => {\n\t\t\t\t\t// Options is a object/dict so we can de-dupe the <options> list when the same value repeats (as happens when using multiple select lists in combination)\n\t\t\t\t\t// eg: macOS,bash | macOS,linux\n\t\t\t\t\tif (selectOption.toLowerCase().trim().split(' ').join('-') !== 'docsify-select-default') {\n\t\t\t\t\t\tconst options = selectGroupOptions[index] || [];\n\t\t\t\t\t\toptions[selectOption] = `${selectBlockIndent} <option value=\"${selectOption.toLowerCase()}\">${selectOption}</option>`;\n\t\t\t\t\t\tselectGroupOptions[index] = options;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tselectMenuLabels.forEach((selectMenuLabel, index) => {\n\t\t\t\tselectGroups = [\n\t\t\t\t\t...selectGroups,\n\t\t\t\t\t`<div class=\"${classNames.selectMenuContainer}\"> <label for=\"${selectMenuLabel.toLowerCase()}\">${selectMenuLabel}</label> <select class=\"${classNames.selectMenu}\" id=\"${selectMenuLabel.toLowerCase().replace(/\\s/g, '-')}\"> ${Object.values(selectGroupOptions[index])} </select> </div>`\n\t\t\t\t];\n\t\t\t});\n\n\t\t\tselectStartReplacement = `<!-- ${commentReplaceMark} <div class=\"${[classNames.selectBlock, selectTheme].join(' ')}\"> <div class=\"${classNames.selectGroup}\"> ${selectGroups.toString().split(',').join(' ')} </div> -->`;\n\t\t\tselectEndReplacement = `\\n${selectBlockIndent}<!-- ${commentReplaceMark} </div> -->`;\n\t\t}\n\n\t\tselectBlock = selectBlock.replace(selectBlockStart, selectStartReplacement);\n\t\tselectBlock = selectBlock.replace(selectBlockEnd, selectEndReplacement);\n\t\tcontent = content.replace(selectBlockMatch[0], selectBlock);\n\t}\n\n\t// Restore code blocks\n\tcodeBlockMarkers.forEach((item, i) => {\n\t\tcontent = content.replace(item, codeBlockMatch[i]);\n\t});\n\n\treturn content;\n}\n\n/**\n * Converts \"stage 1\" markup into final markup by replacing temporary comments\n * with HTML.\n *\n * @param {string} html\n * @returns {string}\n */\nfunction renderSelectGroupsStage2(html) {\n\tlet selectReplaceMatch;\n\n\twhile ((selectReplaceMatch = regex.commentReplaceMarkup.exec(html)) !== null) {\n\t\tconst selectComment = selectReplaceMatch[0];\n\t\tconst selectReplacement = selectReplaceMatch[1] || '';\n\n\t\thtml = html.replace(selectComment, selectReplacement);\n\t}\n\n\treturn html;\n}\n\n/**\n * Get the Operating System name.\n *\n * Credit: https://stackoverflow.com/a/19176790/7911479\n *\n * @returns {string}\n */\nfunction getOperatingSystemName() {\n\tlet operatingSystemName = 'Unknown';\n\t// If (window.navigator.userAgent.includes('Windows NT 10.0')) {\n\t// \toperatingSystemName = 'Windows 10';\n\t// }\n\n\t// if (window.navigator.userAgent.includes('Windows NT 6.2')) {\n\t// \toperatingSystemName = 'Windows 8';\n\t// }\n\n\t// if (window.navigator.userAgent.includes('Windows NT 6.1')) {\n\t// \toperatingSystemName = 'Windows 7';\n\t// }\n\n\t// if (window.navigator.userAgent.includes('Windows NT 6.0')) {\n\t// \toperatingSystemName = 'Windows Vista';\n\t// }\n\n\t// if (window.navigator.userAgent.includes('Windows NT 5.1')) {\n\t// \toperatingSystemName = 'Windows XP';\n\t// }\n\n\t// if (window.navigator.userAgent.includes('Windows NT 5.0')) {\n\t// \toperatingSystemName = 'Windows 2000';\n\t// }\n\n\tif (window.navigator.userAgent.includes('Win')) {\n\t\toperatingSystemName = 'Windows';\n\t}\n\n\tif (window.navigator.userAgent.includes('Mac')) {\n\t\toperatingSystemName = 'macOS';\n\t}\n\n\tif (window.navigator.userAgent.includes('X11')) {\n\t\toperatingSystemName = 'UNIX';\n\t}\n\n\tif (window.navigator.userAgent.includes('Linux')) {\n\t\toperatingSystemName = 'Linux';\n\t}\n\n\treturn operatingSystemName;\n}\n\nfunction prepareDataSelectAttribute(string) {\n\treturn string.toLowerCase().trim().split(/[,\\s]/g).join('-');\n}\n\nfunction calculateSelectedContent(selectMenuList) {\n\tlet newSelection = '';\n\tArray.prototype.forEach.call(selectMenuList, selectMenu => {\n\t\tnewSelection = (newSelection.length === 0) ?\n\t\t\tprepareDataSelectAttribute(selectMenu.value) :\n\t\t\tnewSelection + '-' + prepareDataSelectAttribute(selectMenu.value);\n\t});\n\treturn newSelection;\n}\n\nfunction setSelectedContent(newSelection, selectContentList) {\n\tlet contentMatch = false;\n\tselectContentList.forEach(selectContent => {\n\t\tselectContent.classList.remove(classNames.selectContentActive);\n\t\tif (selectContent.getAttribute('data-select-content') === newSelection) {\n\t\t\tselectContent.classList.add(classNames.selectContentActive);\n\t\t\tcontentMatch = true;\n\t\t}\n\t});\n\treturn contentMatch;\n}\n\nfunction setDefaultContent(selectContentList) {\n\tselectContentList.forEach(selectContent => {\n\t\tif (selectContent.getAttribute('data-select-content') === 'docsify-select-default') {\n\t\t\tselectContent.classList.add(classNames.selectContentActive);\n\t\t}\n\t});\n}\n\n/**\n * Sets the initial active select for each select group. Either top option of each select or the matching operating-system value.\n */\nfunction setInitialSelection(selectMenuList, selectContentList) {\n\tif (settings.detectOperatingSystem.enabled) {\n\t\t// Set the select menu options\n\t\tconst currentOperatingSystem = getOperatingSystemName();\n\t\tArray.prototype.forEach.call(selectMenuList, selectMenu => {\n\t\t\t// If id = settings.detectOperatingSystem.menuId\n\t\t\tif (selectMenu.id === settings.detectOperatingSystem.menuId) {\n\t\t\t\t// Set the value to be the detected OS if in the list of options\n\t\t\t\tArray.prototype.forEach.call(selectMenu.options, (option, index) => {\n\t\t\t\t\tif (option.value.toString().trim().toLowerCase().includes(currentOperatingSystem.toLowerCase())) {\n\t\t\t\t\t\tselectMenu.selectedIndex = index;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tselectMenu.selectedIndex = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Now do the same as changeSelection function\n\t\tconst newSelection = calculateSelectedContent(selectMenuList);\n\t\tconst contentMatch = setSelectedContent(newSelection, selectContentList);\n\t\t// If at this point no element has the 'data-select-content' value, then set the default if it exists\n\t\tif (contentMatch === false) {\n\t\t\tsetDefaultContent(selectContentList);\n\t\t}\n\t}\n}\n\nfunction changeSelection(event, selectMenuList, selectContentList) {\n\t// Change the styles applied to the elements with class .docsify-select__content in this block according to the combination of selectMenu values\n\t// set all selectContent values to nothing\n\t// set current selectContent values with matching 'data-select-content' to selectContentActive\n\tconst newSelection = calculateSelectedContent(selectMenuList);\n\tconst contentMatch = setSelectedContent(newSelection, selectContentList);\n\n\t// If at this point no element has the 'data-select-content' value, then set the default if it exists\n\tif (contentMatch === false) {\n\t\tsetDefaultContent(selectContentList);\n\t}\n}\n\nfunction changeAllSyncedSelections(event, selectBlocks) {\n\t// Get selectMenuId\n\tconst selectMenuId = event.target.id;\n\tconst selectOption = event.target.value;\n\n\t// For each selectBlock, if it contains a menu matching selectMenuId\n\tselectBlocks.forEach(selectBlock => {\n\t\tconst selectContentList = selectBlock.querySelectorAll(`.${classNames.selectContent}`);\n\t\tconst selectMenuList = selectBlock.querySelectorAll(`.${classNames.selectMenu}`);\n\t\tselectMenuList.forEach(selectMenu => {\n\t\t\tif (selectMenu.id === selectMenuId) {\n\t\t\t\tArray.prototype.forEach.call(selectMenu.options, (option, index) => {\n\t\t\t\t\tif (option.value === selectOption) {\n\t\t\t\t\t\tselectMenu.selectedIndex = index;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Now do the same as changeSelection function\n\t\tconst newSelection = calculateSelectedContent(selectMenuList);\n\t\tconst contentMatch = setSelectedContent(newSelection, selectContentList);\n\t\t// If at this point no element has the 'data-select-content' value, then set the default if it exists\n\t\tif (contentMatch === false) {\n\t\t\tsetDefaultContent(selectContentList);\n\t\t}\n\t});\n}\n\n// Plugin\n// =============================================================================\nfunction docsifySelect(hook, _) {\n\tlet hasSelect = false;\n\thook.beforeEach(content => {\n\t\thasSelect = regex.selectBlockMarkup.test(content);\n\t\tif (hasSelect) {\n\t\t\tcontent = renderSelectGroupsStage1(content);\n\t\t}\n\n\t\treturn content;\n\t});\n\n\thook.afterEach((html, next) => {\n\t\tif (hasSelect) {\n\t\t\thtml = renderSelectGroupsStage2(html);\n\t\t}\n\n\t\tnext(html);\n\t});\n\n\thook.doneEach(() => {\n\t\t// eslint-disable-next-line no-warning-comments\n\t\t// TODO: see if can be moved to onClick event of entire content block (like in docsify-tabs)\n\t\tif (hasSelect) {\n\t\t\tconst selectContainer = document.querySelector(`.${classNames.selectContainer}`);\n\t\t\tconst selectBlocks = selectContainer.querySelectorAll(`.${classNames.selectBlock}`);\n\t\t\tif (selectBlocks.length !== 0) {\n\t\t\t\tselectBlocks.forEach(selectBlock => {\n\t\t\t\t\tconst selectMenuList = selectBlock.querySelectorAll(`.${classNames.selectMenu}`);\n\t\t\t\t\tconst selectContentList = selectBlock.querySelectorAll(`.${classNames.selectContent}`);\n\t\t\t\t\t// Set initial selection based on MenuList & SelectContent in SelectBlock\n\t\t\t\t\tsetInitialSelection(selectMenuList, selectContentList);\n\t\t\t\t\tselectMenuList.forEach(selectMenu => {\n\t\t\t\t\t\t// Set change handler\n\t\t\t\t\t\tselectMenu.addEventListener('change', event => {\n\t\t\t\t\t\t\tif (settings.sync) {\n\t\t\t\t\t\t\t\tchangeAllSyncedSelections(event, selectBlocks);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Change selection for MenuList & SelectContent in SelectBlock\n\t\t\t\t\t\t\t\tchangeSelection(event, selectMenuList, selectContentList);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\thook.mounted(() => {\n\t});\n}\n\nif (window) {\n\twindow.$docsify = window.$docsify || {};\n\n\t// Add config object\n\twindow.$docsify.select = window.$docsify.select || {};\n\n\t// Update settings based on $docsify config\n\tObject.keys(window.$docsify.select).forEach(key => {\n\t\tif (Object.prototype.hasOwnProperty.call(settings, key)) {\n\t\t\tsettings[key] = window.$docsify.select[key];\n\t\t}\n\t});\n\n\t// Add plugin data\n\twindow.$docsify.select.version = pkgVersion;\n\n\t// Init plugin\n\twindow.$docsify.plugins = [].concat(\n\t\tdocsifySelect,\n\t\t(window.$docsify.plugins || [])\n\t);\n}\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","commentReplaceMark","classNames","selectContainer","selectBlock","selectGroup","selectMenuContainer","selectMenu","selectOption","selectContent","selectContentActive","regex","codeMarkup","commentReplaceMarkup","RegExp","selectBlockMarkup","selectMenuLabelsMarkup","selectHeadingMarkup","settings","sync","detectOperatingSystem","enabled","menuId","theme","prepareDataSelectAttribute","string","toLowerCase","trim","split","join","calculateSelectedContent","selectMenuList","newSelection","Array","prototype","forEach","call","length","value","setSelectedContent","selectContentList","contentMatch","classList","remove","getAttribute","add","setDefaultContent","setInitialSelection","currentOperatingSystem","operatingSystemName","window","navigator","userAgent","includes","id","options","option","index","toString","selectedIndex","$docsify","select","Object","keys","key","hasOwnProperty","version","plugins","concat","hook","_","hasSelect","beforeEach","content","test","selectBlockMatch","selectMatch","codeBlockMatch","match","codeBlockMarkers","map","item","i","codeMarker","replace","selectTheme","selectGroups","selectStartReplacement","selectEndReplacement","hasSelectHeadings","selectBlockIndent","selectBlockStart","selectBlockEnd","selectMenuLabels","exec","selectGroupOptions","selectOptions","dataSelectContentAttribute","selectMenuLabel","values","renderSelectGroupsStage1","afterEach","html","next","selectReplaceMatch","selectComment","selectReplacement","renderSelectGroupsStage2","doneEach","selectBlocks","querySelector","querySelectorAll","addEventListener","event","selectMenuId","target","mounted"],"mappings":"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"}