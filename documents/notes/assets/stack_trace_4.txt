Error while indexing D:\Program Files\Steam\steamapps\common\Stellaris\common\special_projects\04_projects_shroud.txt
To reindex this file IDE has to be restarted

java.lang.AssertionError: Reentrant indexing
	at com.intellij.util.indexing.FileBasedIndexImpl.markFileIndexed(FileBasedIndexImpl.java:1749)
	at com.intellij.util.indexing.FileBasedIndexImpl.createSingleIndexValueApplier(FileBasedIndexImpl.java:1658)
	at com.intellij.util.indexing.FileBasedIndexImpl.updateSingleIndex(FileBasedIndexImpl.java:1616)
	at com.intellij.util.indexing.FileBasedIndexImpl.tryIndexWithoutContent(FileBasedIndexImpl.java:1996)
	at com.intellij.util.indexing.FileBasedIndexImpl.lambda$scheduleFileForIndexing$29(FileBasedIndexImpl.java:1957)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.lambda$freezeFileTypeTemporarilyWithProvidedValueIn$14(FileTypeManagerImpl.java:764)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.cacheFileTypesInside(FileTypeManagerImpl.java:834)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.freezeFileTypeTemporarilyWithProvidedValueIn(FileTypeManagerImpl.java:760)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.freezeFileTypeTemporarilyIn(FileTypeManagerImpl.java:751)
	at com.intellij.util.indexing.FileBasedIndexImpl.scheduleFileForIndexing(FileBasedIndexImpl.java:1951)
	at com.intellij.util.indexing.events.ChangedFilesCollector$4.process(ChangedFilesCollector.java:201)
	at com.intellij.util.indexing.events.ChangedFilesCollector$5.lambda$process$0(ChangedFilesCollector.java:246)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeNonCancelableSection$3(CoreProgressManager.java:289)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:755)
	at com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(CoreProgressManager.java:711)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$computeInNonCancelableSection$4(CoreProgressManager.java:297)
	at com.intellij.openapi.progress.Cancellation.computeInNonCancelableSection(Cancellation.java:139)
	at com.intellij.openapi.progress.impl.CoreProgressManager.computeInNonCancelableSection(CoreProgressManager.java:297)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeNonCancelableSection(CoreProgressManager.java:288)
	at com.intellij.util.indexing.events.ChangedFilesCollector$5.lambda$process$1(ChangedFilesCollector.java:245)
	at com.intellij.util.ConcurrencyUtil.withLock(ConcurrencyUtil.java:277)
	at com.intellij.util.indexing.events.ChangedFilesCollector$5.process(ChangedFilesCollector.java:243)
	at com.intellij.util.indexing.events.VfsEventsMerger.processChanges(VfsEventsMerger.java:121)
	at com.intellij.util.indexing.events.ChangedFilesCollector.processFilesInReadAction(ChangedFilesCollector.java:240)
	at com.intellij.util.indexing.events.ChangedFilesCollector.processFilesToUpdateInReadAction(ChangedFilesCollector.java:188)
	at com.intellij.util.indexing.events.ChangedFilesCollector.ensureUpToDate(ChangedFilesCollector.java:147)
	at com.intellij.util.indexing.FileBasedIndexImpl.ensureUpToDate(FileBasedIndexImpl.java:821)
	at com.intellij.util.indexing.FileBasedIndexEx.readIndexAndProcessExceptions(FileBasedIndexEx.java:348)
	at com.intellij.util.indexing.FileBasedIndexEx.collectFileIdsContainingAnyKey(FileBasedIndexEx.java:613)
	at com.intellij.util.indexing.FileBasedIndexEx.processFilesContainingAnyKey(FileBasedIndexEx.java:476)
	at com.intellij.util.indexing.FileBasedIndexImpl.processFilesContainingAnyKey(FileBasedIndexImpl.java:1198)
	at icu.windea.pls.lang.search.ParadoxFilePathSearcher.processQuery(ParadoxFilePathSearcher.kt:46)
	at icu.windea.pls.lang.search.ParadoxFilePathSearcher.processQuery(ParadoxFilePathSearcher.kt:22)
	at com.intellij.openapi.application.QueryExecutorBase.execute(QueryExecutorBase.java:76)
	at com.intellij.util.ExecutorsQuery.processResults(ExecutorsQuery.java:31)
	at com.intellij.util.AbstractQuery.doProcessResults(AbstractQuery.java:83)
	at com.intellij.util.AbstractQuery.delegateProcessResults(AbstractQuery.java:100)
	at icu.windea.pls.lang.search.ParadoxQuery.find(ParadoxQuery.kt:31)
	at icu.windea.pls.lang.util.ParadoxInlineScriptManager.getInlineScriptFile(ParadoxInlineScriptManager.kt:118)
	at icu.windea.pls.ep.resolve.ParadoxInlineScriptInlineSupport.getInlinedElement$lambda$1(ParadoxInlineSupports.kt:26)
	at icu.windea.pls.core.RecursionExtensionsKt.withRecursionGuard(RecursionExtensions.kt:20)
	at icu.windea.pls.ep.resolve.ParadoxInlineScriptInlineSupport.getInlinedElement(ParadoxInlineSupports.kt:22)
	at icu.windea.pls.ep.resolve.ParadoxInlineScriptInlineSupport.getInlinedElement(ParadoxInlineSupports.kt:15)
	at icu.windea.pls.ep.resolve.ParadoxInlineSupport$INSTANCE.getInlinedElement(ParadoxInlineSupport.kt:31)
	at icu.windea.pls.lang.util.manipulators.ParadoxScriptManipulator.doYieldMember(ParadoxScriptManipulator.kt:55)
	at icu.windea.pls.lang.util.manipulators.ParadoxScriptManipulator.access$doYieldMember(ParadoxScriptManipulator.kt:13)
	at icu.windea.pls.lang.util.manipulators.ParadoxScriptManipulator$doYieldMember$1.invokeSuspend(ParadoxScriptManipulator.kt)
	at _COROUTINE._BOUNDARY._(CoroutineDebugging.kt:42)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner$Indexer.getApplierForFileIndexUpdate(IndexUpdateRunner.kt:347)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner$Indexer.indexOneFile(IndexUpdateRunner.kt:299)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner.indexOneFileHandleExceptions(IndexUpdateRunner.kt:239)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner$doIndexFiles$1$1.invokeSuspend(IndexUpdateRunner.kt:149)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner$processFileSetInParallel$2$1$1$1$invokeSuspend$$inlined$useWithScope$default$1.invokeSuspend(IndexUpdateRunner.kt:57)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner$processFileSetInParallel$2$1$1$1.invokeSuspend(IndexUpdateRunner.kt:564)
Caused by: java.lang.AssertionError: Reentrant indexing
	at com.intellij.util.indexing.FileBasedIndexImpl.markFileIndexed(FileBasedIndexImpl.java:1749)
	at com.intellij.util.indexing.FileBasedIndexImpl.createSingleIndexValueApplier(FileBasedIndexImpl.java:1658)
	at com.intellij.util.indexing.FileBasedIndexImpl.updateSingleIndex(FileBasedIndexImpl.java:1616)
	at com.intellij.util.indexing.FileBasedIndexImpl.tryIndexWithoutContent(FileBasedIndexImpl.java:1996)
	at com.intellij.util.indexing.FileBasedIndexImpl.lambda$scheduleFileForIndexing$29(FileBasedIndexImpl.java:1957)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.lambda$freezeFileTypeTemporarilyWithProvidedValueIn$14(FileTypeManagerImpl.java:764)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.cacheFileTypesInside(FileTypeManagerImpl.java:834)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.freezeFileTypeTemporarilyWithProvidedValueIn(FileTypeManagerImpl.java:760)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.freezeFileTypeTemporarilyIn(FileTypeManagerImpl.java:751)
	at com.intellij.util.indexing.FileBasedIndexImpl.scheduleFileForIndexing(FileBasedIndexImpl.java:1951)
	at com.intellij.util.indexing.events.ChangedFilesCollector$4.process(ChangedFilesCollector.java:201)
	at com.intellij.util.indexing.events.ChangedFilesCollector$5.lambda$process$0(ChangedFilesCollector.java:246)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeNonCancelableSection$3(CoreProgressManager.java:289)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:755)
	at com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(CoreProgressManager.java:711)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$computeInNonCancelableSection$4(CoreProgressManager.java:297)
	at com.intellij.openapi.progress.Cancellation.computeInNonCancelableSection(Cancellation.java:139)
	at com.intellij.openapi.progress.impl.CoreProgressManager.computeInNonCancelableSection(CoreProgressManager.java:297)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeNonCancelableSection(CoreProgressManager.java:288)
	at com.intellij.util.indexing.events.ChangedFilesCollector$5.lambda$process$1(ChangedFilesCollector.java:245)
	at com.intellij.util.ConcurrencyUtil.withLock(ConcurrencyUtil.java:277)
	at com.intellij.util.indexing.events.ChangedFilesCollector$5.process(ChangedFilesCollector.java:243)
	at com.intellij.util.indexing.events.VfsEventsMerger.processChanges(VfsEventsMerger.java:121)
	at com.intellij.util.indexing.events.ChangedFilesCollector.processFilesInReadAction(ChangedFilesCollector.java:240)
	at com.intellij.util.indexing.events.ChangedFilesCollector.processFilesToUpdateInReadAction(ChangedFilesCollector.java:188)
	at com.intellij.util.indexing.events.ChangedFilesCollector.ensureUpToDate(ChangedFilesCollector.java:147)
	at com.intellij.util.indexing.FileBasedIndexImpl.ensureUpToDate(FileBasedIndexImpl.java:821)
	at com.intellij.util.indexing.FileBasedIndexEx.readIndexAndProcessExceptions(FileBasedIndexEx.java:348)
	at com.intellij.util.indexing.FileBasedIndexEx.collectFileIdsContainingAnyKey(FileBasedIndexEx.java:613)
	at com.intellij.util.indexing.FileBasedIndexEx.processFilesContainingAnyKey(FileBasedIndexEx.java:476)
	at com.intellij.util.indexing.FileBasedIndexImpl.processFilesContainingAnyKey(FileBasedIndexImpl.java:1198)
	at icu.windea.pls.lang.search.ParadoxFilePathSearcher.processQuery(ParadoxFilePathSearcher.kt:46)
	at icu.windea.pls.lang.search.ParadoxFilePathSearcher.processQuery(ParadoxFilePathSearcher.kt:22)
	at com.intellij.openapi.application.QueryExecutorBase.execute(QueryExecutorBase.java:76)
	at com.intellij.util.ExecutorsQuery.processResults(ExecutorsQuery.java:31)
	at com.intellij.util.AbstractQuery.doProcessResults(AbstractQuery.java:83)
	at com.intellij.util.AbstractQuery.delegateProcessResults(AbstractQuery.java:100)
	at icu.windea.pls.lang.search.ParadoxQuery.find(ParadoxQuery.kt:31)
	at icu.windea.pls.lang.util.ParadoxInlineScriptManager.getInlineScriptFile(ParadoxInlineScriptManager.kt:118)
	at icu.windea.pls.ep.resolve.ParadoxInlineScriptInlineSupport.getInlinedElement$lambda$1(ParadoxInlineSupports.kt:26)
	at icu.windea.pls.core.RecursionExtensionsKt.withRecursionGuard(RecursionExtensions.kt:20)
	at icu.windea.pls.ep.resolve.ParadoxInlineScriptInlineSupport.getInlinedElement(ParadoxInlineSupports.kt:22)
	at icu.windea.pls.ep.resolve.ParadoxInlineScriptInlineSupport.getInlinedElement(ParadoxInlineSupports.kt:15)
	at icu.windea.pls.ep.resolve.ParadoxInlineSupport$INSTANCE.getInlinedElement(ParadoxInlineSupport.kt:31)
	at icu.windea.pls.lang.util.manipulators.ParadoxScriptManipulator.doYieldMember(ParadoxScriptManipulator.kt:55)
	at icu.windea.pls.lang.util.manipulators.ParadoxScriptManipulator.access$doYieldMember(ParadoxScriptManipulator.kt:13)
	at icu.windea.pls.lang.util.manipulators.ParadoxScriptManipulator$doYieldMember$1.invokeSuspend(ParadoxScriptManipulator.kt)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith$$$capture(ContinuationImpl.kt:33)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt)
	at kotlin.sequences.SequenceBuilderIterator.hasNext(SequenceBuilder.kt:129)
	at kotlin.sequences.FilteringSequence$iterator$1.calcNext(Sequences.kt:169)
	at kotlin.sequences.FilteringSequence$iterator$1.hasNext(Sequences.kt:194)
	at icu.windea.pls.lang.util.ParadoxDefinitionManager.doMatchProperties(ParadoxDefinitionManager.kt:822)
	at icu.windea.pls.lang.util.ParadoxDefinitionManager.doMatchDefinition(ParadoxDefinitionManager.kt:429)
	at icu.windea.pls.lang.util.ParadoxDefinitionManager.matchesSubtype(ParadoxDefinitionManager.kt:368)
	at icu.windea.pls.model.ParadoxDefinitionInfo.doGetSubtypeConfigs(ParadoxDefinitionInfo.kt:112)
	at icu.windea.pls.model.ParadoxDefinitionInfo.doGetSubtypeConfigsFromCache(ParadoxDefinitionInfo.kt:105)
	at icu.windea.pls.model.ParadoxDefinitionInfo.getSubtypeConfigs(ParadoxDefinitionInfo.kt:82)
	at icu.windea.pls.model.ParadoxDefinitionInfo.doGetDeclaration(ParadoxDefinitionInfo.kt:127)
	at icu.windea.pls.model.ParadoxDefinitionInfo.doGetDeclarationFromCache(ParadoxDefinitionInfo.kt:122)
	at icu.windea.pls.model.ParadoxDefinitionInfo.getDeclaration(ParadoxDefinitionInfo.kt:78)
	at icu.windea.pls.ep.configContext.BaseCwtConfigContextProvider.getCacheKey(CwtConfigContextProviders.kt:79)
	at icu.windea.pls.config.configContext.CwtConfigContext.doGetCacheKey(CwtConfigContext.kt:65)
	at icu.windea.pls.config.configContext.CwtConfigContext.getConfigs(CwtConfigContext.kt:45)
	at icu.windea.pls.lang.util.ParadoxExpressionManager.doGetConfigs(ParadoxExpressionManager.kt:518)
	at icu.windea.pls.lang.util.ParadoxExpressionManager.getConfigs(ParadoxExpressionManager.kt:481)
	at icu.windea.pls.lang.util.ParadoxExpressionManager.doGetExpressionReferences(ParadoxExpressionManager.kt:885)
	at icu.windea.pls.lang.util.ParadoxExpressionManager.doGetExpressionReferencesFromCache$lambda$65(ParadoxExpressionManager.kt:875)
	at com.intellij.psi.util.CachedValuesManager$NonPhysicalPsiHandlerProvider.compute(CachedValuesManager.java:222)
	at com.intellij.psi.util.CachedValuesManager$NonPhysicalPsiHandlerProvider.compute(CachedValuesManager.java:215)
	at com.intellij.psi.impl.PsiParameterizedCachedValue.doCompute(PsiParameterizedCachedValue.kt:24)
	at com.intellij.util.CachedValueBase.lambda$getValueWithLock$3(CachedValueBase.java:299)
	at com.intellij.util.CachedValueBase.computeData(CachedValueBase.java:37)
	at com.intellij.util.CachedValueBase.lambda$getValueWithLock$4(CachedValueBase.java:299)
	at com.intellij.openapi.util.RecursionManager$1.computePreventingRecursion(RecursionManager.java:113)
	at com.intellij.openapi.util.RecursionGuard.doPreventingRecursion(RecursionGuard.java:28)
	at com.intellij.openapi.util.RecursionManager.doPreventingRecursion(RecursionManager.java:68)
	at com.intellij.util.CachedValueBase.getValueWithLock(CachedValueBase.java:300)
	at com.intellij.psi.impl.PsiParameterizedCachedValue.getValue(PsiParameterizedCachedValue.kt:18)
	at com.intellij.psi.util.CachedValuesManager.getParameterizedCachedValue(CachedValuesManager.java:97)
	at com.intellij.psi.util.CachedValuesManager.getCachedValue(CachedValuesManager.java:212)
	at icu.windea.pls.lang.util.ParadoxExpressionManager.doGetExpressionReferencesFromCache(ParadoxExpressionManager.kt:874)
	at icu.windea.pls.lang.util.ParadoxExpressionManager.getExpressionReferences(ParadoxExpressionManager.kt:859)
	at icu.windea.pls.ep.index.ParadoxDynamicValueIndexInfoSupport.indexScriptElement(ParadoxIndexInfoSupports.Core.kt:83)
	at icu.windea.pls.lang.index.ParadoxMergedIndex$indexDataForScriptFile$1.visitElement(ParadoxMergedIndex.kt:66)
	at com.intellij.psi.impl.PsiElementBase.accept(PsiElementBase.java:270)
	at icu.windea.pls.script.psi.impl.ParadoxScriptPropertyKeyImpl.accept(ParadoxScriptPropertyKeyImpl.java:33)
	at com.intellij.psi.PsiWalkingState.visit(PsiWalkingState.java:58)
	at com.intellij.psi.PsiWalkingState.visit(PsiWalkingState.java:11)
	at com.intellij.util.WalkingState.walkChildren(WalkingState.java:63)
	at com.intellij.util.WalkingState.elementStarted(WalkingState.java:40)
	at com.intellij.psi.PsiWalkingState.elementStarted(PsiWalkingState.java:67)
	at com.intellij.psi.PsiRecursiveElementWalkingVisitor.visitElement(PsiRecursiveElementWalkingVisitor.java:34)
	at icu.windea.pls.lang.index.ParadoxMergedIndex$indexDataForScriptFile$1.visitElement(ParadoxMergedIndex.kt:93)
	at com.intellij.psi.impl.PsiElementBase.accept(PsiElementBase.java:270)
	at icu.windea.pls.script.psi.impl.ParadoxScriptRootBlockImpl.accept(ParadoxScriptRootBlockImpl.java:30)
	at com.intellij.psi.impl.source.tree.SharedImplUtil.acceptChildren(SharedImplUtil.java:183)
	at com.intellij.psi.impl.source.PsiFileImpl.acceptChildren(PsiFileImpl.java:860)
	at icu.windea.pls.lang.index.ParadoxMergedIndex.indexDataForScriptFile(ParadoxMergedIndex.kt:63)
	at icu.windea.pls.lang.index.ParadoxMergedIndex.indexData(ParadoxMergedIndex.kt:53)
	at icu.windea.pls.lang.index.ParadoxFileBasedIndex.buildFileData(ParadoxFileBasedIndex.kt:95)
	at icu.windea.pls.lang.index.ParadoxFileBasedIndex.getIndexer$lambda$0(ParadoxFileBasedIndex.kt:28)
	at com.intellij.util.indexing.impl.MapReduceIndex.mapByIndexer(MapReduceIndex.java:363)
	at com.intellij.util.indexing.impl.MapReduceIndex.mapInput(MapReduceIndex.java:354)
	at com.intellij.util.indexing.impl.MapReduceIndex.mapInputAndPrepareUpdate(MapReduceIndex.java:279)
	at com.intellij.indexing.composite.CompositeInvertedIndexBase.updateBaseIndex(CompositeInvertedIndexBase.java:275)
	at com.intellij.indexing.composite.CompositeInvertedIndexBase.mapInputAndPrepareUpdate(CompositeInvertedIndexBase.java:59)
	at com.intellij.indexing.composite.CompositeInvertedIndexBase.mapInputAndPrepareUpdate(CompositeInvertedIndexBase.java:25)
	at com.intellij.util.indexing.FileBasedIndexImpl.createSingleIndexValueApplier(FileBasedIndexImpl.java:1664)
	at com.intellij.util.indexing.FileBasedIndexImpl.lambda$doIndexFileContent$21(FileBasedIndexImpl.java:1534)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.lambda$freezeFileTypeTemporarilyWithProvidedValueIn$14(FileTypeManagerImpl.java:764)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.cacheFileTypesInside(FileTypeManagerImpl.java:834)
	at com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl.freezeFileTypeTemporarilyWithProvidedValueIn(FileTypeManagerImpl.java:760)
	at com.intellij.util.indexing.FileBasedIndexImpl.doIndexFileContent(FileBasedIndexImpl.java:1487)
	at com.intellij.util.indexing.FileBasedIndexImpl.indexFileContent(FileBasedIndexImpl.java:1462)
	at com.intellij.util.indexing.contentQueue.IndexUpdateRunner$Indexer.getApplierForFileIndexUpdate$lambda$1(IndexUpdateRunner.kt:350)
	at com.intellij.openapi.application.rw.InternalReadAction.insideReadAction(InternalReadAction.kt:120)
	at com.intellij.openapi.application.rw.InternalReadAction.tryReadCancellable$lambda$6(InternalReadAction.kt:110)
	at com.intellij.openapi.application.rw.CancellableReadActionKt.cancellableReadActionInternal$lambda$3$lambda$2$lambda$1(cancellableReadAction.kt:32)
	at com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction$lambda$11(AnyThreadWriteThreadingSupport.kt:522)
	at com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)
	at com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(AnyThreadWriteThreadingSupport.kt:522)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1064)
	at com.intellij.openapi.application.rw.CancellableReadActionKt.cancellableReadActionInternal$lambda$3$lambda$2(cancellableReadAction.kt:30)
	at com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(ProgressIndicatorUtilService.java:73)
	at com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(ProgressIndicatorUtils.java:152)
	at com.intellij.openapi.application.rw.CancellableReadActionKt.cancellableReadActionInternal(cancellableReadAction.kt:28)
	at com.intellij.openapi.application.rw.InternalReadAction.tryReadCancellable(InternalReadAction.kt:109)
	at com.intellij.openapi.application.rw.InternalReadAction.tryReadAction(InternalReadAction.kt:93)
	at com.intellij.openapi.application.rw.InternalReadAction.readLoop(InternalReadAction.kt:80)
	at com.intellij.openapi.application.rw.InternalReadAction.access$readLoop(InternalReadAction.kt:17)
	at com.intellij.openapi.application.rw.InternalReadAction$readLoop$1.invokeSuspend(InternalReadAction.kt)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith$$$capture(ContinuationImpl.kt:33)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:608)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:873)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:763)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:750)
