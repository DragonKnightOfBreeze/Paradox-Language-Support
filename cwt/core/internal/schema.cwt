priorities = {
    $path = $enum:priority$
}

sysstem_scopes = {
    $system_scope$ = {
        base_id = $system_scope$
    }
}

locales = {
    $locale$ = {
        codes = { $scalar }
    }
}

types = {
    ## replace_scopes = $scope_context
    ## push_scope = $scope
    ## type_key_filter = $any
    ## type_key_regex = $scalar
    ## starts_with = $scalar
    ## graph_related_types = $any
    type[$type$] = {
        skip_root_key = { $scalar }
        base_type = $type$
        path = $scalar
        path_file = $scalar
        path_extension = $scalar
        path_strict = $bool
        name_field = $scalar
        type_key_prefix = $scalar
        name_from_file = $bool
        type_per_file = $bool
        unique = $bool
        severity = $enum:severity$
        ## replace_scopes = $scope_context
        ## push_scope = $scope
        ## type_key_filter = $any
        ## type_key_regex = $scalar
        ## starts_with = $scalar
        ## only_if_not = $scalar
        ## group = $scalar
        subtype[$subtype$] = $any
        localisation = {
            subtype[$subtype$] = {
                ## required
                ## optional
                ## primary
                $scalar = $scalar
            }
            ## required
            ## optional
            ## primary
            $scalar = $scalar
        }
        images = {
            subtype[$subtype$] = {
                ## required
                ## optional
                ## primary
                $scalar = $scalar
            }
            ## required
            ## optional
            ## primary
            $scalar = $scalar
        }
    }
}

enums = {
    enum[$enum$] = {
        $scalar
    }
    complex_enum[$complex_enum$] = {
        path = $scalar
        path_file = $scalar
        path_extension = $scalar
        path_strict = $bool
        start_from_root = $bool
        name = $any
    }
}

values = {
    value[$dynamic_value_type$] = {
        $dynamic_value$
    }
}

links = {
    $link$ = {
        desc = $scalar
        from_data = $bool
        from_argument = $bool
        type = $enum:link_type$
        prefix = $scalar
        data_source = $data_expression
        input_scopes = { $scope$ }
        output_scope = $scope$
        for_definition_type = $type$
    }
}

localisation_links = {
    $localisation_link$ = {
        desc = $scalar
        from_data = $bool
        from_argument = $bool
        type = $enum:link_type$
        prefix = $scalar
        data_source = $data_expression
        input_scopes = { $scope$ }
        output_scope = $scope$
    }
}

localisation_promotions = {
    $localisation_link$ = $scope$
    $localisation_link$ = { $scope$ }
}

localisation_commands = {
    $localisation_command$ = $scope$
    $localisation_command$ = { $scope$ }
}

modifier_categories = {
    $modifier_category$ = {
        supported_scopes = $scope$
        supported_scopes = { $scope$ }
    }
}

modifiers = {
    $modifier$ = $scope$
}

scopes = {
    $scope_name$ = {
        aliases = { $scope$ }
        is_subscope_of = $scope$
    }
}

scope_groups = {
    $scope_group$ = { $scope$ }
}

database_object_types = {
    $database_object_type$ = {
        type = $type$
        swap_type = $type$ # $swapped_type$
        localisation = $prefix$
    }
}

# extended
scripted_variables = {
    $scripted_variable$
}

# extended
definitions = {
    ## type = $scalar
    $definition$
}

# extended
game_rules = {
    $game_rule$
    $game_rule$ = $declaration
}

# extended
on_actions = {
    $on_action$
}

# extended
inline_scripts = {
    ## context_configs_type = $enum:context_configs_type$
    $inline_script$
    ## context_configs_type = $enum:context_configs_type$
    $inline_script$ = $declaration
}

# extended
parameters = {
    ## context_key = $scalar
    ## context_configs_type = $enum:context_configs_type$
    ## inherit
    $parameter$
    ## context_key = $scalar
    ## context_configs_type = $enum:context_configs_type$
    ## inherit
    $parameter$ = $declaration
}

# extended
complex_enum_values = {
    $complex_enum$ = {
        ## hint = $scalar
        $complex_enum_value$
    }
}

# extended
dynamic_values = {
    $dynamic_value_type$ = {
        ## hint = $scalar
        $dynamic_value$
    }
}

single_alias[$single_alias$] = $declaration

alias_name[$alias_name$:$alias_sub_name$] = $declaration

inline[$inline$] = $declaration

## cardinality = $cardinality
## replace_scopes = $scope_context
## push_scope = $scope
$$declaration = $declaration

$$data_expression = {
    bool
    int
    int[$start$..$end$]
    float
    float[$start$..$end$]
    scalar
    color_field
    color[$color_type$]

    percentage_field
    date_field
    localisation
    localisation_synced
    localisation_inline
    abs_filepath
    filename
    filename[$expression$]
    filepath
    filepath[$expression$]
    icon[$expression$]
    <modifier>
    <technology_with_level>
    <$definition_type_expression$>
    value[$dynamic_value_type$]
    value_set[$dynamic_value_type$]
    dynamic_value[$dynamic_value_type$]
    enum[$enum$]
    enum[$complex_enum$]
    scope_field
    scope[any]
    scope[$scope$]
    scope_group[$scope_group$]
    value_field
    value_field[$scope$]
    int_value_field
    int_value_field[$scope$]
    variable_field
    variable_field_32
    variable_field[$scope$]
    int_variable_field
    int_variable_field_32
    int_variable_field[$scope$]
    single_alias_right[$single_alias$]
    alias_name[$alias_name$] = alias_match_left[$alias_name$]
    alias_keys_field[$alias_name$]
    $any
    $parameter
    $parameter_value
    $localisation_parameter
    $shader_effect
    $database_object
    stellaris_name_format[$format$]

    ant:$ant_expression$
    ant.i:$ant_expression$

    re:$re$
    re.i:$re$
}

$enum:priority$ = { fios lios ordered }
$enum:severity$ = { error warning info hint }
$enum:link_type$ = { scope value both }
$enum:context_configs_type$ = { single multiple }
