import{_ as d,a as r,b as p,c,d as m,e as g,f as u,g as h}from"./diagram_tech_tree_1-CTcH3tRZ.js";import{_}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a,b as i,e as l,d as o,r as s,o as x}from"./app-Bh18iEp9.js";const v={};function f(w,e){const t=s("GameTypeNote"),n=s("DefinitionTypeNote");return x(),k("div",null,[e[7]||(e[7]=a('<h1 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h1><h2 id="md" tabindex="-1"><a class="header-anchor" href="#md"><span>Markdown</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>本章节提到的功能需要同时安装并启用官方的 <a href="https://plugins.jetbrains.com/plugin/7793-markdown" target="_blank" rel="noopener noreferrer">Markdown</a> 插件。</p></div><p>PLS 深度集成了 Markdown 支持，针对模组开发场景，优化了对链接、内联代码和代码块的处理。</p><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link"><span>链接</span></a></h3><p>通过特定语法格式的链接文本，PLS 可以将 Markdown 链接解析为匹配的目标引用（定义、本地化等）， 从而在编辑器中提供代码导航、快速文档等语言功能，为模组文档编写提供有力支持。</p><p>此功能同样适用于 HTML 链接，以及快速文档中的 PSI 元素导航（定义、本地化等）。</p><p><img src="'+d+'" alt=""></p><p>对于不同类型的引用链接，其格式与示例如下：</p><p><strong>CWT 规则</strong>（仅提供有限的支持）</p><ul><li>格式 <ul><li><code>cwt:{gameType}:{parts}</code></li></ul></li><li>示例 <ul><li><code>cwt:stellaris:types/civic_or_origin</code></li><li><code>cwt:stellaris:types/civic_or_origin/origin</code></li><li><code>cwt:stellaris:values/some_dynamic_value_type</code></li><li><code>cwt:stellaris:values/some_dynamic_value_type/some_value</code></li><li><code>cwt:stellaris:enums/some_enum</code></li><li><code>cwt:stellaris:enums/some_enum/some_value</code></li><li><code>cwt:stellaris:complex_enums/some_complex_enum</code></li><li><code>cwt:stellaris:complex_enums/some_complex_enum/some_value</code></li><li><code>cwt:stellaris:scopes/some_scope</code></li><li><code>cwt:stellaris:system_scopes/some_system_scope</code></li><li><code>cwt:stellaris:links/some_link</code></li><li><code>cwt:stellaris:localisation_links/some_localisation_link</code></li><li><code>cwt:stellaris:localisation_commands/some_localisation_command</code></li><li><code>cwt:stellaris:modifier_categories/some_modifier_category</code></li><li><code>cwt:stellaris:modifiers/some_modifier</code></li></ul></li></ul><p><strong>封装变量</strong></p><ul><li>格式 <ul><li><code>pdx.sv:{name}</code></li><li><code>pdx.sv:{gameType}:{name}</code></li></ul></li><li>示例 <ul><li><code>pdx.sv:civic_default_random_weight</code></li><li><code>pdx.sv:stellaris:civic_default_random_weight</code></li></ul></li></ul><p><strong>定义</strong></p><ul><li>格式 <ul><li><code>pdx.d:{typeExpression}/{name}</code></li><li><code>pdx.d:{gameType}:{typeExpression}/{name}</code></li></ul></li><li>示例 <ul><li><code>pdx.d:origin_default</code></li><li><code>pdx.d:stellaris:origin_default</code></li><li><code>pdx.d:civic_or_origin.origin/origin_default</code></li><li><code>pdx.d:stellaris:civic_or_origin.origin/origin_default</code></li></ul></li></ul><p><strong>本地化</strong></p><ul><li>格式 <ul><li><code>pdx.l:{name}</code></li><li><code>pdx.l:{gameType}:{name}</code></li></ul></li><li>示例 <ul><li><code>pdx.l:origin_default_desc</code></li><li><code>pdx.l:stellaris:origin_default_desc</code></li></ul></li></ul><p><strong>文件路径</strong>（相对于游戏或模组目录）</p><ul><li>格式 <ul><li><code>pdx.p:{path}</code></li><li><code>pdx.p:{gameType}:{path}</code></li></ul></li><li>示例 <ul><li><code>pdx.p:common/governments/civics/00_origins.txt</code></li><li><code>pdx.p:stellaris:common/governments/civics/00_origins.txt</code></li></ul></li></ul><p><strong>修正</strong></p><ul><li>格式 <ul><li><code>pdx.m:{name}</code></li><li><code>pdx.m:{gameType}:{name}</code></li></ul></li><li>示例 <ul><li><code>pdx.m:job_soldier_add</code></li><li><code>pdx.m:stellaris:job_soldier_add</code></li></ul></li></ul><p>备注：</p>',22)),i("ul",null,[i("li",null,[e[0]||(e[0]=i("code",null,"{gameType}",-1)),e[1]||(e[1]=l(" - ",-1)),o(t)]),i("li",null,[e[2]||(e[2]=i("code",null,"{typeExpression}",-1)),e[3]||(e[3]=l(" - ",-1)),o(n)])]),e[8]||(e[8]=a('<h3 id="inline-code" tabindex="-1"><a class="header-anchor" href="#inline-code"><span>内联代码</span></a></h3><div class="hint-container note"><p class="hint-container-title">注</p><p>本章节的功能需要启用特定的高级设置项（<code>高级设置 &gt; Paradox Language Support &gt; 解析 Markdown 内联代码</code>）。</p></div><p>PLS 可以尝试将 Markdown 内联代码解析为匹配的目标引用（定义、本地化等）， 从而在编辑器中额外提供代码导航、快速文档等语言功能。</p><p><img src="'+r+'" alt=""></p><p><img src="'+p+'" alt=""></p><p>对于不同类型的目标，其格式与示例如下：</p><p><strong>封装变量</strong></p><ul><li>格式 <ul><li><code>@{name}</code></li></ul></li><li>示例 <ul><li><code>@civic_default_random_weight</code></li></ul></li></ul><p><strong>定义</strong></p><ul><li>格式 <ul><li><code>{name}</code></li></ul></li><li>示例 <ul><li><code>origin_default</code></li></ul></li></ul><p><strong>本地化</strong></p><ul><li>格式 <ul><li><code>{name}</code></li></ul></li><li>示例 <ul><li><code>origin_default_desc</code></li></ul></li></ul><p>备注：</p><ul><li>如果可以同时解析为定义和本地化，则会优先解析为定义。</li></ul><h3 id="code-block" tabindex="-1"><a class="header-anchor" href="#code-block"><span>代码块</span></a></h3><p>通过在 Markdown 代码块的语言 ID 后面注入额外的信息，可以为其中的脚本/本地化/CSV文件的片段指定游戏类型和文件路径。 PLS 会根据这些信息来匹配 CWT 规则，从而提供各种高级语言功能，如同编写实际的脚本或本地化文件一样。</p><p><img src="'+c+'" alt=""></p><p>注入信息的格式与示例如下：</p><ul><li>格式 <ul><li><code>path={gameType}:{path}</code></li></ul></li><li>示例 <ul><li><code>path=stellaris:common/armies/injected_defence_armies.txt</code></li></ul></li></ul><p>更加完整的示例：</p><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-markdown"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">```paradox_script path=stellaris:common/armies/injected_defence_armies.txt</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">defense_army = {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    # ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">```</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：</p>',22)),i("ul",null,[i("li",null,[e[4]||(e[4]=i("code",null,"{gameType}",-1)),e[5]||(e[5]=l(" - ",-1)),o(t)]),e[6]||(e[6]=i("li",null,[i("code",null,"{path}"),l(" - 模拟的相对于游戏或模组目录的文件路径。必须是合法的脚本/本地化/CSV文件的路径。")],-1))]),e[9]||(e[9]=a('<h2 id="diagrams" tabindex="-1"><a class="header-anchor" href="#diagrams"><span>图表</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>本章节的功能需要安装并启用官方的 Diagrams 插件。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本章节的功能以及 Diagrams 插件仅在专业版 IDE 中可用（例如：IntelliJ IDEA Ultimate）。</p></div><p>PLS 提供了数种图表（Diagrams），可用于展示特定类型的定义的信息，以及相互之间的关系。</p><p>目前仅提供事件树与科技树的图表。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你也可以考虑使用定义的类型层级视图来查看事件树与科技树。</p><ul><li>光标位于定义或其引用上时，在主菜单中点击 <code>Navigate &gt; Type Hierarchy</code>，打开类型层级窗口。</li><li>在弹出的层级的工具窗口中，通过可折叠的树状视图，可以查看同一类型的所有定义的信息。</li><li>如果定义类型为事件或科技，也可以对应地以事件树或科技树的形式展示层级视图。</li></ul><p><img src="'+m+'" alt=""></p></div><h3 id="diagram-settings-page" tabindex="-1"><a class="header-anchor" href="#diagram-settings-page"><span>设置页面</span></a></h3><p>在 IDE 的设置页面中，点击 <code>Languages &amp; Frameworks &gt; Paradox Language Support &gt; 图表</code>，可以打开图表的设置页面。</p><p>可以在此根据多种条件，配置各类图表需要显示的节点。</p><p><img src="'+g+'" alt=""></p><h3 id="event-tree-diagram" tabindex="-1"><a class="header-anchor" href="#event-tree-diagram"><span>事件树</span></a></h3><p>可以通过以下几种方式打开事件树的图表：</p><ul><li>在项目视图中，选中事件的脚本文件或者其父目录（包括游戏或模组目录），然后打开右键菜单，选择 <code>Diagrams &gt; Show Diagram...</code>，接着选择任意属于事件树的图表类型。</li><li>在编辑器中，打开事件的脚本文件，然后打开右键菜单，选择 <code>Diagrams &gt; Show Diagram...</code>，接着选择任意属于事件树的图表类型。</li><li>如果可用，也可以直接通过快捷键或者随处搜索功能（按 <code>Shift + Shift</code>）直接打开。</li></ul><p>事件树的图表展示了事件的关键信息，以及事件之间的调用关系。可以通过上方的工具栏配置要显示的节点元素，以及过滤要展示的节点。</p><p><img src="'+u+'" alt=""></p><ol><li>用于设置要显示的节点元素。从左到右依次是类型、属性、本地化标题。</li><li>用于按查询作用域过滤要显示的节点。例如，仅显示已打开的文件中的事件对应的节点。</li><li>用于打开图表的设置页面。从左到右依次是 Diagrams 插件的设置页面与 PLS 的设置页面。</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>IDE 需要花费一定时间来完成数据加载与图形渲染。如果需要渲染的节点与节点元素过多，这个耗时可能相当长。</p></div><h3 id="tech-tree-diagram" tabindex="-1"><a class="header-anchor" href="#tech-tree-diagram"><span>科技树</span></a></h3><p>如果当前游戏类型为 <em>Stellaris</em>，可以通过以下几种方式打开科技树的图表：</p><ul><li>在项目视图中，选中科技的脚本文件或者其父目录（包括游戏或模组目录），然后打开右键菜单，选择 <code>Diagrams &gt; Show Diagram...</code>，接着选择任意属于科技树的图表类型。</li><li>在编辑器中，打开科技的脚本文件，然后打开右键菜单，选择 <code>Diagrams &gt; Show Diagram...</code>，接着选择任意属于科技树的图表类型。</li><li>如果可用，也可以直接通过快捷键或者随处搜索功能（按 <code>Shift + Shift</code>）直接打开。</li></ul><p>科技树的图表展示了科技的关键信息，以及科技之间的先后关系。可以通过上方的工具栏配置要显示的节点元素，以及过滤要展示的节点。</p><p><img src="'+h+'" alt=""></p><ol><li>用于设置要显示的节点元素。从左到右依次是类型、属性、本地化后的名字、图形显示（以科技卡的形式显示）。</li><li>用于按查询作用域过滤要显示的节点。例如，仅显示已打开的文件中的科技对应的节点。</li><li>用于打开图表的设置页面。从左到右依次是 Diagrams 插件的设置页面与 PLS 的设置页面。</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>IDE 需要花费一定时间来完成数据加载与图形渲染。如果需要渲染的节点与节点元素过多，这个耗时可能相当长。</p></div>',24))])}const D=_(v,[["render",f]]),T=JSON.parse('{"path":"/zh/extensions.html","title":"扩展","lang":"zh-CN","frontmatter":{"description":"扩展 Markdown 注 本章节提到的功能需要同时安装并启用官方的 Markdown 插件。 PLS 深度集成了 Markdown 支持，针对模组开发场景，优化了对链接、内联代码和代码块的处理。 链接 通过特定语法格式的链接文本，PLS 可以将 Markdown 链接解析为匹配的目标引用（定义、本地化等）， 从而在编辑器中提供代码导航、快速文档等语言...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"扩展\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-11-01T10:36:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DragonKnightOfBreeze\\",\\"url\\":\\"https://github.com/DragonKnightOfBreeze\\",\\"email\\":\\"dk_breeze@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://windea.icu/Paradox-Language-Support/zh/extensions.html"}],["meta",{"property":"og:site_name","content":"Paradox Language Support"}],["meta",{"property":"og:title","content":"扩展"}],["meta",{"property":"og:description","content":"扩展 Markdown 注 本章节提到的功能需要同时安装并启用官方的 Markdown 插件。 PLS 深度集成了 Markdown 支持，针对模组开发场景，优化了对链接、内联代码和代码块的处理。 链接 通过特定语法格式的链接文本，PLS 可以将 Markdown 链接解析为匹配的目标引用（定义、本地化等）， 从而在编辑器中提供代码导航、快速文档等语言..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-11-01T10:36:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-11-01T10:36:54.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://windea.icu/Paradox-Language-Support/en/extensions.html"}]]},"git":{"createdTime":1761993414000,"updatedTime":1761993414000,"contributors":[{"name":"DragonKnightOfBreeze","username":"DragonKnightOfBreeze","email":"dk_breeze@qq.com","commits":1,"url":"https://github.com/DragonKnightOfBreeze"}]},"readingTime":{"minutes":5.79,"words":1736},"filePathRelative":"zh/extensions.md","autoDesc":true}');export{D as comp,T as data};
