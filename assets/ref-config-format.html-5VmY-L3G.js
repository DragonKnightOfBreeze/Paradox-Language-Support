import{_ as s,a as n}from"./parameters_1-E5MDCLKe.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as l,o as t}from"./app-Bh18iEp9.js";const d={};function h(p,i){return t(),e("div",null,[...i[0]||(i[0]=[l(`<h1 id="附录-规则格式参考" tabindex="-1"><a class="header-anchor" href="#附录-规则格式参考"><span>附录：规则格式参考</span></a></h1><h2 id="vision" tabindex="-1"><a class="header-anchor" href="#vision"><span>定位与愿景</span></a></h2><p>本参考面向希望“理解/编写/扩展” CWT 规则（CWT config file）的作者与维护者，旨在：</p><ul><li><strong>统一术语与边界</strong>：对齐 PLS 与 CWTools 的语义，明确 PLS 的扩展点与差异。</li><li><strong>建立从文档到实现的映射</strong>：每个规则条目均标注对应接口/解析器，便于回溯源码与验证行为。</li><li><strong>指导实践</strong>：概述用途、格式与注意事项，为后续细化示例与校验规则打基础。</li></ul><p>参考关系：</p><ul><li>概念与示例以 CWTools 指南为基线：<code>references/cwt/guidance.md</code>。</li><li>PLS 的整体规则工作流与分组见：<code>docs/zh/config.md</code>。</li><li>规则接口与解析逻辑主要位于：<code>icu.windea.pls.config.config</code>（含 <code>delegated/</code> 与 <code>delegated/impl/</code>）。</li></ul><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>总览</span></a></h2><p>PLS 通过读取 <code>.cwt</code> 文件，构建“规则分组”，并将规则解析为结构化的“规则对象”，供代码高亮/补全/导航/检查/文档等功能使用。</p><ul><li><strong>规则来源与覆盖</strong>：见 <code>docs/zh/config.md</code> 的“规则分组/覆盖方式”。常见来源包括内置、远程、本地与项目本地，按“路径 + 规则ID”执行后序覆盖。</li><li><strong>两大要素</strong>： <ul><li>规则（config）：定义“键/值/块”的允许形态与上下文（如类型、枚举、别名、链接……）。</li><li>规则表达式（config expression）：在规则的字符串字段中描述取值/匹配的语法（如 <code>&lt;type&gt;</code>、<code>enum[...]</code>、<code>value[...]</code>、基数/模板/位置表达式等）。</li></ul></li><li><strong>解析流程（简化）</strong>： <ol><li>读取规则分组，构建规则文件 PSI。</li><li>按接口类别用解析器（Resolver）构造“委托型/内部”规则对象。</li><li>在语言特性中按上下文（作用域、类型名、声明上下文等）查询并应用这些规则。</li></ol></li></ul><p>术语约定：</p><ul><li>“规则（config）”包含“基础规则”、“普通规则”、“扩展规则”和“内部规则”。</li><li>“基础规则”（如 <code>CwtPropertyConfig</code>）是语法树级别的通用节点，不在本文档中逐一描述。</li></ul><h2 id="configs" tabindex="-1"><a class="header-anchor" href="#configs"><span>规则</span></a></h2><blockquote><p>本章节介绍各种规则的用途、格式要点与解析要点，帮助读者正确理解与编写这类特殊结构。</p></blockquote><h3 id="configs-normal" tabindex="-1"><a class="header-anchor" href="#configs-normal"><span>普通规则</span></a></h3><blockquote><p>与 CWTools 语义一致或兼容，PLS 可能在选项与上下文方面有少量扩展。</p></blockquote><h4 id="config-priority" tabindex="-1"><a class="header-anchor" href="#config-priority"><span>优先级</span></a></h4><p>优先级规则可以用来配置目标的覆盖方式。</p><ul><li><strong>用途</strong>：为“目标”的覆盖与合并提供统一策略，影响生效顺序与查询结果排序（流式查询除外）。</li><li><strong>适用目标</strong>：文件、全局封装变量、定义、本地化等。</li><li><strong>默认值</strong>：未命中任何目录映射时，使用 <code>LIOS</code>（后读覆盖）。</li></ul><p><strong>覆盖方式与行为</strong>：</p><ul><li><code>FIOS</code>（First In, Only Served）：只读一次。先加载者生效，后加载者会被直接忽略。</li><li><code>LIOS</code>（Last In, Only Served）：后读覆盖。后加载者覆盖先加载者。</li><li><code>DUPL</code>（Duplicates）：整文件覆盖。必须用同路径文件进行整体覆盖。</li><li><code>ORDERED</code>（Ordered）：顺序读取。不能覆盖既有条目，后加载者会被按序新增或合并。</li></ul><p><strong>排序与加载要点</strong>：</p><ul><li>查询（非流式）结果的排序由优先级驱动；同一路径下按加载顺序（游戏/依赖链）决定先后。</li><li>同一文件内，后出现的项会覆盖前面出现的项。</li><li>参见 <code>ParadoxPriorityProvider.getComparator()</code> 的排序实现与默认值。</li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">priorities</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # LHS - file path of containing directory, relative to entry directory</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # RHS - used override strategy</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # entry directory - normally game or mod directory, or \`game\` subdirectory of game directory</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # override strategy - available values: \`fios\`, \`lios\`, \`dupl\`, \`ordered\`; default: \`lios\`; ignore case</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;events&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fios</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实践示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 内置示例（节选）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">priorities</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;common/event_chains&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fios</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;common/on_actions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ordered</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;common/scripted_variables&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fios</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;events&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fios</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两个 MOD 都在 <code>events/</code> 中定义同名事件：由于 <code>events = fios</code>，先被读取（加载更早）的 MOD 生效，后者被忽略。</li><li>两个 MOD 都在 <code>common/on_actions/</code> 添加条目：由于 <code>ordered</code>，会顺序合并执行，不发生覆盖。</li></ul><h4 id="config-declaration" tabindex="-1"><a class="header-anchor" href="#config-declaration"><span>声明</span></a></h4><ul><li><p><strong>用途</strong>：声明“定义条目”的结构，用于补全、检查与快速文档等。</p></li><li><p><strong>路径定位</strong>：<code>{name}</code>，其中 <code>{name}</code> 为规则名称（即“定义类型”）。顶级属性若键为合法标识符且未被其他规则匹配，回退尝试解析为声明规则。</p></li><li><p><strong>依赖上下文</strong>：由 <code>CwtDeclarationConfigContextProvider</code> 构造声明上下文（含定义名、类型、子类型）。Game Rule/On Action 可通过扩展配置改写上下文。</p></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ol><li>解析名称：若键不是合法标识符则忽略（<code>CwtDeclarationConfigResolverImpl</code>）。</li><li>根级内联：若 RHS 为 <code>single_alias_right[...]</code>，先展开为普通属性规则（<code>CwtConfigManipulator.inlineSingleAlias</code>）。</li><li>生成最终规则树： <ul><li>深拷贝并按子类型裁剪/扁平化（<code>deepCopyConfigsInDeclarationConfig</code>）。</li><li>若命中 <code>subtype[...]</code> 且与上下文子类型匹配：打平其子规则；不匹配则跳过；非 <code>subtype[...]</code> 正常递归。</li><li>注入派生规则（<code>CwtInjectedConfigProvider.injectConfigs</code>），并统一设置 <code>parentConfig</code> 以保持父链。</li></ul></li><li>子类型缓存键：扫描 <code>subtype[...]</code> 收集用到的子类型集合（<code>subtypesUsedInDeclaration</code>），结合当前上下文生成 cache key，避免无关子类型导致的缓存失效。</li></ol></li><li><p><strong>与其他规则协作</strong>：</p><ul><li>可在声明内引用别名与单别名（<code>alias_name[...]</code>/<code>alias_match_left[...]</code>、<code>single_alias_right[...]</code>）。</li><li>切换类型（swapped type）的声明可直接嵌套在对应基础类型的声明中。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> scalar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 按子类型细化声明结构，仅在匹配的子类型下生效</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    subtype[triggered]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## cardinality = 0..1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        weight_multiplier</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            factor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> float</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            alias_name[modifier_rule]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias_match_left[modifier_rule]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## cardinality = 0..1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 根级单别名将在解析前被内联</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>subtype[...]</code> 仅在与上下文子类型匹配时生效；不匹配将被忽略（不会报错）。</li><li>根级 <code>single_alias_right[...]</code> 会先被展开后再参与后续解析与检查。</li><li>为保证后续功能的“向上溯源”，新增节点均会注入 <code>parentConfig</code>（父指针）。</li></ul><h4 id="config-system-scope" tabindex="-1"><a class="header-anchor" href="#config-system-scope"><span>系统作用域</span></a></h4><ul><li><p><strong>用途</strong>：为内置的“系统级作用域”（This/Root/Prev/From 等）提供元信息，用于快速文档与作用域栈推导。</p></li><li><p><strong>路径定位</strong>：<code>system_scopes/{id}</code>，其中 <code>{id}</code> 为系统作用域 ID。</p></li><li><p><strong>字段含义</strong>：</p><ul><li><code>id</code>：系统作用域 ID。</li><li><code>base_id</code>：基底作用域 ID；未指定时默认为 <code>id</code>。用于将同族系统作用域（如 <code>Prev*</code>、<code>From*</code>）归类，便于展示与文档说明。</li><li><code>: string</code>：可读名称；未指定时默认为 <code>id</code>。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>读取 <code>id = key</code>，<code>base_id = properties[&#39;base_id&#39;] ?: id</code>，<code>name = stringValue ?: id</code>（<code>CwtSystemScopeConfigResolverImpl</code>）。</li><li>相等性以 <code>id</code> 比较（同 <code>id</code> 视为同一系统作用域）。</li></ul></li><li><p><strong>与其他规则协作</strong>：</p><ul><li>与 <code>作用域与作用域组</code> 一起决定作用域检查与提示。</li><li>在部分扩展规则中可使用选项 <code>replace_scopes</code> 指定当前上下文下系统作用域对应的具体作用域类型（如将 <code>this/root/from</code> 映射为 <code>country</code> 等）。</li><li>注意：<code>replace_scopes</code> 不支持替换 <code>prev</code> 系列系统作用域（<code>prev/prevprev/...</code>），详见 <code>docs/zh/config.md</code> 中“如何在规则文件中指定作用域上下文”的说明。</li></ul></li></ul><p><strong>示例（内置）</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">system_scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    This</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Root</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Prev</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">base_id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Prev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    From</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">base_id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> From</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 省略 PrevPrev/FromFrom 等链式成员</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-inline" tabindex="-1"><a class="header-anchor" href="#config-inline"><span>内联规则</span></a></h4><ul><li><p><strong>用途</strong>：在规则中声明可复用的“内联逻辑”使用处结构，目前用于“内联脚本（inline script）”。</p></li><li><p><strong>路径定位</strong>：<code>inline[{name}]</code>，<code>{name}</code> 为规则名称。</p></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>解析名称：从键名中提取 <code>inline[...]</code> 的名称（<code>CwtInlineConfigResolverImpl</code>）。</li><li>展开为普通属性：调用 <code>CwtInlineConfig.inline()</code> 使用 <code>deepCopyConfigs</code> 复制其子规则，生成可被后续流程直接消费的 <code>CwtPropertyConfig</code>。</li></ul></li><li><p><strong>与其他规则协作</strong>：</p><ul><li>展开后的规则与普通属性规则一致，参与校验与补全。</li><li>若需为“内联脚本路径”提供上下文与多态配置，请参考扩展规则：<code>内联脚本（扩展）</code>。</li></ul></li></ul><p><strong>示例</strong>（Stellaris）：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">### 使用内联脚本</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">inline[inline_script]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filepath[common/inline_scripts/,.txt]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">### 带参数的内联脚本</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">### 参数接受字符串，可通过引号包裹以替换进一整段语句</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">inline[inline_script]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## cardinality = 1..1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    script</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filepath[common/inline_scripts/,.txt]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## cardinality = 0..inf</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    $parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $parameter_value</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-type" tabindex="-1"><a class="header-anchor" href="#config-type"><span>类型与子类型</span></a></h4><ul><li><p><strong>用途</strong>：按“文件路径/键名”定位并命名“定义”，并可声明子类型、展示信息与图片。</p></li><li><p><strong>路径定位</strong>：</p><ul><li>类型：<code>types/type[{type}]</code>，<code>{type}</code> 为定义类型名。</li><li>子类型：<code>types/type[{type}]/subtype[{subtype}]</code>。</li></ul></li><li><p><strong>文件匹配与来源</strong>：</p><ul><li><code>path</code>/<code>path_file</code>/<code>path_extension</code>/<code>path_pattern</code>/<code>path_strict</code> 组合决定参与扫描的文件集合。</li><li>路径会移除前缀 <code>game/</code> 并规范化分隔符；<code>path_extension</code> 不含点（例如 <code>.txt</code> → <code>txt</code>）。</li><li><code>type_per_file</code> 表示“一文件一类型实例”。</li></ul></li><li><p><strong>类型键（definition key）约束</strong>：</p><ul><li><code>type_key_prefix</code> 指定键前缀；并提供对应的原始值规则（<code>typeKeyPrefixConfig</code>）用于渲染与提示。</li><li><code>type_key_filter</code>/<code>type_key_regex</code>/<code>starts_with</code> 用于约束“类型键”的取值；<code>skip_root_key</code> 允许跳过若干顶级键以继续匹配（忽略大小写，支持多组）。</li><li><code>possibleTypeKeys</code> 基于类型与子类型的 filter 汇总，便于补全与校验。</li></ul></li><li><p><strong>名称与唯一性</strong>：</p><ul><li><code>name_field</code> 指定展示名称来源字段；<code>name_from_file</code> 表示从文件名推导名称；<code>unique</code> 用于冲突检查/导航提示；<code>severity</code> 用于标注展示严重级别。</li></ul></li><li><p><strong>子类型（Subtype）</strong>：</p><ul><li>选项：<code>type_key_filter</code>、<code>type_key_regex</code>、<code>starts_with</code>、<code>only_if_not</code>、<code>group</code>。</li><li>匹配时按声明顺序裁剪；通常与声明规则中的 <code>subtype[...]</code> 一起使用以细化结构与校验。</li></ul></li><li><p><strong>展示</strong>：</p><ul><li><code>localisation</code>/<code>images</code> 小节用于类型的本地化展示与图片展示设置。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ol><li>解析 <code>type[...]</code> 名称与必要属性；缺失属性将跳过该类型（<code>CwtTypeConfigResolverImpl</code>）。</li><li>收集文件来源与键约束、构造子类型映射、解析展示相关配置。</li><li>合并 <code>modifiers</code>：若在类型规则内声明 <code>modifiers</code>，将派生对应的修正规则并写入 <code>configGroup.modifiers</code> 与 <code>type2ModifiersMap</code>（按 <code>type</code> 或 <code>type.subtype</code> 归档）。</li><li>计算 <code>possibleTypeKeys</code>，并在需要时为 <code>type_key_prefix</code> 绑定标签类型（<code>CwtTagType.TypeKeyPrefix</code>）。</li></ol></li><li><p><strong>与其他规则协作</strong>：</p><ul><li>与 <code>声明</code> 协作，用于为具体定义的声明提供上下文与结构约束。</li><li>与 <code>修正/修正分类</code> 协作，通过 <code>modifiers</code> 派生与类型强相关的修正规则。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">types</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    type[civic_or_origin]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 文件来源</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;game/common/governments/civics&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 将自动去掉前缀 \`game/\`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        path_extension</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 键约束与前缀</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type_key_prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> civic_</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## type_key_filter = { +civic_ -origin_ }  # 包含/排除集合</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## starts_with = civic_</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## skip_root_key = { potential }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 子类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        subtype[origin]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            ## type_key_filter = +origin_</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            ## group = lifecycle</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 展示</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        localisation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name_field</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        images</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> icon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>缺少任何必需属性会导致类型被跳过（日志中将有提示）。</li><li><code>path</code> 与 <code>path_pattern</code> 可并用；<code>path_strict</code> 会强制严格匹配。</li><li><code>skip_root_key</code> 为多组设置：若存在任意一组与文件顶级键序列匹配，则允许跳过继续匹配类型键。</li><li>子类型匹配“顺序敏感”，请将更具体的规则放在更前面。</li></ul><h4 id="config-alias" tabindex="-1"><a class="header-anchor" href="#config-alias"><span>别名与单别名</span></a></h4><ul><li><p><strong>用途</strong>：将可复用的规则片段抽象成“具名别名”，在多处引用并展开；单别名用于“值侧”一对一复用。</p></li><li><p><strong>路径定位</strong>：</p><ul><li>别名：<code>alias[{name}:{subName}]</code>（<code>{subName}</code> 为受限的数据表达式）。</li><li>单别名：<code>single_alias[{name}]</code>。</li></ul></li><li><p><strong>语法与引用</strong>：</p><ul><li>声明别名：<code>alias[effect:some_effect] = { ... }</code></li><li>使用别名：在使用处编写 <code>alias_name[effect] = alias_match_left[effect]</code></li><li>声明单别名：<code>single_alias[trigger_clause] = { alias_name[trigger] = alias_match_left[trigger] }</code></li><li>使用单别名：<code>potential = single_alias_right[trigger_clause]</code></li></ul></li><li><p><strong>选项语义（别名）</strong>：</p><ul><li><code>scope/scopes</code>：允许的输入作用域集合（<code>supportedScopes</code>）。</li><li><code>push_scope</code>：输出作用域（<code>outputScope</code>）。</li><li><code>subName</code> 支持受限的数据表达式，并被解析为 <code>subNameExpression</code>，同时作为 <code>configExpression</code> 用于匹配与提示。</li></ul></li><li><p><strong>解析与展开流程（实现摘要）</strong>：</p><ul><li>解析键名获得 <code>name</code>/<code>subName</code>（<code>CwtAliasConfigResolverImpl</code>）。</li><li>在使用处展开：<code>CwtConfigManipulator.inlineAlias</code> 将别名体复制为普通属性规则： <ul><li>展开后键名=子名（<code>key = subName</code>），值/子规则深拷贝，保留选项。</li><li>若展开结果的 RHS 是 <code>single_alias_right[...]</code>，会继续触发单别名的内联展开（级联展开）。</li><li>展开后参与注入（<code>CwtInjectedConfigProvider.injectConfigs</code>）与父指针回填，随后进入常规校验/补全流程。</li></ul></li><li>单别名在值侧展开：<code>CwtConfigManipulator.inlineSingleAlias</code> 将对应声明整体替换到使用处的值与子块内。</li></ul></li><li><p><strong>与其他规则协作</strong>：</p><ul><li>常与“声明”规则结合，在定义声明中复用 trigger/effect 等片段。</li><li>与“类型与子类型”协作，作为修正规则或上下文约束的一部分。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 别名：定义 effect 片段</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alias[effect:apply_bonus]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    add_modifier</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        modifier</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enum[modifier_rule]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        days</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在脚本处使用别名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scripted_effect</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    alias_name[effect]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias_match_left[effect]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 单别名：定义触发块片段</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">single_alias[trigger_clause]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    alias_name[trigger]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias_match_left[trigger]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在声明中值侧使用单别名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_definition</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## cardinality = 0..1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    potential</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>别名唯一键由 <code>name:subName</code> 组成；重复定义将按“覆盖方式/优先级”处理。</li><li>展开后才会进行基数与选项校验；请在展开位置而非声明处考虑最终语义。</li><li><code>subName</code> 为数据表达式（受限），可使用模板/枚举等提高复用度，但请避免过宽导致误匹配。</li></ul><h4 id="config-enum" tabindex="-1"><a class="header-anchor" href="#config-enum"><span>枚举与复杂枚举</span></a></h4><ul><li><p><strong>用途</strong>：为数据表达式 <code>enum[...]</code> 提供取值集合。</p><ul><li>简单枚举：固定值集合，全部在规则文件中声明。</li><li>复杂枚举：从脚本文件按路径/锚点动态收集枚举值。</li></ul></li><li><p><strong>路径定位</strong>：</p><ul><li>简单枚举：<code>enums/enum[{name}]</code></li><li>复杂枚举：<code>enums/complex_enum[{name}]</code></li></ul></li></ul><hr><p><strong>简单枚举（Enum）</strong>：</p><p>字段与实现：</p><ul><li><code>name</code>：枚举名。</li><li><code>values</code>：可选项集合（忽略大小写）。</li><li><code>valueConfigMap</code>：可选项到其值规则的映射，用于渲染与提示。</li><li>当前实现仅支持“常量值”，不支持模板表达式。</li></ul><p>声明：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enums</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    enum[weight_or_base]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">weight</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>复杂枚举（Complex Enum）</strong>：</p><p>字段与实现（<code>CwtComplexEnumConfigResolverImpl</code>）：</p><ul><li>文件来源：<code>path</code>/<code>path_file</code>/<code>path_extension</code>/<code>path_pattern</code>/<code>path_strict</code>（路径会移除前缀 <code>game/</code>，扩展名不含点）。</li><li><code>start_from_root</code>：是否从文件顶部（而非顶级属性）开始查询锚点。</li><li><code>search_scope_type</code>（PLS 扩展）：查询作用域类型（目前仅支持 <code>definition</code>）。</li><li><code>name</code> 小节：描述如何在匹配文件中定位值锚点；实现会收集其中所有名为 <code>enum_name</code> 的属性或值作为锚点（<code>enumNameConfigs</code>）。</li></ul><p><strong>解析流程（简要）</strong>：</p><ol><li>简单枚举：解析 <code>enum[...]</code> 与其值列表，构建忽略大小写的值集合与映射（<code>CwtEnumConfigResolverImpl</code>）。</li><li>复杂枚举：解析文件来源、<code>name</code> 小节与锚点；索引阶段在匹配文件中收集锚点对应的实际值（<code>enum_name</code>）。</li><li>两者均服务于数据表达式 <code>enum[...]</code> 的补全与校验。</li></ol><p>声明（示例）：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enums</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    complex_enum[component_tag]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;game/common/component_tags&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            enum_name</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        start_from_root</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> yes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>简单枚举当前仅支持常量值；若填写模板表达式，将不会被按模板解析。</li><li>复杂枚举若缺少 <code>name</code> 小节或未能在匹配文件中找到任何 <code>enum_name</code> 锚点，将导致该枚举为空。</li><li>路径字段支持组合使用；<code>path_strict</code> 会启用严格匹配；<code>path_extension</code> 请勿包含前导点（应写作 <code>txt</code>）。</li></ul><h4 id="config-dynamic-value" tabindex="-1"><a class="header-anchor" href="#config-dynamic-value"><span>动态值类型</span></a></h4><ul><li><p><strong>用途</strong>：为数据表达式 <code>value[...]</code> 提供“预定义（硬编码）”的动态值集合，替代固定字面量，便于补全与校验。</p></li><li><p><strong>路径定位</strong>：<code>values/value[{name}]</code>，<code>{name}</code> 为动态值类型名。</p></li><li><p><strong>字段与限制</strong>：</p><ul><li><code>name</code>：动态值类型名。</li><li><code>values</code>：值集合（忽略大小写）。</li><li><code>valueConfigMap</code>：值到对应值规则的映射。</li><li>当前实现仅支持“常量值”，不支持模板表达式。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>解析 <code>value[...]</code> 名称与值列表，构建忽略大小写的值集合与映射（<code>CwtDynamicValueTypeConfigResolverImpl</code>）。</li><li>供数据表达式 <code>value[...]</code> 在补全与校验阶段使用。</li></ul></li><li><p><strong>与扩展规则的关系</strong>：</p><ul><li>若需为动态值声明“作用域上下文”（如仅接收 push scope）或按上下文动态生成值，请参考“扩展规则”中的“动态值（扩展）”。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    value[event_target]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">owner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> capital</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 忽略大小写</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-link" tabindex="-1"><a class="header-anchor" href="#config-link"><span>链接</span></a></h4><ul><li><p><strong>用途</strong>：为复杂表达式中的“字段/函数样”节点提供语义与类型（作用域/值）约束，支撑链式访问与补全检查。</p></li><li><p><strong>路径定位</strong>：</p><ul><li>常规链接：<code>links/{name}</code></li><li>本地化链接：<code>localisation_links/{name}</code>（若未显式声明，会自动复制静态的常规链接）</li></ul></li><li><p><strong>静态 vs 动态</strong>：</p><ul><li>静态链接：未声明 <code>data_source</code>，仅代表一个固定的节点名（如 <code>owner</code>）。</li><li>动态链接：声明了 <code>data_source</code> 与/或 <code>prefix</code>/<code>from_*</code>，可携带动态数据（如 <code>modifier:x</code>、<code>relations(x)</code>、<code>var:x</code>）。</li></ul></li><li><p><strong>字段与语义（实现）</strong>：</p><ul><li><code>type</code>：<code>scope</code>/<code>value</code>/<code>both</code>（默认 <code>scope</code>）。</li><li><code>from_data</code>：是否从“文本数据”读取动态数据（格式如 <code>prefix:data</code>）。</li><li><code>from_argument</code>：是否从“函数参数”读取动态数据（格式如 <code>func(arg)</code>）。</li><li><code>prefix</code>：动态链接的前缀；当 <code>from_argument = yes</code> 时，解析会移除尾随冒号（避免 <code>prefix:</code> 重复）。</li><li><code>data_source</code>（可多值）：每个数据源是一个“数据表达式”，用于约束动态数据的合法取值，支持多传参场景。</li><li><code>input_scopes</code>：输入作用域集合；可写单个或集合，解析器同时支持 <code>input_scope</code> 与 <code>input_scopes</code> 两种写法。</li><li><code>output_scope</code>：输出作用域；为空时表示“透传/基于数据源推导”。</li><li><code>for_definition_type</code>：仅在指定定义类型中可用。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>读取字段并标准化：作用域 ID 通过 <code>ParadoxScopeManager.getScopeId()</code> 归一化；</li><li>校验：当 <code>from_data</code> 或 <code>from_argument</code> 为 <code>yes</code> 时必须存在至少一个 <code>data_source</code>；</li><li>生成数据表达式：为每个 <code>data_source</code> 解析出 <code>CwtDataExpression</code>，支持多参数（可用委托 <code>delegatedWith(index)</code> 指定当前参数）。</li><li>本地化链接：可从常规链接复制（静态），也可单独解析。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">links</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 静态 scope 链接</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    owner</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        input_scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        output_scope</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> any</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 动态 value 链接（带前缀）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    modifier</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> value</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        from_data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> yes</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> modifier</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        data_source</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dynamic_value[test_flag]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        input_scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 动态 scope 链接（函数形）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    relations</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        from_argument</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> yes</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        data_source</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;country&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           # 可混用多个数据源</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        data_source</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dynamic_value[test_flag]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        input_scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">country</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # output_scope 为空 -&gt; 基于数据源与实现推导</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>prefix</code> 不应带引号或括号；<code>input_scopes</code> 使用花括号集合语法（如 <code>{ country }</code>）。</li><li>可混合多个 <code>data_source</code>；对多参链接可使用 <code>delegatedWith(index)</code> 切换当前参数的表达式。</li><li>若动态链接参数为单引号字面量，则按字面量处理，通常不提供补全。</li><li>建议在 <code>data_source</code> 中使用 <code>&lt;type&gt;</code> 简写（如 <code>&lt;country&gt;</code>），而非 <code>definition[country]</code>。</li></ul><h4 id="config-scope" tabindex="-1"><a class="header-anchor" href="#config-scope"><span>作用域与作用域组</span></a></h4><ul><li><p><strong>用途</strong>：定义“作用域类型”及其别名（<code>scopes</code>），并对作用域进行分组（<code>scope_groups</code>），用于作用域检查、链路约束与提示。</p></li><li><p><strong>路径定位与字段</strong>：</p><ul><li>作用域：<code>scopes/{name}</code><ul><li><code>name</code>：作用域 ID。</li><li><code>aliases: string[]</code>：别名集合（忽略大小写）。</li></ul></li><li>作用域组：<code>scope_groups/{name}</code><ul><li><code>name</code>：分组名。</li><li><code>: string[]</code>：分组内作用域 ID 集合（忽略大小写）。</li></ul></li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Country</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">aliases</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">country</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope_groups</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    target_species</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        country</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pop_group</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> leader</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> planet</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ship</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fleet</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> army</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> species</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> first_contact</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>与其他规则协作</strong>：</p><ul><li>与“系统作用域”共同决定作用域栈与含义；与“链接”共同约束链式访问的输入/输出作用域。</li><li>在扩展规则中可通过 <code>replace_scopes</code> 指定在特定上下文下系统作用域映射到的具体作用域类型。</li></ul><h4 id="config-modifier" tabindex="-1"><a class="header-anchor" href="#config-modifier"><span>修正与修正分类</span></a></h4><ul><li><p><strong>用途</strong>：声明修正（modifier）与其分类，用于图标渲染、补全与作用域校验。</p></li><li><p><strong>路径定位</strong>：</p><ul><li>修正： <ul><li><code>modifiers/{name}</code>（<code>{name}</code> 可为常量或模板表达式）</li><li><code>types/type[{type}]/modifiers/{name}</code>（其中 <code>$</code> 会被替换为 <code>&lt;{type}&gt;</code>）</li><li><code>types/type[{type}]/modifiers/subtype[{subtype}]/{name}</code>（<code>{type}.{subtype}</code> 作为类型表达式参与替换）</li></ul></li><li>修正分类：<code>modifier_categories/{name}</code></li></ul></li><li><p><strong>字段与语义（修正）</strong>：</p><ul><li><code>name</code>：模板化名称（如 <code>job_&lt;job&gt;_add</code>），支持匹配动态生成的修正。</li><li><code>categories: string | string[]</code>：分类名集合；决定允许的作用域类型。</li><li><code>supportedScopes</code>：允许的作用域集合。 <ul><li>若已解析出 <code>categoryConfigMap</code>，则基于类别汇总作用域（<code>ParadoxScopeManager.getSupportedScopes(...)</code>）。</li><li>否则回退到修正自身的选项 <code>supported_scopes</code>（若存在）。</li></ul></li></ul></li><li><p><strong>字段与语义（修正分类）</strong>：</p><ul><li><code>name</code>：分类名（如 <code>Pops</code>）。</li><li><code>supported_scopes: string | string[]</code>：该分类允许的作用域集合。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>修正（<code>CwtModifierConfigResolverImpl</code>）： <ol><li>从值或值列表解析 <code>categories</code>；缺失则跳过该条目。</li><li>若来自类型规则的 <code>modifiers</code>，将 <code>name</code> 中的 <code>$</code> 替换为 <code>&lt;{typeExpression}&gt;</code>，其中 <code>typeExpression</code> 为 <code>type</code> 或 <code>type.subtype</code>。</li><li>解析模板表达式并计算 <code>supportedScopes</code>（基于类别或本地选项）。</li></ol></li><li>修正分类（<code>CwtModifierCategoryConfigResolverImpl</code>）： <ol><li>解析 <code>name</code> 与 <code>supported_scopes</code>。</li></ol></li></ul></li><li><p><strong>与其他规则协作</strong>：</p><ul><li>与“类型与子类型”的 <code>modifiers</code> 小节联动，派生出与类型绑定的修正规则。</li><li>与“作用域/链接/系统作用域”联动进行作用域检查与提示。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 独立声明修正</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">modifiers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    pop_happiness</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Pops</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    job_&lt;job&gt;_add</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Planets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在类型规则中声明修正（会派生为模板名称）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">types</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    type[job]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        modifiers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            job_$_add</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Planets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -&gt; job_&lt;job&gt;_add</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修正分类</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">modifier_categories</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Pops</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">supported_scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">species</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pop_group</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> planet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>修正条目缺少 <code>categories</code> 会被跳过（不生效）。</li><li>类型规则中的修正名称使用 <code>$</code> 占位，请确保与类型/子类型表达式对应。</li><li>类别中的 <code>supported_scopes</code> 应使用标准作用域 ID，解析时会自动归一化大小写。</li></ul><h4 id="config-localisation" tabindex="-1"><a class="header-anchor" href="#config-localisation"><span>本地化命令与提升</span></a></h4><ul><li><p><strong>用途</strong>：声明“本地化命令字段”（Get...）的可用性与允许作用域，并声明“本地化作用域提升”规则，支持在本地化链接切换作用域后仍能使用命令字段。</p></li><li><p><strong>路径定位</strong>：</p><ul><li>本地化命令：<code>localisation_commands/{name}</code>（<code>{name}</code> 忽略大小写）</li><li>本地化提升：<code>localisation_promotions/{name}</code>（<code>{name}</code> 忽略大小写，对应本地化链接名）</li></ul></li><li><p><strong>字段与语义</strong>：</p><ul><li>命令：<code>supported_scopes: string | string[]</code>（允许的作用域类型集合）</li><li>提升：<code>supported_scopes: string | string[]</code>（提升后的允许作用域集合）</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>命令（<code>CwtLocalisationCommandConfigResolverImpl</code>）：解析名称（忽略大小写）与 <code>supported_scopes</code>。</li><li>提升（<code>CwtLocalisationPromotionConfigResolverImpl</code>）：解析名称（忽略大小写，匹配本地化链接名）与 <code>supported_scopes</code>。</li><li>在本地化文本中，若通过本地化链接切换了作用域，则按“提升规则”确认可以使用的命令字段集合。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localisation_commands</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    GetCountryType</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">country</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localisation_promotions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Ruler</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">country</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localisation_links</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ruler</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 本地化文本中：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [Ruler.GetCountryType] 在 Ruler 链接后的作用域提升下有效</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>名称大小写不敏感；请保持与实际使用的命令字段一致的拼写风格以便检索。</li><li>提升规则的名称应与本地化链接名一致；否则无法正确匹配。</li><li>与“链接（本地化链接）”协作时，静态常规链接会自动复制为本地化链接；如需动态行为，请单独声明本地化链接。</li></ul><h4 id="config-type-presentation" tabindex="-1"><a class="header-anchor" href="#config-type-presentation"><span>类型展示（本地化/图片）</span></a></h4><ul><li><p><strong>用途</strong>：为某定义类型配置“名称/描述/必需本地化键”“主要图片/切分规则”等，以便在 UI、导航与提示中展示。</p></li><li><p><strong>路径定位</strong>：</p><ul><li>本地化：<code>types/type[{type}]/localisation</code></li><li>图片：<code>types/type[{type}]/images</code></li></ul></li><li><p><strong>字段与语义</strong>：</p><ul><li>二者结构一致：由若干“子类型表达式 + 位置规则”的配对组成（<code>locationConfigs</code>）。</li><li>在运行时根据实际“定义的子类型集合”过滤并合并得到最终的规则列表（<code>getConfigs(subtypes)</code>）。</li><li>位置规则参见“位置与行匹配”的 <code>CwtLocationConfig</code>，常用选项： <ul><li><code>required</code>：是否必需项（缺失时报错/提示）。</li><li><code>primary</code>：是否主要项（例如用于主展示图标/主名称）。</li></ul></li><li>位置表达式参见“规则表达式 → 位置表达式”。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">types</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    type[ship_design]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        localisation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            ## primary</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> some_loc_key</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            subtype[corvette]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> some_corvette_loc_key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        images</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            ## primary ## required</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            icon</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;icon|icon_frame&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 图片位置表达式，支持帧数与名称路径参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-db-type" tabindex="-1"><a class="header-anchor" href="#config-db-type"><span>数据库对象类型</span></a></h4><ul><li><p><strong>用途</strong>：为本地化中的“数据库对象表达式”（如 <code>[&#39;civic:some_civic&#39;, ...]</code>）定义类型与格式，支持在 UI 与提示中解析为定义或本地化。</p></li><li><p><strong>路径定位</strong>：<code>database_object_types/{name}</code>，<code>{name}</code> 为前缀（如 <code>civic</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>type</code>：若存在，将 <code>prefix:object</code> 的 <code>object</code> 作为该类型的“定义引用”。</li><li><code>swap_type</code>：若存在，将 <code>prefix:object:swap</code> 的 <code>swap</code> 作为该“切换类型”的定义引用。</li><li><code>localisation</code>：若存在，将 <code>prefix:object</code> 的 <code>object</code> 作为“本地化键”解析。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">database_object_types</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    civic</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> civic_or_origin</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        swap_type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> swapped_civic</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-location-row" tabindex="-1"><a class="header-anchor" href="#config-location-row"><span>位置与行匹配</span></a></h4><ul><li><p><strong>用途</strong>：</p><ul><li><code>位置规则（Location）</code>：声明图片/本地化等资源的定位键与位置表达式。</li><li><code>行规则（Row）</code>：为 CSV 行声明列名与取值形态，用于补全/检查。</li></ul></li><li><p><strong>位置规则（CwtLocationConfig）</strong>：</p><ul><li>适用位置：<code>types/type[{type}]/localisation/{key}</code> 与 <code>types/type[{type}]/images/{key}</code>。</li><li>字段：<code>key</code>（资源名）、<code>value</code>（位置表达式字符串）、<code>required</code>、<code>primary</code>。</li><li>位置表达式详见“规则表达式 → 位置表达式”。</li></ul></li><li><p><strong>行规则（CwtRowConfig）</strong>：</p><ul><li>路径定位：<code>rows/row[{name}]</code>。</li><li>继承文件匹配能力（与类型类似）：<code>path</code>/<code>path_file</code>/<code>path_extension</code>/<code>path_pattern</code>/<code>path_strict</code>。</li><li>字段：<code>columns</code>（列名→列规则），<code>end_column</code>（终止列名，匹配到后视为可省略的尾列）。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rows</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    row[component_template]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;game/common/component_templates&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        file_extension</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .csv</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        columns</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;component_template&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # ... 其他列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-locale" tabindex="-1"><a class="header-anchor" href="#config-locale"><span>语言环境</span></a></h4><ul><li><p><strong>用途</strong>：声明语言环境（locale）的基本信息，便于识别项目/用户偏好的语言环境，改进 UI 展示与本地化校验。</p></li><li><p><strong>路径定位</strong>：<code>locales/{id}</code>，<code>{id}</code> 如 <code>l_english</code>。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>id</code>：语言环境 ID。</li><li><code>codes: string[]</code>：该语言环境包含的语言代码（如 <code>en</code>, <code>en-US</code>）。</li><li>派生字段：<code>shortId</code>（去除前缀 <code>l_</code>）、<code>idWithText</code>（带展示文本）。</li><li>解析器额外能力：可按 IDE/OS 自动解析或提供 fallback（内部使用）。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">locales</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    l_english</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">codes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;en&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    l_simp_chinese</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">codes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zh-CN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configs-extended" tabindex="-1"><a class="header-anchor" href="#configs-extended"><span>扩展规则</span></a></h3><blockquote><p>PLS 扩展的规则家族，用于增强 IDE 功能（快速文档、内嵌提示、补全等）。</p></blockquote><h4 id="config-extended-scripted-variable" tabindex="-1"><a class="header-anchor" href="#config-extended-scripted-variable"><span>封装变量（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为脚本中的“封装变量（scripted variable）”提供额外提示（快速文档、内嵌提示等）。</p></li><li><p><strong>路径定位</strong>：<code>scripted_variables/{name}</code>。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>name</code>：变量名或其匹配模式。</li><li><code>hint: string?</code>：可选的额外提示文本（用于内嵌提示或文档）。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedScriptedVariableConfigResolverImpl</code>）。</li><li>选项提取：从 <code>hint</code> 选项读取提示文本（若存在）。</li><li>应用场景：与实际脚本中的封装变量引用按名称/模式匹配，向 UI 注入文档与提示。</li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scripted_variables</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scripted_variables</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## hint = §RSome hint text§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 或写作 \`x = 1\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>名称可使用模板/ANT/正则匹配，避免过宽导致误匹配。</li><li>本条目仅提供“提示增强”，不负责声明或校验封装变量的取值与类型。</li></ul><h4 id="config-extended-definition" tabindex="-1"><a class="header-anchor" href="#config-extended-definition"><span>定义（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为具体“定义”提供额外上下文与提示信息。</p><ul><li>用途包括：文档/提示（<code>hint</code>）、绑定定义类型（<code>type</code> 必填）、按需要指定作用域上下文（通过选项 <code>replace_scopes</code>/<code>push_scope</code>）。</li></ul></li><li><p><strong>路径定位</strong>：<code>definitions/{name}</code>。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>name</code>：定义名或其匹配模式。</li><li><code>type: string</code>（必填）：该扩展项对应的“定义类型”。缺失则忽略本条目。</li><li><code>hint: string?</code>：可选提示文本（用于快速文档/内嵌提示）。</li><li>作用域上下文（选项）： <ul><li><code>replace_scopes</code>：重写系统作用域映射，如 <code>{ this = country root = country }</code>。</li><li><code>push_scope</code>：声明输出作用域，供链路/检查参考。</li></ul></li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedDefinitionConfigResolverImpl</code>）。</li><li>必填项校验：<code>type</code> 缺失会跳过该条目并记录警告日志。</li><li>选项提取：从 <code>hint</code> 读取提示文本；<code>replace_scopes</code>/<code>push_scope</code> 由通用选项解析器提供，供后续上下文使用。</li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">definitions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## type = civic_or_origin.civic</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## type = scripted_trigger</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">definitions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## hint = §RSome hint text§!</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## type = scripted_trigger</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 或写作 \`x = ...\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>type</code> 为必填；缺失将被跳过（不会生效）。</li><li>名称可使用模板/ANT/正则匹配，避免过宽导致误匹配。</li><li>此扩展用于“提示与上下文增强”，并不直接改变“声明”的结构；与声明的协作发生在使用侧的上下文构建与检查/文档阶段。</li></ul><h4 id="config-extended-game-rule" tabindex="-1"><a class="header-anchor" href="#config-extended-game-rule"><span>游戏规则（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为“游戏规则（game rule）”（类型为 <code>game_rule</code> 的定义）提供文档/提示增强，并可“重载声明规则”。</p></li><li><p><strong>路径定位</strong>：<code>game_rules/{name}</code>。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>name</code>：游戏规则名或其匹配模式。</li><li><code>hint: string?</code>：可选提示文本（用于快速文档/内嵌提示）。</li><li><code>configForDeclaration: CwtPropertyConfig?</code>：若当前条目是“属性节点”，其值/子块将作为“声明规则重载”在使用处生效；值内若为 <code>single_alias_right[...]</code> 将被内联展开。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedGameRuleConfigResolverImpl</code>）。</li><li><code>configForDeclaration</code>：当且仅当为属性节点时有效；对其值调用 <code>inlineSingleAlias(...)</code>，否则使用原值。</li><li>使用侧协作：<code>GameRuleCwtDeclarationConfigContextProvider</code> 在构建声明上下文时，若命中该扩展并且其 <code>config</code> 含子规则，则以 <code>configForDeclaration</code> 重载“声明”规则。</li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">game_rules</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # use &#39;x = xxx&#39; to override declaration config</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">game_rules</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## hint = §RSome hint text§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 仅提供提示增强</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    y</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 通过单别名重载声明规则</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>仅当为“属性节点”时才会产生 <code>configForDeclaration</code> 并参与重载；纯值节点不会重载声明。</li><li>若值为 <code>single_alias_right[...]</code>，会先被内联，再作为重载规则生效。</li><li>该扩展仅影响“声明规则的来源/结构”与“提示信息”，不改变整体优先级与覆盖方式。</li></ul><h4 id="config-extended-on-action" tabindex="-1"><a class="header-anchor" href="#config-extended-on-action"><span>On Actions（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为具体的 <code>on_action</code> 定义提供文档/提示增强，并指定“事件类型”以影响声明上下文中与事件有关的引用。</p></li><li><p><strong>路径定位</strong>：<code>on_actions/{name}</code>。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>name</code>：on_action 名称或其匹配模式。</li><li><code>event_type: string</code>（必填）：事件类型。用于在声明上下文中将与事件相关的数据表达式（例如 <code>&lt;event&gt;</code>）替换为该事件类型对应的表达式。</li><li><code>hint: string?</code>：可选提示文本（用于快速文档/内嵌提示）。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedOnActionConfigResolverImpl</code>）。</li><li>必填项校验：缺少 <code>event_type</code> 将跳过该条目并记录警告日志。</li><li>使用侧协作：<code>OnActionCwtDeclarationConfigContextProvider</code> 命中该扩展后，将把声明上下文中的事件占位替换为指定事件类型，以驱动补全/校验与快速文档。</li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">on_actions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## event_type = country</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">on_actions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ## hint = §RSome hint text§!</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ## event_type = country</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>event_type</code> 为必填；缺失将被跳过（不会生效）。</li><li>名称可使用模板/ANT/正则匹配，避免过宽导致误匹配。</li><li>如需作用域替换，可结合通用选项（例如 <code>replace_scopes</code>）使用，但其是否参与具体检查取决于使用侧上下文与特性实现。</li></ul><h4 id="config-extended-inline-script" tabindex="-1"><a class="header-anchor" href="#config-extended-inline-script"><span>内联脚本（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为具体“内联脚本（inline script）”声明“上下文规则”和“作用域上下文”，用于在被调用处提供正确的补全/校验。</p></li><li><p><strong>路径定位</strong>：<code>inline_scripts/{name}</code>。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>文件对应</strong>：<code>name</code> 为 <code>x/y</code> 时，对应文件为 <code>common/inline_scripts/x/y.txt</code>。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>name</code>：内联脚本名或其匹配模式。</li><li><code>context_configs_type: string = single | multiple</code>（默认 <code>single</code>）：声明上下文规则的聚合形态。 <ul><li><code>single</code>：仅取值侧（<code>value</code>）作为上下文规则。</li><li><code>multiple</code>：取子规则列表（<code>configs</code>）作为上下文规则。</li></ul></li><li>作用域上下文（选项）： <ul><li><code>replace_scopes</code>：重写系统作用域映射。</li><li><code>push_scope</code>：声明输出作用域。</li></ul></li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedInlineScriptConfigResolverImpl</code>）。</li><li>容器规则：若为属性节点，对其值先做 <code>inlineSingleAlias(...)</code>（支持根级单别名），得到“容器规则”（<code>getContainerConfig()</code>）。</li><li>上下文规则： <ul><li><code>context_configs_type = multiple</code> 时，取容器规则的子规则列表；否则取容器规则的值规则。</li><li>将上述内容用 <code>inlineWithConfigs(...)</code> 包装为一个可被消费的“上下文规则容器”（<code>getContextConfigs()</code> 返回单元素列表）。</li></ul></li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">inline_scripts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; is an inline script expression, e.g., for &#39;inline_script = jobs/researchers_add&#39;, &#39;x&#39; should be &#39;jobs/researchers_add&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # use &#39;x = xxx&#39; to declare context config(s) (add &#39;## context_configs_type = multiple&#39; if there are various context configs)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # note extended documentation is unavailable for inline scripts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # more detailed examples for declaring context config(s)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## cardinality = 0..1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        potential</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## cardinality = 0..1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        possible</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.6, using single alias at root level is also available here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">inline_scripts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    triggers/some_trigger_snippet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    triggers/some_trigger_snippet</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    triggers/some_trigger_snippet</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+s+`" alt=""></p><p><strong>注意事项</strong>：</p><ul><li>若仅需单条上下文规则，保持默认 <code>single</code> 即可；需要声明多条时使用 <code>multiple</code>。</li><li>根级 <code>single_alias_right[...]</code> 会被内联展开后再作为上下文规则使用。</li><li>本扩展仅提供上下文与作用域信息，不直接约束内联脚本的调用位置与次数。</li></ul><h4 id="config-extended-parameter" tabindex="-1"><a class="header-anchor" href="#config-extended-parameter"><span>参数（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为触发/效应/内联脚本中的参数（<code>$PARAM$</code> 或 <code>$PARAM|DEFAULT$</code>）提供文档与上下文增强：</p><ul><li>绑定“上下文键”（指向具体触发/效应/内联脚本的上下文）。</li><li>声明上下文规则与作用域上下文。</li><li>支持从使用处“继承”上下文。</li></ul></li><li><p><strong>路径定位</strong>：<code>parameters/{name}</code>。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>name</code>：参数名或其匹配模式。</li><li><code>context_key: string</code>（必填）：上下文键（如 <code>scripted_trigger@X</code>），用于定位参数的上下文规则来源。</li><li><code>context_configs_type: string = single | multiple</code>（默认 <code>single</code>）：声明上下文规则的聚合形态。 <ul><li><code>single</code>：仅取值侧（<code>value</code>）作为上下文规则。</li><li><code>multiple</code>：取子规则列表（<code>configs</code>）作为上下文规则。</li></ul></li><li><code>inherit: boolean = no</code>：是否继承“使用处”的上下文（规则与作用域）。</li><li>作用域上下文（选项）： <ul><li><code>replace_scopes</code>：重写系统作用域映射。</li><li><code>push_scope</code>：声明输出作用域。</li></ul></li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedParameterConfigResolverImpl</code>）。</li><li>必填项校验：<code>context_key</code> 缺失将跳过该条目并记录警告日志。</li><li>容器规则：若为属性节点，对其值先做 <code>inlineSingleAlias(...)</code>，得到“容器规则”（<code>getContainerConfig(...)</code>）。</li><li>上下文规则： <ul><li>若 <code>inherit = yes</code>：从参数的“使用处”上溯到包含的脚本成员，取其解析得到的上下文规则列表（动态上下文）。</li><li>否则：按 <code>context_configs_type</code> 从容器规则提取 <code>value</code> 或 <code>configs</code>，并用 <code>inlineWithConfigs(...)</code> 包装成可消费的“上下文规则容器”（<code>getContextConfigs(...)</code> 返回单元素列表）。</li></ul></li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; is a parameter name, e.g., for &#39;$JOB$&#39;, &#39;x&#39; should be &#39;JOB&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # use &#39;x = xxx&#39; to declare context config(s) (add &#39;## context_configs_type = multiple&#39; if there are various context configs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # for value of option &#39;context_key&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # before &#39;@&#39; is the containing definition type (e.g., &#39;scripted_trigger&#39;), or &#39;inline_script&#39; for inline script parameters</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # after &#39;@&#39; is the containing definition name, or the containing inline script path</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.6, value of option &#39;context_key&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # more detailed examples for declaring context config(s)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localistion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        localisation</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        scalar</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.6, using single alias at root level is also available here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # since 1.3.12, a parameter&#39;s config context and scope context can be specified to inherit from its context</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # e.g. for parameter &#39;x&#39; with context key &#39;scripted_trigger@some_trigger&#39;, its context is scripted trigger &#39;some_trigger&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## inherit</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = some_trigger</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    PARAM</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = some_trigger</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    PARAM</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_configs_type = multiple</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## context_key = some_trigger</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    PARAM</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> single_alias_right[trigger_clause]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+n+`" alt=""></p><p><strong>注意事项</strong>：</p><ul><li><code>context_key</code> 为必填；缺失将被跳过（不会生效）。</li><li><code>inherit = yes</code> 时，上下文取自“使用处”，需注意其可为空或因位置不同而变化；PLS 会在该路径下开启“动态上下文”模式。</li><li>根级 <code>single_alias_right[...]</code> 会被内联展开后再作为上下文规则使用。</li></ul><h4 id="config-extended-complex-enum-value" tabindex="-1"><a class="header-anchor" href="#config-extended-complex-enum-value"><span>复杂枚举值（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为“复杂枚举（complex enum）”的具体条目提供文档/提示增强（快速文档、内嵌提示等）。</p></li><li><p><strong>路径定位</strong>：<code>complex_enum_values/{type}/{name}</code>，其中 <code>{type}</code> 为复杂枚举名，<code>{name}</code> 为条目名或匹配模式。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>type: string</code>：复杂枚举名（由路径段 <code>{type}</code> 提供）。</li><li><code>name</code>：条目名或其匹配模式（来自键或值）。</li><li><code>hint: string?</code>：可选提示文本。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedComplexEnumValueConfigResolverImpl</code>）。</li><li>类型来源：由上层遍历时提供（<code>resolve(config, type)</code>），对应路径中的 <code>{type}</code> 段。</li><li>选项提取：从 <code>hint</code> 读取提示文本。</li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">complex_enum_values</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    component_tag</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">complex_enum_values</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    component_tag</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## hint = §GUseful note§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        x</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 或写作 \`x = ...\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>本扩展不改变复杂枚举“值来源”的收集逻辑，仅提供提示信息。</li><li>名称可使用模板/ANT/正则匹配，但请避免过宽导致误匹配。</li></ul><h4 id="config-extended-dynamic-value" tabindex="-1"><a class="header-anchor" href="#config-extended-dynamic-value"><span>动态值（扩展）</span></a></h4><ul><li><p><strong>用途</strong>：为某种动态值类型下的具体“动态值”条目提供文档/提示增强。</p></li><li><p><strong>路径定位</strong>：<code>dynamic_values/{type}/{name}</code>，其中 <code>{type}</code> 为动态值类型，<code>{name}</code> 为条目名或匹配模式。</p></li><li><p><strong>名称匹配</strong>：支持常量、模板表达式、ANT 语法与正则（模式感知，见 <code>CwtDataTypeGroups.PatternAware</code>）。</p></li><li><p><strong>字段与语义</strong>：</p><ul><li><code>type: string</code>：动态值类型（由路径段 <code>{type}</code> 提供）。</li><li><code>name</code>：条目名或其匹配模式（来自键或值）。</li><li><code>hint: string?</code>：可选提示文本。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>名称来源：若为属性则取键名，否则取值（<code>CwtExtendedDynamicValueConfigResolverImpl</code>）。</li><li>类型来源：由上层遍历时提供（<code>resolve(config, type)</code>），对应路径中的 <code>{type}</code> 段。</li><li>选项提取：从 <code>hint</code> 读取提示文本。</li></ul></li></ul><p><strong>格式说明</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dynamic_values</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    event_target</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # since 1.3.9, scope context related options are also available here</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # only receive push scope (this scope), ignore others (like root scope, etc.)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## push_scope = country</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dynamic_values</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    event_target</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ### Some documentation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        ## hint = §RSome hint text§!</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        owner</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 或写作 \`owner = ...\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>本扩展不改变动态值类型与基础“值集合”的定义，仅提供提示信息。</li><li>名称可使用模板/ANT/正则匹配，但请避免过宽导致误匹配。</li></ul><h3 id="configs-internal" tabindex="-1"><a class="header-anchor" href="#configs-internal"><span>内部规则</span></a></h3><blockquote><p>由 PLS 内部使用，控制解析上下文或维护全局语义，不支持自定义。</p></blockquote><h4 id="config-internal-schema" tabindex="-1"><a class="header-anchor" href="#config-internal-schema"><span>架构（Schema）</span></a></h4><ul><li><p><strong>用途</strong>：为“规则文件（.cwt）本身”的右侧取值形态提供声明，用于基础级别的补全与（有限的）结构校验。</p><ul><li>目前以“初步补全”为主，暂不提供严格的 Schema 校验。</li></ul></li><li><p><strong>来源与加载</strong>：</p><ul><li>仅来源于内置文件：<code>internal/schema.cwt</code>（不可被外部文件覆盖）。</li><li>由 <code>FileBasedCwtConfigGroupDataProvider.processInternalFile()</code> 调用 <code>CwtSchemaConfig.resolveInFile(...)</code> 收集并注入到 <code>configGroup.schemas</code>。</li></ul></li><li><p><strong>结构（<code>CwtSchemaConfig</code>）</strong>：</p><ul><li><code>file: CwtFileConfig</code>：对应的规则文件。</li><li><code>properties: CwtPropertyConfig[]</code>：普通键（其键解析为“常量/类型/模板”形态）。</li><li><code>enums: Map&lt;String, CwtPropertyConfig&gt;</code>：键解析为“枚举表达式”（<code>$enum:NAME$</code>）。</li><li><code>constraints: Map&lt;String, CwtPropertyConfig&gt;</code>：键解析为“约束表达式”（<code>$$NAME</code>）。</li></ul></li></ul><p><strong>示例（仅示意，位于 <code>internal/schema.cwt</code>）</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$enum:my_enum$</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入 enums</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$$is_valid_key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入 constraints</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $any</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              # 进入 properties</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>与“规则表达式 → 架构（schema）表达式”协同工作，主要用于编辑器侧的提示与轻量级把关。</li></ul><h4 id="config-internal-folding" tabindex="-1"><a class="header-anchor" href="#config-internal-folding"><span>折叠设置（Folding Settings）</span></a></h4><ul><li><p><strong>用途</strong>：为编辑器提供额外的代码折叠规则（内部使用，目前尚不支持自定义）。</p></li><li><p><strong>来源与加载</strong>：</p><ul><li>仅来源于内置文件：<code>internal/folding_settings.cwt</code>。</li><li>由 <code>FileBasedCwtConfigGroupDataProvider.processInternalFile()</code> 调用 <code>CwtFoldingSettingsConfig.resolveInFile(...)</code> 收集并注入 <code>configGroup.foldingSettings[group]</code>。</li></ul></li><li><p><strong>结构（<code>CwtFoldingSettingsConfig</code>）</strong>：</p><ul><li><code>id: string</code>：折叠项 ID（组内唯一）。</li><li><code>key: string?</code>：目标键名（可选）。</li><li><code>keys: string[]?</code>：目标键名集合（可选）。</li><li><code>placeholder: string</code>：折叠后占位文本（必填）。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>以组为单位读取每个组下的条目（<code>group -&gt; id -&gt; { key/keys/placeholder }</code>）。</li><li>若缺少 <code>placeholder</code> 或无子属性，将跳过并记录警告。</li><li>每个组最终形成大小写不敏感的映射：<code>configGroup.foldingSettings[group][id]</code>。</li></ul></li></ul><p><strong>示例（仅示意，位于 <code>internal/folding_settings.cwt</code>）</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">folds</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    expression</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        fold_modifier</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;modifier&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            placeholder</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;modifier&gt; ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        fold_triggers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            keys</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;AND&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;OR&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            placeholder</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;triggers&gt; ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>key</code> 与 <code>keys</code> 可任选其一，<code>keys</code> 用于多键匹配；两者同时存在时由使用方决定取舍（目前实现会读取二者）。</li><li>最终行为由折叠构建器实现控制，参考 <code>ParadoxExpressionFoldingBuilder</code>。</li></ul><h4 id="config-internal-postfix" tabindex="-1"><a class="header-anchor" href="#config-internal-postfix"><span>后缀模板设置（Postfix Template Settings）</span></a></h4><ul><li><p><strong>用途</strong>：为编辑器提供额外的“后缀模板”能力（内部使用，目前尚不支持自定义）。</p></li><li><p><strong>来源与加载</strong>：</p><ul><li>仅来源于内置文件：<code>internal/postfix_template_settings.cwt</code>。</li><li>由 <code>FileBasedCwtConfigGroupDataProvider.processInternalFile()</code> 调用 <code>CwtPostfixTemplateSettingsConfig.resolveInFile(...)</code> 收集并注入 <code>configGroup.postfixTemplateSettings[group]</code>。</li></ul></li><li><p><strong>结构（<code>CwtPostfixTemplateSettingsConfig</code>）</strong>：</p><ul><li><code>id: string</code>：模板 ID（组内唯一）。</li><li><code>key: string</code>：触发键（必填），对应可应用后缀的位置关键字。</li><li><code>example: string?</code>：示例文本（可选），用于帮助理解模板用法。</li><li><code>variables: Map&lt;string, string&gt;</code>：变量名 → 默认值（用于可编辑模板变量）。</li><li><code>expression: string</code>：模板表达式（必填），由后缀模板实现解析与应用。</li></ul></li><li><p><strong>解析流程（实现摘要）</strong>：</p><ul><li>以组为单位读取：<code>group -&gt; id -&gt; { key/example/variables/expression }</code>。</li><li>必填项校验：缺少 <code>key</code> 或 <code>expression</code> 将跳过并记录警告。</li><li><code>variables</code> 读取为子属性映射：<code>name = defaultValue</code>。</li><li>每个组最终形成大小写不敏感的映射：<code>configGroup.postfixTemplateSettings[group][id]</code>。</li></ul></li></ul><p><strong>示例（仅示意，位于 <code>internal/postfix_template_settings.cwt</code>）</strong>：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">postfix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    variable_ops</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        decr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;variable&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            example</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;$x.decr&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            variables</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">amount</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            expression</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> &quot;\${x} = \${x} - \${amount}&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>expression</code> 的具体语义由后缀模板实现解析与执行，常见实现见 <code>ParadoxExpressionEditablePostfixTemplate</code> 等。</li><li><code>variables</code> 仅提供默认值；实际提示/编辑行为由模板实现决定。</li></ul><h2 id="config-expressions" tabindex="-1"><a class="header-anchor" href="#config-expressions"><span>规则表达式</span></a></h2><blockquote><p>本章节介绍各种规则表达式的用途、格式与默认/边界行为，帮助读者正确理解与编写这类特殊的表达式。</p></blockquote><h3 id="基础概念与适用范围" tabindex="-1"><a class="header-anchor" href="#基础概念与适用范围"><span>基础概念与适用范围</span></a></h3><p>规则表达式是在规则的“字符串字段”中使用的结构化语法，用于描述值的形态或匹配模式。</p><p>主要家族：</p><ul><li>数据表达式（Data Expression）：解析数据类型或动态片段。</li><li>模板表达式（Template Expression）：由常量与动态片段拼接的模式，用于更灵活的匹配。</li><li>基数表达式（Cardinality Expression）：用于声明出现次数范围及严谨/宽松校验。</li><li>位置表达式（Location Expression）：用于定位图片、本地化等资源。</li><li>架构表达式（Schema Expression）：用于 RHS 的取值形态声明。</li></ul><h3 id="数据表达式-data-expression" tabindex="-1"><a class="header-anchor" href="#数据表达式-data-expression"><span>数据表达式（Data Expression）</span></a></h3><p>用于描述脚本文件中的键或值的取值形态，可为常量、基本数据类型、引用、解析为动态内容的表达式等情况。</p><p>要点：</p><ul><li><strong>键/值上下文</strong>：解析会区分键（isKey=true）与值（isKey=false）。</li><li><strong>类型</strong>：解析后会得到具体的数据类型（如 <code>int</code>、<code>float</code>、<code>scalar</code>、<code>enum[...]</code>、<code>scope[...]</code>、<code>&lt;type_key&gt;</code> 等）。</li><li><strong>扩展元数据</strong>：按数据类型可附带数值范围、大小写策略等（例如 <code>int[-5..100]</code>、<code>float[-inf..inf]</code>、<code>ignoreCase</code>）。</li></ul><p>默认与边界行为：</p><ul><li><strong>回退策略</strong>：无法匹配任何规则时，类型回退为 <code>Constant</code>，并把原始字符串写入扩展属性 <code>value</code>。</li><li><strong>空串/块</strong>：空串按 <code>Constant(&quot;&quot;)</code> 处理；解析“块”时返回专用类型 <code>Block</code>（作为占位）。</li><li><strong>定义类型尖括号简写</strong>：优先使用 <code>&lt;country&gt;</code> 这类尖括号形式，而非 <code>definition[country]</code>。</li><li><strong>多数据源混用</strong>：可在模板/组合中混用不同来源的动态片段，例如 <code>&lt;country&gt;/&lt;planet&gt;</code>、<code>dynamic_value[test_flag]</code>。</li><li><strong>带参动态链接的字面量参数</strong>：对于 <code>relations(&#39;...&#39;)</code> 等，若参数为单引号字面量，视为字面量：不提供代码补全，并在补全入口中提前返回。</li></ul><p>示例（节选）：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">int</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">float</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">enum[shipsize_class]</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">scope[country]</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;ship_size&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pre_&lt;opinion_modifier&gt;_suf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板表达式-template-expression" tabindex="-1"><a class="header-anchor" href="#模板表达式-template-expression"><span>模板表达式（Template Expression）</span></a></h3><p>用于描述脚本文件中的键或值的更复杂的取值形态，可视为多个数据表达式的组合。 由数个片段拼接而成：常量字段 + 动态片段（受限支持的数据表达式）。</p><p>默认与约束：</p><ul><li><strong>不允许空白</strong>：包含空白字符视为无效模板（直接返回空表达式）。</li><li><strong>片段判定</strong>：仅存在一个片段（纯常量或纯一个动态）时不视为模板（返回空表达式）。</li><li><strong>匹配策略</strong>：仅扫描“具有前后缀”的动态规则，采用“最左最早匹配”拆分。</li><li><strong>片段类型</strong>：每段最终委托数据表达式解析；未匹配到规则时降级为 Constant。</li><li><strong>引用统计</strong>：仅非 Constant 片段会作为“引用片段”参与后续引用/导航。</li></ul><p>示例：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">job_&lt;job&gt;_add</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # &quot;job&quot; + &lt;job&gt; + &quot;_add&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">xxx_value[anything]_xxx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # &quot;xxx_&quot; + value[anything] + &quot;_xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a_enum[weight_or_base]_b</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # &quot;a_&quot; + enum[weight_or_base] + &quot;_b&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value[gui_element_name]:&lt;sprite&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # value[gui_element_name] + &quot;:&quot; + sprite</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value[gui_element_name]:localisation</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # value[gui_element_name] + &quot;:&quot; + localisation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>常量片段与“看起来像规则名”的组合紧邻时，优先保证动态规则的正确识别，避免将“符号 + 规则名”整体当作常量。</li><li>若需要空白，请改用更合适的匹配方式（如 ANT/正则）。</li></ul><h3 id="基数表达式-cardinality-expression" tabindex="-1"><a class="header-anchor" href="#基数表达式-cardinality-expression"><span>基数表达式（Cardinality Expression）</span></a></h3><p>用于约束定义成员的出现次数，驱动代码检查、代码补全等功能。 支持宽松校验与无限上限。</p><p>用 <code>min..max</code> 表示允许的出现次数范围，<code>~</code> 为宽松标记，<code>inf</code> 表示无限。</p><p>默认与边界行为：</p><ul><li><strong>最小值负数</strong>：会被钳制为 0。</li><li><strong>max 为 <code>inf</code>（不区分大小写）</strong>：表示无限。</li><li><strong>无 <code>..</code> 分隔</strong>：视为无效，不产生约束。</li><li><strong>min &gt; max</strong>：视为无效，不产生约束。</li></ul><p>示例：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## cardinality = 0..1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## cardinality = 0..inf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## cardinality = ~1..10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位置表达式-location-expression" tabindex="-1"><a class="header-anchor" href="#位置表达式-location-expression"><span>位置表达式（Location Expression）</span></a></h3><p>用于定位目标资源（图片、本地化等）的来源。 如果表达式中包含包含 <code>$</code>，视为占位符，需要在后续步骤以“定义名或属性值”等动态内容替换。</p><h4 id="图片位置表达式-image-location-expression" tabindex="-1"><a class="header-anchor" href="#图片位置表达式-image-location-expression"><span>图片位置表达式（Image Location Expression）</span></a></h4><p>用于定位定义的相关图片。</p><p>语法与约定：</p><ul><li>使用 <code>|</code> 分隔参数：<code>&lt;location&gt;|&lt;args...&gt;</code>。</li><li>以 <code>$</code> 开头的参数表示“名称文本来源路径”（支持逗号分隔多路径）：替换占位符，写入 namePaths。</li><li>其他参数表示“帧数来源路径”（支持逗号分隔多路径）：用于图片切分，写入 framePaths。</li><li>同类参数重复出现时（均以 <code>$</code> 开头，或均为非 <code>$</code>），以后者为准。</li></ul><p>示例：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gfx/interface/icons/modifiers/mod_$.dds</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gfx/interface/icons/modifiers/mod_$.dds|$name</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gfx/interface/icons/modifiers/mod_$_by_$.dds|$name</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">GFX_$</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">icon</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">icon|p1,p2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：<code>icon</code> 可被解析为文件路径、sprite 名或定义名；若为定义名则继续解析其最相关图片。</p><h4 id="本地化位置表达式-localisation-location-expression" tabindex="-1"><a class="header-anchor" href="#本地化位置表达式-localisation-location-expression"><span>本地化位置表达式（Localisation Location Expression）</span></a></h4><p>用于定位定义的相关本地化。</p><p>语法与约定：</p><ul><li>使用 <code>|</code> 分隔参数：<code>&lt;location&gt;|&lt;args...&gt;</code>。</li><li>以 <code>$</code> 开头的参数表示“名称文本来源路径”（支持逗号分隔多路径），写入 namePaths。</li><li>参数 <code>u</code> 表示将最终名称强制转为大写。仅限使用占位符时有效。</li><li><code>$</code> 参数重复出现时，以后者为准。</li></ul><p>示例：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$_desc</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$_desc|$name</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$_desc|$name|u</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$_desc|$name,$alt_name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 多名称路径，逗号分隔</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$_desc|$name|$alt_name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 重复 \`$\` 参数时后者生效（last one wins）</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">title</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="架构表达式-schema-expression" tabindex="-1"><a class="header-anchor" href="#架构表达式-schema-expression"><span>架构表达式（Schema Expression）</span></a></h3><p>用于描述规则文件中的键与值的取值形态，从而为规则文件本身提供代码补全、代码检查等功能。 目前仅用于提供基础的代码补全，且仅在 <code>cwt/core/schema.cwt</code> 中有用到。</p><p>支持的形态：</p><ul><li><strong>常量（Constant）</strong>：不包含 <code>$</code> 的原样字符串。</li><li><strong>模板（Template）</strong>：包含一个或多个参数（<code>$...$</code>），如：<code>$type$</code>、<code>type[$type$]</code>。</li><li><strong>类型（Type）</strong>：以单个 <code>$</code> 起始，如：<code>$any</code>、<code>$int</code>。</li><li><strong>约束（Constraint）</strong>：以 <code>$$</code> 起始，如：<code>$$declaration</code>。</li></ul><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h2><h4 id="关于模板表达式" tabindex="-1"><a class="header-anchor" href="#关于模板表达式"><span>关于模板表达式</span></a></h4><p>模板表达式由多个数据表达式（如定义、本地化、字符串字面量对应的数据表达式）组合而成，用来进行更加灵活的匹配。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a string literal, exactly matches &#39;x&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">x</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a template expression which contains a reference to jobs, matches &#39;a_researcher_b&#39;, &#39;a_farmer_b&#39;, etc.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a_&lt;job&gt;_b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a template expression which contains a references to enum values of &#39;weight_or_base&#39;, matches &#39;a_weight_b&#39; and &#39;a_base_b&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a_enum[weight_or_base]_b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a template expression which contains a references to dynamic values of &#39;anything&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># generally, there is no limit for &#39;value[anything]&#39;, so this expression is equivalent to regex &#39;a_.*_b&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a_value[anything]_b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何在规则文件中使用-ant-路径模式" tabindex="-1"><a class="header-anchor" href="#如何在规则文件中使用-ant-路径模式"><span>如何在规则文件中使用 ANT 路径模式</span></a></h4><p>PLS 对规则表达式进行了扩展，从1.3.6开始，可以通过 ANT 路径模式进行更加灵活的匹配。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a ant expression use prefix &#39;ant:&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ant:/foo/bar?/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a ant expression use prefix &#39;ant.i:&#39; (ignore case)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ant.i:/foo/bar?/*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># wildcards in ant expression:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;?&#39; - used to match any single character</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;*&#39; - used to match any characters (exclude &#39;/&#39;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;**&#39; - used to match any characters</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何在规则文件中使用正则表达式" tabindex="-1"><a class="header-anchor" href="#如何在规则文件中使用正则表达式"><span>如何在规则文件中使用正则表达式</span></a></h4><p>PLS 对规则表达式进行了扩展，从1.3.6开始，可以通过正则表达式进行更加灵活的匹配。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a regex use prefix &#39;re:&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">re:foo.*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># a regex use prefix &#39;re.i:&#39; (ignore case)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">re.i:foo.*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何在规则文件中指定作用域上下文" tabindex="-1"><a class="header-anchor" href="#如何在规则文件中指定作用域上下文"><span>如何在规则文件中指定作用域上下文</span></a></h4><p>在规则文件中，作用域上下文是通过选项 <code>push_scope</code> 与 <code>replace_scopes</code> 来指定的。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cwt"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># push &#39;country&#39; scope to scope stack</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># for this example, the next this scope will be &#39;country&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## push_scope = country</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">some_config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># replace scopes of specific system scopes into scope context</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># not supported for &#39;prev&#39; system scope (and &#39;prevprev&#39;, etc.)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># for this example, the next this scope will be &#39;country&#39;, so do the next root scope and the next from scope</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## replace_scopes = { this = country root = country from = country }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">some_config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,264)])])}const k=a(d,[["render",h]]),g=JSON.parse('{"path":"/zh/ref-config-format.html","title":"附录：规则格式参考","lang":"zh-CN","frontmatter":{"description":"附录：规则格式参考 定位与愿景 本参考面向希望“理解/编写/扩展” CWT 规则（CWT config file）的作者与维护者，旨在： 统一术语与边界：对齐 PLS 与 CWTools 的语义，明确 PLS 的扩展点与差异。 建立从文档到实现的映射：每个规则条目均标注对应接口/解析器，便于回溯源码与验证行为。 指导实践：概述用途、格式与注意事项，为后...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"附录：规则格式参考\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-11-01T10:36:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DragonKnightOfBreeze\\",\\"url\\":\\"https://github.com/DragonKnightOfBreeze\\",\\"email\\":\\"dk_breeze@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://windea.icu/Paradox-Language-Support/zh/ref-config-format.html"}],["meta",{"property":"og:site_name","content":"Paradox Language Support"}],["meta",{"property":"og:title","content":"附录：规则格式参考"}],["meta",{"property":"og:description","content":"附录：规则格式参考 定位与愿景 本参考面向希望“理解/编写/扩展” CWT 规则（CWT config file）的作者与维护者，旨在： 统一术语与边界：对齐 PLS 与 CWTools 的语义，明确 PLS 的扩展点与差异。 建立从文档到实现的映射：每个规则条目均标注对应接口/解析器，便于回溯源码与验证行为。 指导实践：概述用途、格式与注意事项，为后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-11-01T10:36:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-11-01T10:36:54.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://windea.icu/Paradox-Language-Support/en/ref-config-format.html"}]]},"git":{"createdTime":1761993414000,"updatedTime":1761993414000,"contributors":[{"name":"DragonKnightOfBreeze","username":"DragonKnightOfBreeze","email":"dk_breeze@qq.com","commits":1,"url":"https://github.com/DragonKnightOfBreeze"}]},"readingTime":{"minutes":41.34,"words":12403},"filePathRelative":"zh/ref-config-format.md","autoDesc":true}');export{k as comp,g as data};
