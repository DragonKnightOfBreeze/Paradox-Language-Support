#scripted effects
alias[effect:<scripted_effect>] = yes
###The scripted effect will draw the value of the right clause via $left_clause$.
#Todo: Make sure this works
alias[effect:<scripted_effect>] = {
	## cardinality = 1..inf
	enum[scripted_effect_params] = scalar
	## cardinality = 1..inf
	enum[scripted_effect_params] = scope_field
}

###Creates a starbase in orbit of the star of the scoped galactic object
alias[effect:create_starbase] = {
	## cardinality = 0..1
	owner = scope[country]
	## cardinality = 1..1
	size = <ship_size.starbase>
	## cardinality = 0..100
	module = <starbase_module>
	## cardinality = 0..100
	building = <starbase_building>
	## cardinality = 0..1
	## push_scope = starbase
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

#alias[effect:hidden_effect] = { alias_name[effect] = alias_match_left[effect] }
###Executes enclosed effects if limit criteria are met
alias[effect:if] = {
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

###Executes enclosed effects if limit criteria of both it and preceding 'if' or 'else_if' is not met, and its own limit is met
alias[effect:else_if] = {
	## severity = info
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

###Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met, and its own limit is met
alias[effect:else] = {
	alias_name[effect] = alias_match_left[effect]
}

###Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain
alias[effect:save_event_target_as] = value_set[event_target]
###Saves the current scope as an arbitrarily-named target to be referenced later, accessible globally until cleared
alias[effect:save_global_event_target_as] = value_set[global_event_target]
###Fires a ship event for the scoped ship, with optional DAYS and RANDOM delay
alias[effect:ship_event] = {
	id = <event.ship>
	id = <event.scopeless>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Fires a country event for the scoped country, with optional DAYS and RANDOM delay
alias[effect:country_event] = {
	id = <event.country>
	id = <event.scopeless>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Fires an observer event for all observers.
alias[effect:observer_event] = {
	id = <event.observer>
	id = <event.scopeless>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Fires a pop faction event for the scoped pop faction, with optional DAYS and RANDOM delay
alias[effect:pop_faction_event] = {
	id = <event.pop_faction>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Fires a pop event for the scoped pop, with optional DAYS and RANDOM delay
alias[effect:pop_event] = {
	id = <event.pop>
	id = <event.scopeless>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Fires a fleet event for the scoped fleet, with optional DAYS and RANDOM delay
alias[effect:fleet_event] = {
	id = <event.fleet>
	id = <event.scopeless>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Fires a planet event for the scoped planet, with optional DAYS and RANDOM delay
alias[effect:planet_event] = {
	id = <event.planet>
	id = <event.scopeless>
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	random = int
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###Adds a specific modifier to the scoped planet/pop/country/fleet/ship/pop/system/faction for a set duration
alias[effect:add_modifier] = {
	modifier = <static_modifier>
	# severity = info
	## cardinality = 0..1
	enum[days_months_years] = int
}

###Displays a custom text (localisation string)
alias[effect:custom_tooltip] = localisation
###Adds a specific opinion modifier for the scoped country towards target country
alias[effect:add_opinion_modifier] = {
	who = scope[country]
	modifier = <opinion_modifier>
}

###Removes a specific opinion modifier towards target country or any contry from the scoped country
alias[effect:remove_opinion_modifier] = {
	who = scope[country]
	modifier = <opinion_modifier>
}

###Removes a specific modifier from the scopes planet/country/pop/system
alias[effect:remove_modifier] = <static_modifier>
#flags
###Sets an arbitrarily-named flag on the scoped country
alias[effect:set_country_flag] = value_set[country_flag]
###Sets an arbitrarily-named flag on the scoped planet
alias[effect:set_planet_flag] = value_set[planet_flag]
###Sets an arbitrarily-named flag on the scoped pop's faction/pop faction
alias[effect:set_pop_faction_flag] = value_set[pop_faction_flag]
###Sets an arbitrarily-named flag on the scoped system
alias[effect:set_star_flag] = value_set[star_flag]
###Sets an arbitrarily-named flag on the scoped species
alias[effect:set_species_flag] = value_set[species_flag]
###Sets an arbitrarily-named flag on the scoped country
alias[effect:set_pop_flag] = value_set[pop_flag]
###Sets an arbitrarily-named flag on the scoped fleet
alias[effect:set_fleet_flag] = value_set[fleet_flag]
###Sets an arbitrarily-named flag on the scoped ship
alias[effect:set_ship_flag] = value_set[ship_flag]
###Sets an arbitrarily-named global flag
alias[effect:set_global_flag] = value_set[global_flag]
###Sets an arbitrarily-named flag on the scoped leader
alias[effect:set_leader_flag] = value_set[leader_flag]
###Sets an arbitrarily-named flag on the scoped ambient object
alias[effect:set_ambient_object_flag] = value_set[ambient_object_flag]
###Sets an arbitrarily-named flag on the scoped megastructure
alias[effect:set_megastructure_flag] = value_set[megastructure_flag]
###Removes a flag from the scoped country
alias[effect:remove_country_flag] = value[country_flag]
###Removes a flag from the scoped planet
alias[effect:remove_planet_flag] = value[planet_flag]
###Removes a flag from the scoped pop's faction/pop faction
alias[effect:remove_pop_faction_flag] = value[pop_faction_flag]
###Removes a flag from the scoped system
alias[effect:remove_star_flag] = value[star_flag]
###Removes a flag from the scoped species
alias[effect:remove_species_flag] = value[species_flag]
###Removes a flag from the scoped pop
alias[effect:remove_pop_flag] = value[pop_flag]
###Removes a flag from the scoped fleet
alias[effect:remove_fleet_flag] = value[fleet_flag]
###Removes a flag from the scoped ship
alias[effect:remove_ship_flag] = value[ship_flag]
###Removes a global flag
alias[effect:remove_global_flag] = value[global_flag]
###Removes a flag from the scoped leader
alias[effect:remove_leader_flag] = value[leader_flag]
###Removes a flag from the scoped ambient object
alias[effect:remove_ambient_object_flag] = value[ambient_object_flag]
###Removes a flag from the scoped megastructure
alias[effect:remove_megastructure_flag] = value[megastructure_flag]
###Sets an arbitrarily-named flag on the scoped country for a set duration
alias[effect:set_timed_country_flag] = {
	flag = value_set[country_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped planet for a set duration
alias[effect:set_timed_planet_flag] = {
	flag = value_set[planet_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped pop faction for a set duration
alias[effect:set_timed_pop_faction_flag] = {
	flag = value_set[pop_faction_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped system for a set duration
alias[effect:set_timed_star_flag] = {
	flag = value_set[star_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped species for a set duration
alias[effect:set_timed_species_flag] = {
	flag = value_set[species_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped pop for a set duration
alias[effect:set_timed_pop_flag] = {
	flag = value_set[pop_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped fleet for a set duration
alias[effect:set_timed_fleet_flag] = {
	flag = value_set[fleet_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped ship for a set duration
alias[effect:set_timed_ship_flag] = {
	flag = value_set[ship_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named global flag for a set duration
alias[effect:set_timed_global_flag] = {
	flag = value_set[global_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped leader for a set duration
alias[effect:set_timed_leader_flag] = {
	flag = value_set[leader_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped ambient object for a set duration
alias[effect:set_timed_ambient_object_flag] = {
	flag = value_set[ambient_object_flag]
	enum[days_months_years] = int
}

###Sets an arbitrarily-named flag on the scoped mega structure for a set duration
alias[effect:set_timed_megastructure_flag] = {
	flag = value_set[megastructure_flag]
	enum[days_months_years] = int
}

###Removes a megastructure.
alias[effect:remove_megastructure] = scope[megastructure]
###Sets a relation flag for the scoped country towards target country
alias[effect:set_relation_flag] = {
	who = scope[country]
	flag = value_set[relation_flag]
}

###Sets an arbitrarily-named flag for the scoped country towards target country for a set duration
alias[effect:set_timed_relation_flag] = {
	who = scope[country]
	flag = value_set[relation_flag]
	enum[days_months_years] = int
}

###Removes a specific relation flag towards target country from the scoped country
alias[effect:remove_relation_flag] = {
	who = scope[country]
	flag = value[relation_flag]
}

###Change the scoped country's government authority and/or civics
alias[effect:change_government] = random
###Change the scoped country's government authority and/or civics
alias[effect:change_government] = {
	## cardinality = 0..1
	authority = random
	## cardinality = 0..1
	authority = <authority>
	## cardinality = 0..1
	### random includes starting civics
	civics = random
	## cardinality = 0..1
	civics = {
		## cardinality = 1..4
		civic = <civic_or_origin.civic>
		## cardinality = 1..4
		civic = random
	}
	## cardinality = 0..1
	cooldown = bool
}

#ideally, "heir" should only be if type = ruler
###Kills the scoped leader or leader of the scoped country/fleet/ship/planet/army
alias[effect:kill_leader] = {
	##cardinality = 0..1
	type = enum[leader_classes]
	##cardinality = 0..1
	type = random
	##cardinality = 0..1
	show_notification = bool
	##cardinality = 0..1
	heir = bool
}

###Shifts an empire towards a specific ethic, adjusting aferwards to keep number of ethics points consistent
alias[effect:shift_ethic] = <ethos>
###Adds a specific ethic to the scoped country
alias[effect:country_add_ethic] = <ethos>
###Removes a specific ethic from the scoped country
alias[effect:country_remove_ethic] = <ethos>
###Instantly destroys the scoped pop
alias[effect:kill_pop] = yes
# alias[effect:enslave_pop] = bool	#deprecated
###Destroys the colony on the scoped planet
alias[effect:destroy_colony] = yes
#alias[effect:set_ruined] = bool
###Picks one random set of effects from a list, influenced by relative weight
alias[effect:random_list] = {
	##cardinality = 1..inf
	float = {
		##cardinality = 0..inf
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
		##cardinality = 0..inf
		alias_name[effect] = alias_match_left[effect]
	}
}

###Picks one random set of effects from a list, influenced by relative weight once per event scope. Works like a random list, but the tooltip will only show the option that actually happens.
alias[effect:locked_random_list] = {
	##cardinality = 1..inf
	int = {
		##cardinality = 0..inf
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
		##cardinality = 0..inf
		alias_name[effect] = alias_match_left[effect]
	}
}

###All enclosed effects may or may not be executed depending on set chance
alias[effect:random] = {
	chance = int[1...99]
	alias_name[effect] = alias_match_left[effect]
}

###Creates a new fleet from empire designs up to specified fraction of naval cap
alias[effect:create_fleet_from_naval_cap] = float
###Reduces the hull points of the scoped ship by a specific amount
alias[effect:reduce_hp] = int
###Reduces the hull points of the scoped ship by a relative amount
alias[effect:reduce_hp_percent] = float[0.0..1.0]
###Reduces the hull points of the scoped ship by a relative amount
alias[effect:reduce_hp_percent] = int[0..100]
###Exiles the scoped country/fleet/army/pop faction's leader and saves them with a custom name so you can bring them back.
alias[effect:exile_leader_as] = value_set[exiled_leader]
###Adds a sum of experience points to the scoped leader
alias[effect:add_experience] = int
###Sets the gender of the scoped leader
alias[effect:set_is_female] = bool
###Sets scoped leader as non/recruitable
alias[effect:recruitable] = bool
###Assigns target leader to the scoped country/fleet/army/pop faction
alias[effect:assign_leader] = scope[leader]
###Unassigns scoped leader from their post or unassigns leader from the scoped planet/ship/fleet/army/sector
alias[effect:unassign_leader] = scope[leader]
###Adds claims on target system
alias[effect:add_claims] = {
	who = scope[country]
	## cardinality = 0..1
	num_of_claims = int
	## cardinality = 0..1
	show_notification = bool
}

###Instantly sets the owner of the scoped planet/fleet/army/starbase to target country
alias[effect:set_owner] = scope[country]
###Instantly sets the planet/fleet's controller to target country
alias[effect:set_controller] = scope[country]
###Sets the fleet/ambient object's location, can be fine-tuned
alias[effect:set_location] = scope[planet]
alias[effect:set_location] = scope[starbase]
alias[effect:set_location] = scope[galactic_object]
alias[effect:set_location] = scope[megastructure]
alias[effect:set_location] = scope[fleet]
alias[effect:set_location] = scope[ship]
alias[effect:set_location] = scope[ambient_object]
###Sets the fleet/ambient object's location, can be fine-tuned
alias[effect:set_location] = {
	target = scope[planet]
	target = scope[galactic_object]
	target = scope[starbase]
	target = scope[ambient_object]
	target = scope[megastructure]
	target = scope[fleet]
	target = scope[ship]
	## cardinality = 0..1
	distance = float
	## cardinality = 0..1
	angle = int[0..360]
	## cardinality = 0..1
	angle = random
	## cardinality = 0..1
	direction = in_system
	## cardinality = 0..1
	direction = out_system
}

#variables
###Sets or creates an arbitrarily-named variable with a specific value in the current scope
alias[effect:set_variable] = {
	which = value_set[variable]
	value = float
	value = scope[any]
	value = value[variable]
}

#presumably need to check the variable exists first for these, somehow
###Increments a previously-set variable by a specific amount
alias[effect:change_variable] = {
	which = value_set[variable]
	value = float
	value = scope[any]
	value = value[variable]
}

###Decrements a previously-set variable by a specific amount
alias[effect:subtract_variable] = {
	which = value[variable]
	value = float
	value = scope[any]
	value = value[variable]
}

###Multiplies a previously-set variable by a specific amount
alias[effect:multiply_variable] = {
	which = value[variable]
	value = float
	value = scope[any]
	value = value[variable]
}

###Divides a previously-set variable by a specific amount
alias[effect:divide_variable] = {
	which = value[variable]
	value = float
	value = scope[any]
	value = value[variable]
}

#max should not be less than min...
###Adds a lump sum of a resource to the scoped country, defined as a multiple of the country's monthly income of that resource (clamped to max and min allowed values)
alias[effect:add_monthly_resource_mult] = {
	resource = <resource>
	value = float
	## cardinality = 0..1
	min = int
	## cardinality = 0..1
	max = int
}

###Adds a specific trait to the scoped leader
alias[effect:add_trait] = <trait.leader_trait>
###Adds a specific ruler trait to the scoped leader, even if they are not currently ruler; it becomes active when they become ruler
alias[effect:add_ruler_trait] = <trait.ruler_trait>
###Removes a specific trait from the scoped leader
alias[effect:remove_trait] = <trait>
#also, at least one of while and limit should be there
###Repeats enclosed effects while limit criteria are met or until set iteration count is reached. Can use a variable for the count.
alias[effect:while] = {
	## cardinality = 0..1
	count = int
	## cardinality = 0..1
	count = value[variable]
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

###Instantly resettles pop
alias[effect:resettle_pop] = {
	pop = scope[pop]
	## cardinality = 0..1
	planet = scope[planet]
}

#also, most of these are not used in Vanilla (the first is, I did the cardinality based on it)
###Set citizenship type for scoped species/pop/leader
alias[effect:set_citizenship_type] = {
	## cardinality = 0..1
	country = scope[country]
	type = enum[citizenship_types]
	## cardinality = 0..1
	cooldown = bool
}

###Set military service type for scoped species/pop/leader
alias[effect:set_military_service_type] = {
	## cardinality = 0..1
	country = scope[country]
	type = enum[military_service_types]
	## cardinality = 0..1
	cooldown = bool
}

###Set purge type for scoped species/pop/leader
alias[effect:set_purge_type] = {
	## cardinality = 0..1
	country = scope[country]
	type = enum[purge_types]
	## cardinality = 0..1
	cooldown = bool
}

###Set slavery type for scoped species/pop/leader
alias[effect:set_slavery_type] = {
	## cardinality = 0..1
	country = scope[country]
	type = enum[slavery_types]
	## cardinality = 0..1
	cooldown = bool
}

###Set population control for scoped species/pop/leader
alias[effect:set_population_controls] = {
	## cardinality = 0..1
	country = scope[country]
	type = bool
	## cardinality = 0..1
	cooldown = bool
}

###Set migration control for scoped species/pop/leader
alias[effect:set_migration_controls] = {
	## cardinality = 0..1
	country = scope[country]
	type = bool
	## cardinality = 0..1
	cooldown = bool
}

###Set living standard for scoped species/pop/leader
alias[effect:set_living_standard] = {
	## cardinality = 0..1
	country = scope[country]
	type = enum[living_standards]
	## cardinality = 0..1
	cooldown = bool
}

###Joins wars on the side of target country
alias[effect:join_war] = scope[country]
###Changes closed borders status between two countries
alias[effect:set_closed_borders] = {
	who = scope[country]
	status = bool
	## cardinality = 0..1
	forced = int
}

###Declares war between the scoped country and target country
alias[effect:declare_war] = {
	target = scope[country]
	attacker_war_goal = <war_goal>
	## cardinality = 0..1
	name = localisation_synced
}

###Adds static war exhaustion, scaled with value_for_planet_destruction, to owner of the battle location
alias[effect:add_static_war_exhaustion] = {
	attacker = scope[country]
	location = scope[planet]
	value_for_planet_destruction = float[0.0..1.0]
}

###Adds diplomatic threat from target country
alias[effect:add_threat] = {
	who = scope[planet]
	who = scope[country]
	who = scope[galactic_object]
	amount = float
}

###Adds a Casus Belli to the scoped country against the target country.
alias[effect:add_casus_belli] = {
	type = <casus_belli>
	who = scope[country]
	days = int
}

###Sets a war goal to the scoped rebel country/war
alias[effect:set_war_goal] = {
	type = <war_goal>
	target = scope[country]
	target = scope[war]
	enemy = scope[country]
	enemy = scope[war]
}

###Sets the planet as un/surveyed by target country
alias[effect:surveyed] = {
	set_surveyed = bool
	## cardinality = 0..1
	surveyor = scope[country]
}

###Destroys the target fleet (with death graphics)
alias[effect:destroy_fleet] = scope[fleet]
###Destroys the target fleet (with death graphics)
alias[effect:destroy_fleet] = {
	target = scope[fleet]
	## cardinality = 0..1
	kill_leader = bool
	## cardinality = 0..1
	destroy_template = bool
}

###Deletes the target fleet (no death graphics)
alias[effect:delete_fleet] = scope[fleet]
###Deletes the target fleet (no death graphics)
alias[effect:delete_fleet] = {
	target = scope[fleet]
	## cardinality = 0..1
	kill_leader = bool
	## cardinality = 0..1
	destroy_template = bool
}

###Deletes the target ship (no death graphics)
alias[effect:delete_ship] = scope[ship]
###Destroys the target ship (with death graphics)
alias[effect:destroy_ship] = scope[ship]
###Adds/Removes tiles to/from the scoped planet to adjust its planet size
alias[effect:change_planet_size] = int
#see comment for what should actually be written here
###Sets the name of the scoped country/planet/ship/fleet/leader/army/system/pop faction. Allowed entries are <random>/<string in localisation_synced>/<string written in quotes e.g. "United Nations">
alias[effect:set_name] = random
alias[effect:set_name] = localisation_synced
alias[effect:set_name] = scope[any]
alias[effect:set_name] = localisation
###Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
alias[effect:set_leader] = value[exiled_leader]
###Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
alias[effect:set_leader] = last_created_leader
###Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
alias[effect:set_leader] = scope[leader]
###Forces scoped country to evaluate whether to create a specific faction type immediately, rather than monthly
alias[effect:enable_faction_of_type] = <pop_faction>
###Sets the scoped country to be a specific subject of target country
alias[effect:set_subject_of] = {
	who = none
}

###Sets the scoped country to be a specific subject of target country
alias[effect:set_subject_of] = {
	who = scope[country]
	subject_type = <subject_type>
}

###Removes claims on target system
alias[effect:remove_claims] = {
	who = scope[country]
	## cardinality = 0..1
	num_of_claims = int
}

###Prevents execution of subsequent effects in the same effect block, used with if-statements
alias[effect:break] = yes
###Destroys the scoped country
alias[effect:destroy_country] = yes
###Destroys the colony on the scoped planet
alias[effect:destroy_colony] = yes
###Destroys target ambient object
alias[effect:destroy_ambient_object] = scope[ambient_object]
###Removes the planet from the scope
alias[effect:remove_planet] = yes
###Removes a building from the scoped planet, this will also cancel construction and clear the queue
## scope = planet
alias[effect:remove_building] = <building>
###Begins construction of a specific building
## scope = planet
alias[effect:add_building] = <building>
###Instantly gives a specific tech to the scoped country
alias[effect:give_technology] = {
	tech = <technology>
	## cardinality = 0..1
	message = bool
}

###Copies all techs from the target country to the scoped country, except for some exceptions listed. Tech weights (and weight modifiers) are honoured, meaning that techs a country should not have will not be copied.
alias[effect:copy_techs_from] = {
	target = scope[country]
	## cardinality = 0..1
	except = {
		## cardinality = 0..inf
		<technology>
	}
}

###Sets the scoped object's graphical culture
alias[effect:set_graphical_culture] = <graphical_culture>
alias[effect:set_graphical_culture] = scope[any]
###Creates a new species
alias[effect:create_species] = {
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	name = localisation
	## cardinality = 0..1
	name = scope[any]
	## cardinality = 0..1
	name = random
	## cardinality = 0..1
	namelist = <name_list>
	## cardinality = 0..1
	namelist = scope[country]
	## cardinality = 0..1
	namelist = random
	## cardinality = 0..1
	plural = scalar
	## cardinality = 0..1
	species_bio = scalar
	## cardinality = 0..1
	adjective = scalar
	class = <species_class>
	class = random_non_machine
	class = random
	class = scope[species]
	## cardinality = 0..1
	portrait = scope[species]
	## cardinality = 0..1
	portrait = <portrait>
	## cardinality = 0..1
	portrait = <portrait_group>
	## cardinality = 0..1
	portrait = random
	## cardinality = 0..1
	homeworld = scope[planet]
	## cardinality = 0..1
	homeworld = scope[species]
	# -> traits can be multiple. You can have traits = this, traits = { trait = xyz } at the same time
	## cardinality = 0..2
	traits = scope[country]
	## cardinality = 0..2
	traits = scope[pop]
	## cardinality = 0..2
	traits = scope[species]
	## cardinality = 0..2
	traits = random
	## cardinality = 0..2
	traits = {
		## cardinality = 0..1
		ideal_planet_class = scope[pop]
		## cardinality = 0..1
		ideal_planet_class = scope[planet]
		## cardinality = 0..1
		ideal_planet_class = scope[country]
		## cardinality = 0..1
		ideal_planet_class = <planet_class.habitable_planet>
		## cardinality = 0..10
		trait = <trait.species_trait>
		## cardinality = 0..10
		trait = random_traits
		## cardinality = 0..10
		trait = random_presapient_trait
		## cardinality = 0..10
		add_trait = <trait.species_trait>
	}
	## cardinality = 0..1
	sapient = bool
	## cardinality = 0..1
	###determines if species is a modification of another
	is_mod = bool
	## cardinality = 0..1
	###determines if species leaders are immortal
	immortal = bool
	## cardinality = 0..1
	###determines if pops of that species can colonize
	pops_can_be_colonizers = bool
	## cardinality = 0..1
	###determines if pops of that species can migrate
	pops_can_migrate = bool
	## cardinality = 0..1
	###determines if pops of that species can reproduce
	pops_can_reproduce = bool
	## cardinality = 0..1
	###determines if pops of that species can join factions
	pops_can_join_factions = bool
	## cardinality = 0..1
	###determines if that species can generate leaders
	can_generate_leaders = bool
	## cardinality = 0..1
	###determines if pops from that species can become slaves
	pops_can_be_slaves = bool
	## cardinality = 0..1
	###determines if pops from that species have happiness
	pops_have_happiness = bool
	## cardinality = 0..1
	###determines if pops from need consumer goods
	consumer_goods = bool
	## cardinality = 0..1
	###determines if the species can be modified
	can_be_modified = bool
	## cardinality = 0..1
	###speed at which the pops from that species grow automatically
	pops_auto_growth = float[0.0..1.0]
	## cardinality = 0..1
	###amount of energy each pop of that species consume monthly
	pop_maintenance = float[0.0..1.0]
	## cardinality = 0..1
	new_pop_resource_requirement = {
		type = <resource>
		type = robot_food
		type = scalar
		value = float
	}
	## cardinality = 0..1
	allow_negative_traits = bool
	## cardinality = 0..1
	extra_trait_points = int
	## cardinality = 0..1
	name_list = <name_list>
	## cardinality = 0..1
	name_list = random
	## cardinality = 0..1
	name_list = scope[country]
	## cardinality = 0..1
	pop_ethics = no
	## cardinality = 0..1
	pop_ethics = random
	## cardinality = 0..1
	pop_ethics = <ethos>
	## cardinality = 0..1
	pop_ethics = {
		## cardinality = 1..3
		<ethos>
		## cardinality = 0..1
		random
	}
	## cardinality = 0..1
	## push_scope = species
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	blocked_archetypes = {
		## cardinality = 1..inf
		<species_archetype>
	}
}

#if the country is default or anything else that uses them, it really should specify all the details of government, species, etc
###Creates a new country
alias[effect:create_country] = {
	## cardinality = 0..1
	name = scope[any]
	## cardinality = 0..1
	name = random
	## cardinality = 0..1
	name = localisation_synced
	type = <country_type>
	## cardinality = 0..1
	auto_delete = bool
	## cardinality = 0..1
	name_list = <name_list>
	## cardinality = 0..1
	name_list = random
	## cardinality = 0..1
	name_list = scope[country]
	## cardinality = 0..1
	ship_prefix = scalar	#should be string or a scope
	## cardinality = 0..1
	authority = random
	## cardinality = 0..1
	authority = <authority>
	## cardinality = 0..1
	authority = scope[country]
	## cardinality = 0..1
	civics = scope[country]
	## cardinality = 0..1
	origin = <civic_or_origin.origin>
	## cardinality = 0..1
	### random includes starting civics
	civics = random
	## cardinality = 0..1
	civics = {
		# TODO: Make this 1..4 with warning only
		## cardinality = 0..4
		civic = <civic_or_origin.civic>
		## cardinality = 0..4
		civic = random
	}
	## cardinality = 0..1
	species = random
	## cardinality = 0..1
	species = last_created
	## cardinality = 0..1
	species = scope[country]
	###Does not support pop scope according to had
	#species = scope[pop]
	## cardinality = 0..1
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	species = scope[species]	#maybe key would work, I don't know which though
	## cardinality = 0..1
	randomize_ethos = yes
	## cardinality = 0..1
	ethos = random
	## cardinality = 0..1
	ethos = scope[country]
	## cardinality = 0..1
	ethos = {
		## cardinality = 1..3
		ethic = <ethos>
		## cardinality = 1..3
		ethic = random
	}
	## cardinality = 0..1
	## push_scope = country
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	flag = scope[country]
	## cardinality = 0..1
	flag = random
	## cardinality = 0..1
	flag = {
		#TODO - this is connected to game/flags.
		#I already created an entry for flag colors etc, you should work on connecting these.
		## cardinality = 0..1
		icon = {
			category = scalar			#should be some sort of key
			file = scalar			#should be "filename.dds" in the correct folder
		}
		background = {
			category = scalar			#should be some sort of key
			file = scalar			#should be "filename.dds" in the correct folder
		}
		colors = {
			##cardinality = 0..4
			<color_define>
			##cardinality = 0..4
			"null"
		}
	}
	## cardinality = 0..1
	###Establishing contact on_action (on_first_contact) will not fire for any countries (ever) if this is set to no
	day_zero_contact = bool
	## cardinality = 0..1
	###Establishing contact on_action (on_first_contact) will not fire for this country or its federation allies
	exclude_day_zero_contact = scope[country]
	## cardinality = 0..1
	released_by_country = scope[country]	#scope
	## cardinality = 0..1
	released_from_country = scope[country]	#scope
	## cardinality = 0..1
	ignore_initial_colony_error = bool
}

###Creates a rebellion on this planet
alias[effect:create_rebels] = {
	name = localisation_synced
	name = scope[any]
	name = random
	authority = random
	authority = <authority>
	authority = scope[country]
	## cardinality = 0..1
	origin = <civic_or_origin.origin>
	## cardinality = 0..1
	civics = scope[country]
	### random includes starting civics
	## cardinality = 0..1
	civics = random
	## cardinality = 0..1
	civics = {
		## cardinality = 2..3
		civic = <civic_or_origin.civic>
	}
	species = scope[country]
	species = enum[buildable_pop_species]
	species = scope[pop]
	species = scope[species]	#maybe key would work, I don't know which though
	## cardinality = 0..1
	ethos = random
	## cardinality = 0..1
	ethos = scope[country]
	## cardinality = 0..1
	ethos = {
		## cardinality = 1..3
		ethic = <ethos>
	}
	## cardinality = 0..1
	flag = scope[country]
	## cardinality = 0..1
	flag = random
	## cardinality = 0..1
	flag = {
		#TODO - this is connected to game/flags.
		#I already created an entry for flag colors etc, you should work on connecting these.
		## cardinality = 0..1
		icon = {
			category = scalar			#should be some sort of key
			file = scalar			#should be "filename.dds" in the correct folder
		}
		background = {
			category = scalar			#should be some sort of key
			file = scalar			#should be "filename.dds" in the correct folder
		}
		colors = {
			##cardinality = 0..4
			<color_define>
			##cardinality = 0..4
			"null"
		}
	}
	## cardinality = 0..1
	name_list = <name_list>
	## cardinality = 0..1
	name_list = random
	## cardinality = 0..1
	###This presumably works (report if not)
	ship_prefix = scalar	#should be string or a scope
	## cardinality = 0..1
	released_from_country = scope[country]
	## push_scope = country
	## severity = warning
	#STNH do some interesting tricks, so I demoted it for their benefit.
	###this is required to spawn rebels for the rebellion to work in the first place
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

###Creates a new army
alias[effect:create_army] = {
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	name = random
	owner = scope[country]
	owner = last_created
	type = <army>
	## cardinality = 0..1
	species = scope[species]
	## cardinality = 0..1
	species = scope[pop]
	## cardinality = 0..1
	species = scope[country]
	## cardinality = 0..1
	species = enum[create_leader_species]
	## cardinality = 0..1
	species = <buildable_pop>
	## cardinality = 0..1
	leader = scope[leader]
}

###Creates a new leader for the scoped country
alias[effect:create_leader] = {
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	name = random
	class = enum[leader_classes]
	class = random
	## cardinality = 0..1
	###Other scopes will simply default to this.owner_main_species
	species = scope[species]	#<target / key>
	## cardinality = 0..1
	species = enum[create_leader_species]
	## cardinality = 0..1
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	leader_age_min = int
	## cardinality = 0..1
	leader_age_max = int	#should not be less than min...
	## cardinality = 0..1
	###Warning: This is in trigger_docs but is not used in this place in Vanilla, and might not work
	gender = enum[genders]
	## cardinality = 0..1
	###Warning: This is in trigger_docs but is not used in this place in Vanilla, and likely does not work
	set_age = int
	## cardinality = 0..1
	skill = random
	## cardinality = 0..1
	skill = int[1..10]
	## cardinality = 0..1
	immortal = bool
	## cardinality = 0..1
	event_leader = bool
	## cardinality = 0..1
	sub_type = enum[trait_ai_classes]
	## cardinality = 0..1
	traits = {
		## cardinality = 0..5
		add_trait = <trait.leader_trait>
		## cardinality = 0..5
		add_trait = random_trait
		## cardinality = 0..5
		trait = <trait.leader_trait>
		## cardinality = 0..5
		trait = random_trait
	}
	## cardinality = 0..1
	## push_scope = leader
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

enums = {
	enum[create_leader_species] = {
		this
		owner_main_species
		last_created
	}
}

#Same as create, but all optional except target
### Clones the last created leader for the scoped country
alias[effect:clone_leader] = {
	target = scope[leader]
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	name = random
	class = enum[leader_classes]
	## cardinality = 0..1
	species = scope[species]	#<target / key>
	## cardinality = 0..1
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	leader_age_min = int
	## cardinality = 0..1
	leader_age_max = int	#should not be less than min...
	## cardinality = 0..1
	###Warning: This is in trigger_docs but is not used in this place in Vanilla, and might not work
	gender = enum[genders]
	## cardinality = 0..1
	###Warning: This is in trigger_docs but is not used in this place in Vanilla, and likely does not work
	set_age = int
	## cardinality = 0..1
	skill = random
	## cardinality = 0..1
	skill = int[1..10]
	## cardinality = 0..1
	event_leader = bool
	#Not sure what other types there are
	## cardinality = 0..1
	sub_type = survey
	## cardinality = 0..1
	traits = {
		## cardinality = 0..5
		add_trait = <trait.leader_trait>
		## cardinality = 0..5
		add_trait = random_trait
		## cardinality = 0..5
		trait = <trait.leader_trait>
		## cardinality = 0..5
		trait = random_trait
	}
	## cardinality = 0..1
	## push_scope = leader
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

###Sets the age of the scoped leader
alias[effect:set_age] = int
###Creates a new, modified species based on an already-extant species
alias[effect:modify_species] = {
	## cardinality = 0..1
	species = scope[species]
	## cardinality = 0..1
	species = scope[country]
	## cardinality = 0..1
	species = scope[leader]
	## cardinality = 0..1
	species = scope[pop]
	## cardinality = 0..1
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	###new base species; default: auto (uses species)
	base = scope[any]
	## cardinality = 0..1
	base = auto
	## cardinality = 0..1
	base = none
	## cardinality = 0..10
	add_trait = <trait>
	## cardinality = 0..1
	add_traits_at_start_of_list = bool
	## cardinality = 0..10
	remove_trait = <trait>
	## cardinality = 0..1
	ideal_planet_class = scope[pop]
	## cardinality = 0..1
	ideal_planet_class = scope[planet]
	## cardinality = 0..1
	ideal_planet_class = scope[country]
	## cardinality = 0..1
	ideal_planet_class = <planet_class.habitable_planet>
	## cardinality = 0..1
	###modify scoped pops/planet/leader/country; default: yes
	change_scoped_species = bool
	## cardinality = 0..1
	portrait = scope[species]
	## cardinality = 0..1
	portrait = <portrait>
	## cardinality = 0..1
	portrait = <portrait_group>
	## cardinality = 0..1
	portrait = random
	## cardinality = 0..1
	hidden_effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

###Changes the species of the scoped object
alias[effect:change_species] = scope[species]
alias[effect:change_species] = scope[country]
alias[effect:change_species] = enum[create_leader_species]
###Changes the dominant species of the current Country, change_all also changes all usage of that species (Pops etc) in the empire
alias[effect:change_dominant_species] = {
	species = scope[species]
	species = scope[pop]
	species = enum[create_leader_species]
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	change_all = yes
}

###Changes the class of the scoped planet
alias[effect:change_pc] = <planet_class>
alias[effect:change_pc] = <planet_class_random_list>
alias[effect:change_pc] = {
	class = <planet_class>
	class = <planet_class_random_list>
	inherit_entity = bool
}

###Adds/Removes district slots to/from the scoped planet to adjust its planet size
alias[effect:set_planet_size] = int
###Adds a specific deposit to the scoped planet
alias[effect:add_deposit] = <deposit>
###Replaces resource deposit on the scoped planet
alias[effect:set_deposit] = <deposit>
###Removes all deposits from the scoped planet
alias[effect:clear_deposits] = yes
###Clear modifiers on target planet
alias[effect:clear_planet_modifiers] = yes
###Clears resources of a country
alias[effect:clear_resources] = yes
###Rebuild modifiers on target planet
alias[effect:reroll_planet_modifiers] = yes
###Silently establish communications between scoped country and target country
alias[effect:establish_communications_no_message] = scope[country]
###Establishes first contact between the scoped country and target country at the set location
alias[effect:establish_contact] = {
	who = scope[country]
	## cardinality = 0..1
	location = scope[system]
	## cardinality = 0..1
	location = scope[planet]
	## cardinality = 0..1
	location = scope[ship]
	## cardinality = 0..1
	location = scope[starbase]
}

###Changes scoped pop to chosen ethic
alias[effect:pop_change_ethic] = <ethos>
### Starts a situation log event chain for target country
alias[effect:begin_event_chain] = {
	event_chain = <event_chain>
	## cardinality = 0..2
	target = scope[country]
	## cardinality = 0..2
	target = scope[ship]
	## cardinality = 0..2
	target = scope[planet]
}

### Ends a specific situation log event chain for the scoped country
alias[effect:end_event_chain] = <event_chain>
### Increments (or decrements with negative values) an event chain counter for the scoped country by a specific amount
alias[effect:add_event_chain_counter] = {
	event_chain = <event_chain>
	counter = enum[event_chain_counter]
	amount = int
}

###Enables a specific special research project for target country at a specific location (should be same as the current scope where possible)
alias[effect:enable_special_project] = {
	name = <special_project>
	## cardinality = 0..1
	owner = scope[country]
	## cardinality = 0..1
	owner = scope[ship]
	## cardinality = 0..1
	owner = scope[planet]
	## cardinality = 0..1
	owner = scope[fleet]
	location = scope[planet]
	#	location = scope[system] #Caligula's note: Doesn't work (the project will not be researchable as it will have no precise location).
	location = scope[ship]
	location = scope[fleet]
	location = scope[ambient_object]
	location = scope[starbase]
}

###Aborts a specific special project for the country, removing it from the situation log
alias[effect:abort_special_project] = {
	type = <special_project>
	## cardinality = 0..1
	location = scope[planet]
	## cardinality = 0..1
	location = scope[system]
	## cardinality = 0..1
	location = scope[ship]
	## cardinality = 0..1
	location = scope[fleet]
	## cardinality = 0..1
	location = scope[starbase]
}

###Makes the scoped country remember that it has encountered the bypass type
alias[effect:add_seen_bypass_type] = <bypass>
###Spawns a new natural wormhole in the scoped system.
alias[effect:spawn_natural_wormhole] = {
	bypass_type = <bypass>
	## cardinality = 0..1
	orbit_distance = float
	## cardinality = 0..1
	orbit_angle = random
	## cardinality = 0..1
	orbit_angle = int[0..360]
	## cardinality = 0..1
	orbit_angle = {
		min = int[0..360]
		max = int[0..360]
	}
	## cardinality = 0..1
	random_pos = bool
}

###Link the wormhole from the scoped system to the wormhole in the target system.
alias[effect:link_wormholes] = scope[galactic_object]
###Executes an effect on systems with planets owned by the scoped country, starting at an origin, and until a certain percentage of owned planets matching the planet_limit has been covered.
alias[effect:effect_on_blob] = {
	center = scope[galactic_object]
	owned_planets_percentage = float[0.0..1.0]
	## push_scope = planet
	planet_limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## push_scope = system
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

###Assign the player of the target country to play the scoped country instead
alias[effect:set_player] = scope[country]
#Imported
#
#
#
#
#
#
#
#
### Activates the gateway associated with a megastructure.
alias[effect:activate_gateway] = scope[megastructure]
### Moves a saved leader to the active for the scoped country with a lookup key
alias[effect:activate_saved_leader] = {
	key = value[saved_leader]
	## cardinality = 0..1
	add_to_owned = bool
	## cardinality = 0..1
	## push_scope = leader
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

### Adds a specific anomaly category to the scoped planet
alias[effect:add_anomaly] = {
	category = <anomaly_category>
	## cardinality = 0..1
	target = scope[country]
}

### Adds an asteroid belt at the distance in the scope.
alias[effect:add_asteroid_belt] = {
	radius = int
	type = <asteroid_belt_type>
}

### Adds to ongoing colonization progress on the scoped planet
alias[effect:add_colony_progress] = float[0.0..1.0]
### Adds a specific global design to the game
alias[effect:add_global_ship_design] = <global_ship_design>
### Adds a hyperlane between two systems
alias[effect:add_hyperlane] = {
	from = scope[galactic_object]
	to = scope[galactic_object]
}

### Adds or subtracts progress to/from the scoped observation post's current mission
alias[effect:add_mission_progress] = float[0.0..1.0]
### Add a notification modifier to the country
alias[effect:add_notification_modifier] = <notification_modifier>
### Adds s random tech research option to the scoped country's tech view list, permanent until researched. if none applicable it runs fail_effects
alias[effect:add_random_research_option] = {
	## cardinality = 0..1
	category = <technology_category>
	## cardinality = 0..1
	area = enum[technology_areas]
	## cardinality = 0..1
	tier = <technology_tier>
	add_progress = float[0..1]
	## cardinality = 0..1
	fail_effects = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	###default no
	ignore_prereqs = bool
}

### Adds a tech research option to the scoped country's tech view list, permanent until researched
alias[effect:add_research_option] = <technology>
### Makes the scoped country remember that it has encountered the bypass
alias[effect:add_seen_bypass] = scope[any]##TODO bypass
### Adds a specific ship design to the scoped country
alias[effect:add_ship_design] = last_created_design#TODO check this
### Adds a sum of experience points to the scoped leader
alias[effect:add_skill] = int[-10..10]#check the interval
### Gives percentage progress (0.0-1.0) in a specific tech to the scoped country
alias[effect:add_tech_progress] = {
	tech = <technology>
	progress = float[0.0..1.0]
}

### Adds the specified tradition to the scoped country. add_tradition = <tradition_key>
alias[effect:add_tradition] = <tradition>
### Adds trust on scope country towards target country
alias[effect:add_trust] = {
	amount = float
	who = scope[country]
}

### Makes a fleet or ship auto-move to target fleet and potentially attack it
alias[effect:auto_follow_fleet] = {
	target = scope[fleet]
	attack_fleet = bool
}

### Makes a fleet or ship auto-move to target planet
alias[effect:auto_move_to_planet] = {
	target = scope[planet]
	target = scope[galactic_object]
	clear_auto_move_on_arrival = bool
	## cardinality = 0..1
	destroy_on_arrival = bool
	## cardinality = 0..1
	arrival_effect = <scripted_effect>
}

### Cancels terraformation of the scoped planet
alias[effect:cancel_terraformation] = bool
### Changes the scoped country's flag
alias[effect:change_country_flag] = random
### Changes the scoped country's flag
alias[effect:change_country_flag] = {
	icon = {
		category = scalar		#TODO should be a folder name. This needs to be corrected for create_country, create_rebels and prescripted_countries too (possibly more)
		file = scalar		#TODO should be "filename.dds" in the named folder
	}
	background = {
		category = scalar		#TODO should be a folder name
		file = scalar		#TODO should be "filename.dds" in the named folder
	}
	colors = {
		##cardinality = 0..4
		<color_define>
		##cardinality = 0..4
		"null"
	}
}

### Changes the portrait of the leader in scope.
###change_leader_portrait = <key or species event target>
alias[effect:change_leader_portrait] = scope[species]#TODO add "key"
alias[effect:change_leader_portrait] = scope[country]
alias[effect:change_leader_portrait] = <portrait>
alias[effect:change_leader_portrait] = <portrait_group>
### Changes the characteristics of a species
alias[effect:change_species_characteristics] = {
	## cardinality = 0..1
	###determines if species is pre-sapient
	sapient = bool
	## cardinality = 0..1
	###determines if species leaders are immortal
	immortal = bool
	## cardinality = 0..1
	###determines if pops of that species can colonize
	pops_can_be_colonizers = bool
	## cardinality = 0..1
	###determines if pops of that species can migrate
	pops_can_migrate = bool
	## cardinality = 0..1
	###determines if pops of that species can reproduce
	pops_can_reproduce = bool
	## cardinality = 0..1
	###determines if pops of that species can join factions
	pops_can_join_factions = bool
	## cardinality = 0..1
	###determines if that species can generate leaders
	can_generate_leaders = bool
	## cardinality = 0..1
	###determines if pops from that species can become slaves
	pops_can_be_slaves = bool
	## cardinality = 0..1
	###determines if pops from that species have happiness
	pops_have_happiness = bool
	## cardinality = 0..1
	###determines if pops from need consumer goods
	consumer_goods = bool
	## cardinality = 0..1
	###determines if the species can be modified
	can_be_modified = bool
	## cardinality = 0..1
	###speed at which the pops from that species grow automatically
	pops_auto_growth = float[0.0..1.0]
	## cardinality = 0..1
	###amount of energy each pop of that species consume monthly
	pop_maintenance = float[0.0..1.0]
	## cardinality = 0..1
	new_pop_resource_requirement = {
		type = <resource>
		type = robot_food
		type = scalar
		value = float
	}
	## cardinality = 0..1
	allow_negative_traits = bool
	## cardinality = 0..1
	extra_trait_points = int
	## cardinality = 0..1
	portrait = scope[species]
	## cardinality = 0..1
	portrait = <portrait>
	## cardinality = 0..1
	portrait = <portrait_group>
	## cardinality = 0..1
	portrait = random
}

### Re-evaluate the specified casus belli type with given target country
alias[effect:check_casus_belli_valid] = {
	## cardinality = 0..1
	target = scope[country]
	## cardinality = 0..1
	type = scope[country]
	## cardinality = 0..1
	type = <casus_belli>
}

### Clears all ethics of specified pop or country
alias[effect:clear_ethos] = yes
### Clears all queued fleet actions for target fleet
alias[effect:clear_fleet_actions] = scope[fleet]
### Deletes the specified saved global target reference
alias[effect:clear_global_event_target] = value[global_event_target]
### Deletes all saved global target references
alias[effect:clear_global_event_targets] = yes
### Clears all fleet orders from the scoped fleet
alias[effect:clear_orders] = yes
### Clears uncharted space from the galaxy map for the scoped country, in a radius around target system
alias[effect:clear_uncharted_space] = {
	from = scope[country]
	radius = int
}

### Clears uncharted space from the galaxy map for the scoped country, in a radius around target system
alias[effect:clear_uncharted_space] = scope[country]
### Conquers the planet by setting its owner to target country and adding an unhappiness modifier
alias[effect:conquer] = scope[country]
### Makes the scoped country copy the ethos and government authority of the target country.
alias[effect:copy_ethos_and_authority] = scope[country]
alias[effect:create_ambient_object] = {
	type = <ambient_object>
	## cardinality = 0..1
	location = scope[planet]
	## cardinality = 0..1
	location = scope[system]
	## cardinality = 0..1
	location = scope[ship]
	## cardinality = 0..1
	location = scope[ambient_object]
	## cardinality = 0..1
	location = scope[fleet]
	## cardinality = 0..1
	location = scope[megastructure]
	## cardinality = 0..1
	location = scope[starbase]
	## cardinality = 0..1
	scale = float
	## cardinality = 0..1
	use_3d_location = bool
	## cardinality = 0..1
	entity_offset = int
	## cardinality = 0..1
	entity_offset = {
		min = int
		max = int
	}
	## cardinality = 0..1
	entity_offset_angle = int
	## cardinality = 0..1
	entity_offset_angle = {
		min = int
		max = int
	}
	## cardinality = 0..1
	entity_offset_height = int
	## cardinality = 0..1
	entity_offset_height = {
		min = int
		max = int
	}
	## cardinality = 0..1
	base_angle_towards = scope[planet]
	## cardinality = 0..1
	base_angle_towards = scope[planet]
	## cardinality = 0..1
	entity_face_object = scope[planet]
	## cardinality = 0..1
	entity_face_object = scope[system]
	## cardinality = 0..1
	entity_scale_to_size = bool
	## cardinality = 0..1
	###What does this do? Tell Caligula and Dayshine
	target = scalar
	## cardinality = 0..1
	duration = int
}

### Creates a new army in a new transport ship
alias[effect:create_army_transport] = {
	##cardinality = 0..1
	graphical_culture = <graphical_culture>
	army_type = <army>
	##cardinality = 0..1
	ship_name = localisation_synced
	##cardinality = 0..1
	army_name = localisation_synced
	##cardinality = 0..1
	species = scope[species]
	##cardinality = 0..1
	species = enum[buildable_pop_species]
}

#
### Creates a bypass in the parent SpatialObject (stored in FromFrom), of the type passed in "type".
alias[effect:create_bypass] = <bypass>
#
### Creates a cluster centered around the specified spatial object
alias[effect:create_cluster] = {
	id = scalar
	radius = int
	center = scope[system]
}

### Creates a colony on the scoped planet
alias[effect:create_colony] = {
	owner = scope[country]
	##cardinality = 0..1
	species = scope[species]
	##cardinality = 0..1
	species = scope[country]
	##cardinality = 0..1
	species = scope[pop]
	##cardinality = 0..1
	species = enum[buildable_pop_species]
	##cardinality = 0..1
	species = scalar	#key
	##cardinality = 0..1
	ethos = random
	##cardinality = 0..1
	# Specifically this keyword, not all scopes
	ethos = owner
	##cardinality = 0..1
	ethos = {
		##cardinality = 2..3
		ethic = <ethos>
	}
}

#create_fleet = { name = <string> effect = { <create_ship, set_owner, set_location etc effects go here> } }
### Creates a new fleet
alias[effect:create_fleet] = {
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	name = scope[fleet]
	## cardinality = 0..1
	set_take_point = bool
	## cardinality = 0..1
	settings = {
		## cardinality = 0..1
		spawn_debris = bool
		## cardinality = 0..1
		garrison = bool
		## cardinality = 0..1
		can_upgrade = bool
		## cardinality = 0..1
		can_disband = bool
		## cardinality = 0..1
		can_change_composition = bool
		## cardinality = 0..1
		can_change_leader = bool
		## cardinality = 0..1
		uses_naval_capacity = bool
		## cardinality = 0..1
		is_boss = bool
		## cardinality = 0..1
		ai_ignore_strength = bool
	}
	## push_scope = fleet
	## cardinality = 0..1
	###Must include set_owner, set_location and create_ship (here or in last_created_country). Todo: Check this somehow
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

#create_message = { type = BYPASS_EXPLORED localization = BYPASS_EXPLORED_MESSAGE days = 30 target = root variable = { type = name localization = SYSTEM1 scope = from } variable = { type = name localization = SYSTEM2 scope = fromfrom } }
### Creates a message, can take multiple variables
alias[effect:create_message] = {
	type = scalar
	localization = localisation
	days = int
	target = scope[any]
	## cardinality = 0..100
	variable = {
		type = name
		type = variable
		## cardinality = 0..1
		variable = value[variable]
		localization = scalar		#not localisation, but rather something that can be used in localisation
		scope = scope[any]
	}
}

#
### Creates a military fleet with the designs of a specified country. Tell Caligula what this does.
alias[effect:create_military_fleet] = scope[country]
### Creates a mining station in orbit of the scoped planet
alias[effect:create_mining_station] = {
	owner = scope[country]
	owner = scope[ship]
}

### Creates a point of interest for the scoped country at a specific location, associated with an event chain
alias[effect:create_point_of_interest] = {
	id = value_set[point_of_interest]
	## cardinality = 1..1
	## severity = info
	###Leaving out "name" gives a blank button that looks really terrible and unprofessional. Don't do it :P
	name = localisation
	#The last comment does not apply here.
	## cardinality = 0..1
	desc = localisation
	event_chain = <event_chain>
	## severity = warning
	location = scope[planet]
	## severity = warning
	location = scope[system]
	## severity = warning
	location = scope[fleet]
	## cardinality = 0..1
	location = scope[megastructure]
	## cardinality = 0..1
	location = scope[starbase]
	## cardinality = 0..1
	category = scalar
}

### Creates a new pop on the scoped tile/planet
alias[effect:create_pop] = {
	species = scope[species]
	species = scope[country]
	species = scope[pop]
	species = enum[buildable_pop_species]
	species = scalar	#key
	## cardinality = 0..1
	ethos = random
	## cardinality = 0..1
	ethos = scope[pop]
	## cardinality = 0..1
	ethos = scope[country]
	## cardinality = 0..1
	ethos = {
		## cardinality = 1..1
		ethic = <ethos>
	}
}

### Creates a research station in orbit of the scoped planet
alias[effect:create_research_station] = {
	owner = scope[country]
}

### Creates a new saved leader for the scoped country with a lookup key
alias[effect:create_saved_leader] = {
	key = value_set[saved_leader]
	## cardinality = 0..1
	creator = scope[country]
	## cardinality = 0..1
	name = random
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	gender = enum[genders]
	class = random
	class = enum[leader_classes]
	species = scope[country]
	species = scope[species]	#<target / key>
	species = enum[create_leader_species]
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	event_leader = bool
	## cardinality = 0..1
	set_age = int
	## cardinality = 0..1
	skill = random
	## cardinality = 0..1
	skill = int[1..10]
	## cardinality = 0..1
	traits = {
		## cardinality = 0..5
		add_trait = <trait.leader_trait>
		## cardinality = 0..5
		add_trait = random_trait
		## cardinality = 0..5
		trait = <trait.leader_trait>
		## cardinality = 0..5
		trait = random_trait
	}
	## push_scope = leader
	## cardinality = 0..1
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

# ### Creates a sector with a specific capital planet, of a specific type, and with optional additional systems within the #scoped country
#alias[effect:create_sector] = {
#	capital = scope[planet]
#	type = <sector_type>
#	## cardinality = 0..100
#	add = scope[system]
#}
### Creates a new ship
alias[effect:create_ship] = {
	## cardinality = 0..1
	name = random
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	name = scope[ship]
	## severity = warning
	## cardinality = 0..1
	design = last_created_design
	## severity = warning
	## cardinality = 0..1
	design = <global_ship_design>
	## severity = warning
	## cardinality = 0..1
	# Hack to handle named designs
	design = localisation
	## cardinality = 0..1
	random_existing_design = <ship_size>
	## cardinality = 0..1
	prefix = bool
	## cardinality = 0..1
	graphical_culture = <graphical_culture>
	## cardinality = 0..1
	graphical_culture = scope[country]
	## cardinality = 0..1
	upgradable = bool
	## cardinality = 0..1
	###Used if the created ship is a colony ship
	colonizer_species = scope[species]
	## cardinality = 0..1
	## push_scope = ship
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

### Creates a new ship design for use with last_created_design target
alias[effect:create_ship_design] = {
	design = localisation_synced
}

### Trigger an assertion to stop the debugger when encountering this effect; argument is ignored
alias[effect:debug_break] = yes
### Deletes the target mega structure (no death graphics)
alias[effect:delete_megastructure] = scope[megastructure]
### Dismantles the scoped orbital station (fleet)
alias[effect:dismantle] = yes
### Force-end rivalry with target country
alias[effect:end_rivalry] = scope[country]
### Send endgame telemetry event
alias[effect:endgame_telemetry] = scalar
### Establish communications between scoped country and target country
alias[effect:establish_communications] = scope[country]
### Finish the current upgrade of a Mega Structure.
alias[effect:finish_upgrade] = yes
### Sends a fleet to research a special project
###fleet_action_research_special_project = { special_project = test_project target = event_target:project_planet }
alias[effect:fleet_action_research_special_project] = {
	special_project = <special_project>
	target = scope[planet]
}

### Forces target pop to immediately evaluate their attraction to various pop factions
alias[effect:force_faction_evaluation] = yes
### Copies a value from the galaxy setup into a variable, optionally scaling it by an int value
###get_galaxy_setup_value = { which = <string> setting = <string> [ scale = <int> ] }
alias[effect:get_galaxy_setup_value] = {
	which = value_set[variable]
	setting = enum[galaxy_setup_values]
	## cardinality = 0..1
	scale_by = int
}

### Makes a country guarantee another country
alias[effect:guarantee_country] = scope[country]
### Makes a country guarantee another country
alias[effect:guarantee_country] = {
	target = scope[country]
	free_guarantee_days = int
}

#inverted_switch = {
# 	trigger = <trigger>
# 	<corresponding key/bool/int> = { <effect> }
# 	<corresponding key/bool/int> > (less/greater than appear 'reversed') { <effect> }
# 	default = { <effect> }
# }
### Executes the first appropriate effect set for a specific trigger treated as NOT.
alias[effect:inverted_switch] = {
	trigger = alias_keys_field[trigger]
	## cardinality = 0..inf
	scalar = {
		## cardinality = 0..inf
		alias_name[effect] = alias_match_left[effect]
	}
}

### Join federation with target
alias[effect:join_alliance] = {
	who = scope[country]
	override_requirements = bool
	## cardinality = 0..1
	name = localisation_synced
}

### Removes scoped country from any alliances it is in
alias[effect:leave_alliance] = {
	override_requirements = bool
}

### Prints a message to game.log for debugging purposes.
alias[effect:log] = {
	alias_name[effect] = alias_match_left[effect]
}

### Prints a message to game.log for debugging purposes.
alias[effect:log] = scalar
### Modifies army with parameters:
alias[effect:modify_army] = {
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	owner = scope[country]
	## cardinality = 0..1
	species = scope[species]
	## cardinality = 0..1
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	type = <army>
}

# ### Moves a pop from a tile to another
#alias[effect:move_pop] = scope[planet]
### Randomly mutate a species.
alias[effect:mutate_species] = yes
## push_scope = fleet
### Executes enclosed effects on every observation post in the game that meets the limit criteria
alias[effect:observation_outpost] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

### Forces scoped fleet to retreat to friendly territory
alias[effect:order_forced_return] = yes
### Play the defined sound effect
alias[effect:play_sound] = <sound_effect>
### Adds a specific ethic to the scoped pop regardless if pop-species allows ethic divergence or not.
alias[effect:pop_force_add_ethic] = <ethos>
### Removes a specific ethic from the scoped pop
alias[effect:pop_remove_ethic] = <ethos>
### Disables or enables anomaly generation for the scoped planet
alias[effect:prevent_anomaly] = bool
#randomize_flag_symbol = pirate
### Randomizes a country's flag symbol within the selected category
alias[effect:randomize_flag_symbol] = scalar#TODO pirate
### Removes all armies on scoped planet
alias[effect:remove_all_armies] = yes
### Removes the scoped army
alias[effect:remove_army] = yes
### Makes a fleet or ship stop auto-moving
alias[effect:remove_auto_move_target] = yes
### Removes existing hyperlane between two systems
alias[effect:remove_hyperlane] = {
	from = scope[galactic_object]
	to = scope[galactic_object]
}

### Remove a notification modifier to the country
alias[effect:remove_notification_modifier] = <notification_modifier>
# ### Removes the orbital deposit slot from the scoped planet
#alias[effect:remove_orbital_deposit] = yes
### Removes a specific point of interest from the scoped country's situation log
alias[effect:remove_point_of_interest] = value[point_of_interest]
### Removes a specific ruler trait from the scoped leader, even if they are not currently ruler; this is relevant if they ever become ruler
alias[effect:remove_ruler_trait] = <trait>#TODO ruler trait
### Removes a saved leader for the scoped country with a lookup key
alias[effect:remove_saved_leader] = value[saved_leader]
#use one of the following:
# 	name = "an explicit name with [Bracket.Stuff]"
# 	name = random
# 	name_list = "key"
# }
### rename_species = {
alias[effect:rename_species] = {
	## cardinality = 0..1
	prompt_country = prev
	## cardinality = 0..1
	name = scalar
	## cardinality = 0..1
	###Name lists defined in the name_lists folder might not work (where would it get the name from?). Rather, Vanilla uses ones defined in species_names. Let Dayshine and Caligula know if ones in name_lists work. (Same with name_list = random and name_list = country).
	name_list = <species_named_list>
}

#TODO
### Restores all hull points to the scoped ship
alias[effect:repair_percentage] = float
### Restores all hull points to the scoped ship
alias[effect:repair_ship] = yes
### Resets years of peace for a country.
alias[effect:reset_years_of_peace] = yes
### Runs strategic data for AI
alias[effect:run_ai_strategic_data] = yes
### Enables or disables the VIR window pop-in
alias[effect:set_advisor_active] = bool
### Sets the scoped fleet/country's aggro range in intra-system units
alias[effect:set_aggro_range] = int
### Determines whether the scoped fleet/country's aggro range is measured from the fleet's current position or its spawn location
alias[effect:set_aggro_range_measure_from] = enum[aggro_range_measure_from]
alias[effect:set_aggro_range_measure_from] = scope[planet]
alias[effect:set_aggro_range_measure_from] = scope[galactic_object]
alias[effect:set_aggro_range_measure_from] = scope[starbase]
alias[effect:set_aggro_range_measure_from] = scope[megastructure]
alias[effect:set_aggro_range_measure_from] = scope[fleet]
alias[effect:set_aggro_range_measure_from] = scope[ship]
enums = {
	enum[aggro_range_measure_from] = {
		self
		return_point
	}
}

### Sets an asteroid belt at the distance in the scope.
alias[effect:set_asteroid_belt] = {
	## cardinality = 0..1
	radius = float
	## cardinality = 0..1
	type = <asteroid_belt_type>
}

### Sets the scoped planet to be the capital of its owner country
alias[effect:set_capital] = yes
### Sets the scoped country's city graphical culture
alias[effect:set_city_graphical_culture] = <graphical_culture>
### Changes the country type of the scoped country
alias[effect:set_country_type] = <country_type>
### Sets the crisis ambient loop to the current effect
alias[effect:set_crisis_sound] = scalar#TODO sound
### Sets a custom spatial object as custom country capital location.
alias[effect:set_custom_capital_location] = scope[any]
### Sets the scoped ship to become disabled at a certain hull point percentage
alias[effect:set_disable_at_health] = float[0.0..1.0]
### Enables or disables the scoped ship
alias[effect:set_disabled] = bool
### Sets the flag of the current Empire.
alias[effect:set_empire_flag] = scalar#TODO
### Sets the name of the current Empire.
alias[effect:set_empire_name] = scalar
### Silently disables the scoped fleet to prevent player action, remember to unlock at the end of the event
alias[effect:set_event_locked] = bool
### Sets the aggro state of the scoped faction-type country
alias[effect:set_faction_hostility] = {
	##cardinality = 0..1
	target = scope[country]
	##cardinality = 0..1
	set_hostile = bool
	##cardinality = 0..1
	set_neutral = bool
	##cardinality = 0..1
	set_friendly = bool
}

#
### Sets a country to lead a federation
alias[effect:set_federation_leader] = scalar#TODO unknown unsage
### Sets the bombardment stance of the scoped fleet
alias[effect:set_fleet_bombardment_stance] = <bombardment_stance>
### Sets a custom fleet formation on a fleet. set_fleet_formation = { position = { x = 1 y = 1 } position = { x = 2 y = 1 } }
alias[effect:set_fleet_formation] = {
	## cardinality = 0..100
	position = {
		x = float
		y = float
	}
}

### Sets the stance of the scoped fleet
alias[effect:set_fleet_stance] = enum[fleet_stance]
### Scales the scoped fleet's formation's ship spacing, above and below 1.0
alias[effect:set_formation_scale] = float
### Sets the mega structure upgrade to halted status for n days
alias[effect:set_halted] = int
### Sets the target leader to be the scoped country's heir
alias[effect:set_heir] = scope[leader]
### Set the home base of the scoped fleet to the specified starbase
alias[effect:set_home_base] = scope[ship]
### Sets the current mission of an observation station
alias[effect:set_mission] = <observation_station_mission>
### Change entity of a planet.
alias[effect:set_planet_entity] = {
	## cardinality = 0..1
	entity = scalar	#TODO: Link this to graphical culture <model_entity>
	## cardinality = 0..1
	graphical_culture = <graphical_culture>
	## cardinality = 0..1
	graphical_culture = scope[any]
	## cardinality = 0..1
	picture = scalar	#filepath #TODO picture
	## cardinality = 0..1
	atmosphere_color = scalar	#TODO color
	## cardinality = 0..1
	atmosphere_intensity = float[0.0..1.0]
	## cardinality = 0..1
	atmosphere_width = float[0.0..1.0]
}

### Sets the name of the current planet.
alias[effect:set_planet_name] = scalar
### Sets a policy to a specific option for the scoped country and specifies if policy cooldown should go into effect
alias[effect:set_policy] = {
	policy = <policy>
	option = enum[policy_option]
	cooldown = bool
}

### Sets the scoped pop to belong to a specific pop faction
alias[effect:set_pop_faction] = <pop_faction>
### [DEPRECATED, USE SET_COUNTRY_TYPE] Sets the scoped country as primitive
alias[effect:set_primitive] = bool
### Sets a 'primitive age' for the scoped (primitive, pre-FTL) country
alias[effect:set_primitive_age] = localisation
enums = {
	enum[primitive_ages] = {
		stone_age
		bronze_age
		iron_age
		late_medieval_age
		renaissance_age
		steam_age
		industrial_age
		machine_age
		atomic_age
		early_space_age
	}
}

### Adds or removes a planetary ring around the scoped planet
alias[effect:set_ring] = bool
### Sets the scoped leader's level
alias[effect:set_skill] = int
### Optimizes the calls for spawn_system effect.
###Spawn system should be located in a block between Begin and End.
###Begin: set_spawn_system_batch = begin
###End: set_spawn_system_batch = end
alias[effect:set_spawn_system_batch] = enum[spawn_system_batch]
enums = {
	enum[spawn_system_batch] = {
		begin
		end
	}
}

### Defines a homeworld for the current species.
alias[effect:set_species_homeworld] = scope[planet]
### Sets the current species scopes identity to match the target scopes making them evaluate as the same species in is_same_species trigger.
alias[effect:set_species_identity] = scope[species]
### Sets a building in a slot on a starbase
alias[effect:set_starbase_building] = {
	slot = int
	building = <starbase_building>
}

### Sets a module in a slot on a starbase
alias[effect:set_starbase_module] = {
	slot = int
	module = <starbase_module>
}

### Sets the ship size of a starbase
alias[effect:set_starbase_size] = <ship_size>#TODO starbase ship_size
### Changes the scoped country's tutorial level
alias[effect:set_tutorial_level] = enum[tutorial_levels]
### Spawns a mega structure in a system.
alias[effect:spawn_megastructure] = {
	type = <megastructure>
	## cardinality = 0..1
	location = scope[planet]
	## cardinality = 0..1
	location = scope[system]
	## cardinality = 0..1
	name = localisation_synced
	## cardinality = 0..1
	orbit_angle = random
	## cardinality = 0..1
	orbit_angle = int[0..360]
	## cardinality = 0..1
	orbit_angle = {
		min = int[0..360]
		max = int[0..360]
	}
	## cardinality = 0..1
	orbit_distance = float
	## cardinality = 0..1
	owner = scope[country]
	## cardinality = 0..1
	graphical_culture = <graphical_culture>
	## cardinality = 0..1
	graphical_culture = scope[megastructure]
	## cardinality = 0..1
	graphical_culture = scope[ship]
	## cardinality = 0..1
	random_pos = bool
	## cardinality = 0..1
	## push_scope = megastructure
	init_effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

### Spawns a planet in a system.
alias[effect:spawn_planet] = {
	class = <planet_class>
	class = <planet_class_random_list>
	## cardinality = 0..1
	location = scope[system]
	## cardinality = 0..1
	location = scope[planet]
	## cardinality = 0..1
	location = scope[megastructure]
	## cardinality = 0..1
	orbit_location = bool
	## cardinality = 0..1
	orbit_distance = float
	## cardinality = 0..1
	orbit_distance_offset = float
	## cardinality = 0..1
	size = int
	##cardinality = 0..1
	size = random
	## cardinality = 0..1
	has_ring = bool
	## cardinality = 0..1
	orbit_angle = random
	## cardinality = 0..1
	orbit_angle = float
	## cardinality = 0..1
	orbit_angle_offset = int
	## cardinality = 0..1
	## push_scope = planet
	init_effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}

### Spawns a new system at a position relative to the scoped system/planet/ship.
alias[effect:spawn_system] = {
	## cardinality = 0..1
	min_distance = float
	## cardinality = 0..1
	max_distance = float
	## cardinality = 0..1
	min_jumps = int[0..1000]
	## cardinality = 0..1
	max_jumps = int[0..1000]
	initializer = <solar_system_initializer>
	## cardinality = 0..1
	hyperlane = bool
	## cardinality = 0..1
	is_discovered = bool
	## cardinality = 0..1
	min_orientation_angle = float
	## cardinality = 0..1
	max_orientation_angle = float
}

### Starts colonization of the scoped planet
alias[effect:start_colony] = {
	owner = scope[country]
	## cardinality = 0..1
	species = scope[species]
	## cardinality = 0..1
	species = scope[country]
	## cardinality = 0..1
	species = scope[pop]
	## cardinality = 0..1
	species = enum[buildable_pop_species]
	## cardinality = 0..1
	species = scalar	#key
	## cardinality = 0..1
	ethos = scope[species]	#Yes, this is correct. No, I don't know why.
	## cardinality = 0..1
	ethos = {
		## cardinality = 1..10
		ethic = <ethos>
	}
	## cardinality = 0..1
	ethos = random
}

### Stops the crisis ambient loop
alias[effect:stop_crisis_sound] = yes
### Executes the first appropriate effect set for a specific trigger
alias[effect:switch] = {
	trigger = alias_keys_field[trigger]
	## cardinality = 0..inf
	scalar = {
		## cardinality = 0..inf
		alias_name[effect] = alias_match_left[effect]
	}
}

#
### Just a tooltip (shows the effect but does not run it)
alias[effect:tooltip] = {
	alias_name[effect] = alias_match_left[effect]
}

### if a planet has trigger_megastructure_icon = yes then the map icon for the star will show a megastructure icon
alias[effect:trigger_megastructure_icon] = yes
### Starts an upgrade process on a mega structure. upgrade_megastructure_to = <new_type>
alias[effect:upgrade_megastructure_to] = <megastructure>
#2.2
###Adds specific resource to the stockpile for the country scope
alias[effect:add_resource] = {
	## cardinality = 1..inf
	<resource> = float
}

###Remove resource deposit on the scoped planet or deposit, does not fire on_cleared if used on a blocker
alias[effect:remove_deposit] = yes
alias[effect:remove_deposit] = <deposit>
###Fires scoped pop from its job
alias[effect:unemploy_pop] = yes
###Immediately runs a job evaluation on the planet, firing and employing pops as needed
alias[effect:check_planet_employment] = yes
## scope = pop
###Resets category of a pop
alias[effect:clear_pop_category] = yes
###Adds random non-blocker resource deposit to the scoped planet
alias[effect:add_random_non_blocker_deposit] = yes
###Removes last built building from the scoped planet
alias[effect:remove_last_built_building] = yes
###Removes all buildings from the scoped planet
alias[effect:remove_all_buildings] = yes
###Instantly adds devastation to scoped planet
alias[effect:add_planet_devastation] = int[-100..100]
## scope = any
###Creates a new pop from a half-species on the planet
alias[effect:create_half_species] = {
	#todo: there's probably a few more things you can use here, I'm guessing!
	species_one = scope[species]
	species_two = scope[species]
}

###Forces target planet or country to calculate its internal modifier
alias[effect:calculate_modifier] = yes
###Establish branch office on scoped planet for target country
alias[effect:establish_branch_office] = scope[country]
###Close branch office on scoped planet
alias[effect:close_branch_office] = yes
###Removes all blockers from the scoped planet
alias[effect:clear_blockers] = yes
###Changes the built species of the scoped object
alias[effect:set_built_species] = scope[species]
###Removes last built district from the scoped planet
alias[effect:remove_last_built_district] = yes
###Removes all district from the scoped planet
alias[effect:remove_all_districts] = yes
###Removes a specific district from the scoped planet
alias[effect:remove_district] = <district>
###Begins construction of a specific district on the scoped planet
alias[effect:add_district] = <district>
###Begins construction of a specific district on the scoped planet
alias[effect:add_district] = {
	district_type = <district>
	ignore_cap = yes
}

###Enables a resource on the Galactic Market
alias[effect:enable_on_market] = <resource>
###Enables the galactic market. enable_galactic_market = <yes/no>
alias[effect:enable_galactic_market] = bool
###Rebuild modifiers on target planet
alias[effect:validate_planet_buildings_and_districts] = yes
###Clears scoped deposit blocker and fires its on_cleared effect
alias[effect:clear_blocker] = yes
###Changes the portrait of the species in scope.
alias[effect:change_species_portrait] = scope[species]
alias[effect:change_species_portrait] = <portrait>
alias[effect:change_species_portrait] = <portrait_group>
alias[effect:change_species_portrait] = random
###Rebuild resource deposits on target planet
alias[effect:reroll_deposits] = yes
#2.3
###Creates a archaeological site associated with the scope object
alias[effect:create_archaeological_site] = <archaeological_site_type>
###Destroys a archaeological site in right hand site event target
alias[effect:destroy_archaeological_site] = scope[planet]
###Adds clues to the current stage of a archaeological site
alias[effect:add_stage_clues] = int
alias[effect:add_expedition_log_entry] = who_knows_tell_us_please
###Resets the current stage
alias[effect:reset_current_stage] = yes
###Finish the current stage
alias[effect:finish_current_stage] = yes
###Finish the current stage. yes = trigger stage completed for each stage and current excavator. no = do not trigger any stage completed. country = use this country instead of excavator, no stage complete will be triggered.
alias[effect:finish_site] = bool
###Finish the current stage. yes = trigger stage completed for each stage and current excavator. no = do not trigger any stage completed. country = use this country instead of excavator, no stage complete will be triggered.
alias[effect:finish_site] = country
###Locks or unlocks the progress of a site
alias[effect:set_site_progress_locked] = bool
###Displays a specific localization string with parameters in tooltip
alias[effect:custom_tooltip_with_params] = {
	description = localisation
	description_parameters = {
		## cardinality = 1..inf
		scalar = scalar
	}
}

###Adds the specified relic to the scoped country. add_relic = <relic_key>
alias[effect:add_relic] = <relic>
###Removes the specified relic from the scoped country. remove_relic = <relic_key>
alias[effect:remove_relic] = <relic>
###Makes the archaeological site event expire
alias[effect:expire_site_event] = <event.fleet>
#2.5.1 (or missing from earlier)
###Adds a specific trait to the scoped leader for a specific duration
alias[effect:add_timed_trait] = {
	trait = <trait>
	enum[days_months_years] = int
}

###Recomputes strategic war ( attack / defense ) data for AI = yes
alias[effect:run_ai_strategic_war_data] = yes
###Set scoped country as the current Galactic Market leader. set_market_leader = <yes/no>
alias[effect:set_market_leader] = bool
###Steal all/a random/a specific relic from a target country
alias[effect:steal_relic] = {
	target = scope[country]
	relic = <relic>
	relic = all
	relic = random
}
