
types = {
	## graph_related_types = { event special_project }
	type[anomaly_category] = {
		path = "game/common/anomalies"
		localisation = {
			## required
			Name = "$"
		}
	}
	type[archaeological_site_type] = {
		path = "game/common/archaeological_site_types"
		localisation = {
			## required
			Name = "$"
		}
	}
	type[relic] = {
		path = "game/common/relics"
		localisation = {
			## required
			Name = "$"
			## required
			Desc = "$_desc"
		}
	}
	type[artifact_action] = {
		path = "game/common/artifact_action"
		localisation = {
			## required
			Name = "$"
			## required
			Desc = "$_desc"
		}
	}
}


anomaly_category = {
	## cardinality = 0..1
	###Yes makes the anomaly exclusively used by the AI, no by the player. Default: no
	should_ai_use = bool

	###If set to yes, this allows both the player and the AI to use the anomaly
	## cardinality = 0..1
	should_ai_and_humans_use = bool

	## cardinality = 0..1
	###Optional. Will use <anomaly_category>_description if not specified.
	desc = localisation
	## cardinality = 0..inf
	## replace_scope = { root = planet this = planet from = ship }
	desc = {
		### Scope: planet, from = ship
		trigger = { alias_name[trigger] = alias_match_left[trigger] }
		text = localisation
	}
	## cardinality = 0..1
	###Picture displayed in category window
	picture = <sprite>

	###Anomaly level, 1 to 10
	level = int[1..10]

	## cardinality = 0..1
	###Default 0. 0.0 - 1.0 (0 to 100%) chance category will NOT spawn even if it is picked by the anomaly die roll. Used to make categories for unusual objects (e.g. black holes) actually rare.
	null_spawn_chance = float[0.0...1.0]

	## cardinality = 0..1
	###default NO, if true will spawn category only once per empire
	max_once = bool

	## cardinality = 0..1
	###default NO, if true will spawn category only once per game
	max_once_global = bool

	###Chance for this anomaly category to spawn, relative to other valid categories. Default: base = 0. Scope: planet, from = ship
	## replace_scope = { root = planet this = planet from = ship }
	spawn_chance = {
		## cardinality = 0..1
		base = float
		## cardinality = 0..inf
		alias_name[modifier_rule_add_factor] = alias_match_left[modifier_rule_add_factor]
	}

	## cardinality = 0..1
	## replace_scope = { root = planet this = planet from = ship }
	###Executes immediately when anomaly category is spawned. Scopes are this/root: planet, from: ship. NOTE: on_spawn effects will not run if category is spawned through console
	on_spawn = { alias_name[effect] = alias_match_left[effect] }

	###Picks anomaly event to fire; similar to random_list
	on_success = <event.ship>
	on_success = {
		## cardinality = 0..100
		int = <event.ship>
		## cardinality = 0..100
		int = {
			## cardinality = 0..1
			###Individual outcomes default to max_once = yes
			max_once = bool
			## cardinality = 0..1
			###Individual outcomes default to max_once_global = no
			max_once_global = bool

			alias_name[modifier_rule_add_factor] = alias_match_left[modifier_rule_add_factor]

			anomaly_event = <event.ship>
		}
	}
}




relic = {
	activation_duration = int[0..inf]
	portrait = <sprite>
	sound = <sound_effect>

	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}


	## cardinality = 0..1
	ai_weight = {
		enum[factor_weight] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	alias_name[triggered_country_modifier_country] = alias_match_left[triggered_country_modifier_country]

	score = int[0..inf]

	## replace_scope = { root = country this = country }
	active_effect = {
		alias_name[effect] = alias_match_left[effect]
	}

	### Possible check for activation
	## replace_scope = { root = country this = country }
	possible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

## push_scope = archaeological_site
archaeological_site_type = {
	## cardinality = 0..1
	picture = <sprite>
	## cardinality = 1..inf
	desc = localisation
	## cardinality = 1..inf
	desc = {
		## replace_scope = { this = archaeological_site root = archaeological_site }
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		text = localisation
	}
	## cardinality = 0..1
	max_instances = int[1..inf]
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	weight = {
		base = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	## cardinality = 0..1
	weight = int
	stages = int[1..inf]

	## cardinality = 0..1
	## replace_scope = { root = fleet this = fleet from = archaeological_site }
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## replace_scope = { root = fleet this = fleet from = archaeological_site }
	allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## replace_scope = { root = country this = country from = archaeological_site }
	visible = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..inf
	stage = {
		difficulty = int[-inf..inf]
		difficulty = {
			min = int[-inf..inf]
			max = int[-inf..inf]
		}
		icon = <sprite>
		event = <event.fleet>
	}

	## replace_scope = { root = fleet this = fleet from = archaeological_site }
	on_roll_failed = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	## replace_scope = { root = archaeological_site this = archaeological_site }
	on_create = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	## replace_scope = { root = country this = country from = archaeological_site }
	on_visible = {
		alias_name[effect] = alias_match_left[effect]
	}
}

## push_scope = country
artifact_action = {
	## cardinality = 0..1
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	ai_weight = {
		enum[factor_weight] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}
