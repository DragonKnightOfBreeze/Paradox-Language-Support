{
	parserClass="icu.windea.pls.script.psi.ParadoxScriptParser"
	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
	psiClassPrefix="ParadoxScript"
	psiImplClassSuffix="Impl"
	psiPackage="icu.windea.pls.script.psi"
	psiImplPackage="icu.windea.pls.script.psi.impl"
	elementTypeHolderClass="icu.windea.pls.script.psi.ParadoxScriptElementTypes"
	elementTypeClass="icu.windea.pls.script.psi.ParadoxScriptElementType"
	tokenTypeClass="icu.windea.pls.script.psi.ParadoxScriptTokenType"
    elementTypeFactory="icu.windea.pls.script.psi.ParadoxScriptElementTypeFactory.getElementType"
	tokenTypeFactory="icu.windea.pls.script.psi.ParadoxScriptElementTypeFactory.getTokenType"
	psiImplUtilClass="icu.windea.pls.script.psi.impl.ParadoxScriptPsiImplUtil"
}

//忽略空白，在ParserDefinition里面定义PsiElement之间的空白类型
//regex必须定向到token，而非rule
//即使idea提示不需要转义，一些字符在regexp中仍然需要转义

//DONE 列表的元素可以是字符串
//DONE 分隔符可以是比较运算符

root ::= root_block ?
root_block ::= root_block_item + {
  implements="icu.windea.pls.script.psi.IParadoxScriptBlock"
  methods=[getValue isEmpty isNotEmpty getComponents]
}
private root_block_item ::=  END_OF_LINE_COMMENT | COMMENT | property | value | variable

variable ::= variable_name variable_separator variable_value {
  pin=1
  recoverWhile="#auto"
  extends="icu.windea.pls.script.psi.impl.ParadoxScriptStubElementImpl<?>"
  implements=[
    "icu.windea.pls.script.psi.ParadoxScriptNamedElement"
    "icu.windea.pls.script.psi.ParadoxScriptExpression"
  ]
  stubClass="icu.windea.pls.script.psi.ParadoxScriptVariableStub"
  methods=[getIcon getName setName getNameIdentifier getTextOffset getValue getUnquotedValue getValueType]
}

variable_name ::= AT VARIABLE_NAME_ID{
  methods=[getName]
}
private variable_separator ::= EQUAL_SIGN
variable_value ::= number {
  methods=[getValue]
}

property ::= property_key property_separator property_value {
  pin=1
  recoverWhile="#auto" //当前属性解析失败时，需要跳过继续解析下一个
  extends="icu.windea.pls.script.psi.impl.ParadoxScriptStubElementImpl<?>"
  implements=[
    "icu.windea.pls.script.psi.ParadoxScriptNamedElement"
    "icu.windea.pls.script.psi.ParadoxScriptExpression"
    "icu.windea.pls.script.psi.ParadoxDefinitionProperty"
  ]
  stubClass="icu.windea.pls.script.psi.ParadoxScriptPropertyStub"
  methods=[getIcon getName setName getNameIdentifier getTextOffset getValue getDepth getBlock getDefinitionType getConfigExpression getValueType getPathName getOriginalPathName]
}
//property_key can be parameter
property_key ::= PROPERTY_KEY_ID | QUOTED_PROPERTY_KEY_ID | parameter {
  methods=[getValue setValue getReference]
}
private property_separator ::= EQUAL_SIGN | LT_SIGN | GT_SIGN | LE_SIGN | GE_SIGN | NOT_EQUAL_SIGN
property_value ::= value

value ::= variable_reference | parameter | boolean | number | string | string_template | color | block | inline_math {
  implements="icu.windea.pls.script.psi.ParadoxScriptExpression"
  methods=[getIcon getValue getConfigExpression]
}
variable_reference ::= AT VARIABLE_REFERENCE_ID {
  extends=value
  implements="icu.windea.pls.script.psi.IParadoxScriptVariableReference"
  methods=[getIcon getName setName getReference]
}
boolean ::= BOOLEAN_TOKEN {
  extends=value
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getBooleanValue getValueType]
}
number ::= int | float {
  extends=value
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValueType]
}
int ::= INT_TOKEN {
  extends=number
  methods=[getIntValue getValueType]
}
float ::= FLOAT_TOKEN{
  extends=number
  methods=[getFloatValue getValueType]
}
string ::= STRING_TOKEN | QUOTED_STRING_TOKEN {
  extends=value
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue setValue getReference getStringValue getValueType]
}
color ::= COLOR_TOKEN {
  extends=value
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue getColor setColor getValueType]
}
block ::= LEFT_BRACE block_item * RIGHT_BRACE {
  pin=1
  recoverWhile="#auto"
  extends=value
  implements="icu.windea.pls.script.psi.IParadoxScriptBlock"
  methods=[getIcon getValue isEmpty isNotEmpty getComponents getColor setColor getValueType]
}
private block_item ::= END_OF_LINE_COMMENT | COMMENT | property | value | parameter_condition | variable

//advanced script syntax
//see: common/scripted_effects/99_advanced_documentation.txt
//see wiki: https://stellaris.paradoxwikis.com/Dynamic_modding

//tag
//should in definition declaration (scripted_effect / scripted_trigger)
//resolve from a string, before any scripted variables, (non-tag) strings and properties

//parameter
//should in definition declaration (script_value / scripted_effect / scripted_trigger)
//currently cannot be surround with double quotes
parameter ::= PARAMETER_START PARAMETER_ID [PIPE (ARG_NUMBER_TOKEN | ARG_STRING_TOKEN)] PARAMETER_END {
  pin=1
  extends=value
  implements="icu.windea.pls.script.psi.IParadoxScriptParameter"
  methods=[getIcon getName setName getNameIdentifier getTextOffset getValue getDefaultValue]
}

//parameter condition
//should in definition declaration (script_value / scripted_effect / scripted_trigger)
parameter_condition ::= LEFT_BRACKET parameter_condition_expr parameter_condition_item * RIGHT_BRACKET{
  pin=1
  recoverWhile="#auto"
  implements="com.intellij.psi.PsiListLikeElement"
  methods=[getIcon getExpression isEmpty isNotEmpty getComponents]
}
private parameter_condition_expr ::= NESTED_LEFT_BRACKET parameter_condition_expression NESTED_RIGHT_BRACKET{
  pin=1
  recoverWhile="#auto"
}
parameter_condition_expression ::= NOT_SIGN ? parameter_condition_parameter
parameter_condition_parameter ::= INPUT_PARAMETER_ID {
  implements="icu.windea.pls.script.psi.IParadoxScriptInputParameter"
  methods=[getIcon getName setName getNameIdentifier getTextOffset]
}
//variable should outside of definition declaration
//nested parameter_condition is not supported
private parameter_condition_item ::= END_OF_LINE_COMMENT | COMMENT | property | value

//inline math
//should in definition declaration
//should starts with "@\[" if in specific definition declaration (scripted_effect / scripted_trigger) (TO CHECK)
//only first inline math expression in a scripted effect / trigger is correctly recognized and evaluated
//supported operators: + - * / %
//also support unary operators "+1" "-1", abs operator "| 1 |" and parentheses "( 1 )"
//inline math factor can also be scripted_variable and (if parameter it self is allowed) parameter 
inline_math ::= INLINE_MATH_START inline_math_expr INLINE_MATH_END{
  pin=1
  recoverWhile="#auto"
  extends=value
  methods=[getValue getValueType]
}
private inline_math_expr ::= (inline_math_unary_expression | inline_math_abs_expression | inline_math_par_expression | inline_math_factor) inline_math_bi_expression *
//noinspection BnfUnusedRule
inline_math_expression ::= inline_math_unary_expression | inline_math_abs_expression | inline_math_par_expression | inline_math_bi_expression
inline_math_unary_expression ::= inline_math_unary_op inline_math_unary_expr{
  pin=1
  extends=inline_math_expression
}
private inline_math_unary_op ::= PLUS_SIGN | MINUS_SIGN
private inline_math_unary_expr ::= inline_math_abs_expression | inline_math_par_expression | inline_math_factor
inline_math_abs_expression ::= LABS_SIGN inline_math_abs_expr RABS_SIGN {
  pin=1
  extends=inline_math_expression
}
private inline_math_abs_expr ::= inline_math_expr
inline_math_par_expression ::= LP_SIGN inline_math_par_expr RP_SIGN {
  pin=1
  extends=inline_math_expression
}
private inline_math_par_expr ::= inline_math_expr
left inline_math_bi_expression ::= inline_math_bi_op inline_math_bi_right_factor{
  pin=1
  extends=inline_math_expression
}
private inline_math_bi_op ::= PLUS_SIGN | MINUS_SIGN | TIMES_SIGN | DIV_SIGN | MOD_SIGN
private inline_math_bi_right_factor ::= inline_math_unary_expression | inline_math_abs_expression | inline_math_par_expression | inline_math_factor
inline_math_factor ::= inline_math_number | inline_math_variable_reference | inline_math_parameter
inline_math_number ::= NUMBER_TOKEN { //int | float
  extends=inline_math_factor
  implements=[
    "com.intellij.psi.PsiLiteralValue"
    "icu.windea.pls.script.psi.ParadoxScriptExpression"
  ]
  methods=[getValue getValueType]
}
inline_math_variable_reference ::= INLINE_MATH_VARIABLE_REFERENCE_ID { //without prefix "@"
  extends=inline_math_factor
  implements="icu.windea.pls.script.psi.IParadoxScriptVariableReference"
  methods=[getIcon getName setName getReference]
}
inline_math_parameter ::= PARAMETER_START PARAMETER_ID [PIPE ARG_NUMBER_TOKEN] PARAMETER_END {
  extends=inline_math_factor
  pin=1
  implements="icu.windea.pls.script.psi.IParadoxScriptParameter"
  methods=[getIcon getName setName getNameIdentifier getTextOffset getDefaultValue]
}

//loc command
//should in definition declaration
//should starts with "\[" if in specific definition declaration (scripted_effect / scripted_trigger) (TO CHECK)

//string template
//can include: string_entry, parameter_entry, etc. (TO IMPLEMENT)
string_template ::= string_template_entry string_template_entry + {
  methods=[getValue]
}
string_template_entry ::= literal_string_template_entry | parameter_string_template_entry
literal_string_template_entry ::= STRING_PART{
  extends=string_template_entry
  methods=[getValue]
}
parameter_string_template_entry ::= parameter {
  extends=string_template_entry
}
