{
	parserClass="icu.windea.pls.script.psi.ParadoxScriptParser"
	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
	psiClassPrefix="ParadoxScript"
	psiImplClassSuffix="Impl"
	psiPackage="icu.windea.pls.script.psi"
	psiImplPackage="icu.windea.pls.script.psi.impl"
	elementTypeHolderClass="icu.windea.pls.script.psi.ParadoxScriptElementTypes"
	elementTypeClass="icu.windea.pls.script.psi.ParadoxScriptElementType"
	tokenTypeClass="icu.windea.pls.script.psi.ParadoxScriptTokenType"
	psiImplUtilClass="icu.windea.pls.script.psi.impl.ParadoxScriptPsiImplUtil"
}

//忽略空白，在ParserDefinition里面定义PsiElement之间的空白类型
//regex必须定向到token，而非rule
//即使idea提示不需要转义，一些字符在regexp中仍然需要转义

//DONE 列表的元素可以是字符串
//DONE 分隔符可以是比较运算符

//root_block也是block，但不能直接extends，否则root下面会是value而非root_block
root ::= root_block
root_block ::= root_block_item * {
  extends=block
}
private root_block_item ::=  END_OF_LINE_COMMENT | COMMENT | variable | property | value

variable ::= variable_name variable_separator variable_value {
  pin=1
  recoverWhile=variable_recover
  elementTypeFactory="icu.windea.pls.script.psi.ParadoxScriptStubElementTypes.getVariableType"
  extends="icu.windea.pls.script.psi.impl.ParadoxScriptStubElementImpl<?>"
  implements=[
    "icu.windea.pls.script.psi.ParadoxScriptNamedElement"
    "icu.windea.pls.script.psi.ParadoxScriptExpression"
  ]
  stubClass="icu.windea.pls.script.psi.ParadoxScriptVariableStub"
  methods=[getIcon getName setName getNameIdentifier getValue getUnquotedValue getValueType]
}

variable_name ::= VARIABLE_NAME_ID{
  methods=[getValue setValue]
}
private variable_separator ::= EQUAL_SIGN
variable_value ::= boolean | number | string
//当前变量解析失败时，需要跳过继续解析下一行
private variable_recover ::= !(BOOLEAN_TOKEN | CODE_START | COLOR_TOKEN | COMMENT | END_OF_LINE_COMMENT | FLOAT_TOKEN | INT_TOKEN | LEFT_BRACE | PROPERTY_KEY_ID | QUOTED_PROPERTY_KEY_ID | QUOTED_STRING_TOKEN | RIGHT_BRACE | STRING_TOKEN | VARIABLE_NAME_ID | VARIABLE_REFERENCE_ID)

property ::= property_key property_separator property_value {
  pin=1
  recoverWhile=property_recover
  elementTypeFactory="icu.windea.pls.script.psi.ParadoxScriptStubElementTypes.getPropertyType"
  extends="icu.windea.pls.script.psi.impl.ParadoxScriptStubElementImpl<?>"
  implements=[
    "icu.windea.pls.script.psi.ParadoxScriptNamedElement"
    "icu.windea.pls.script.psi.ParadoxScriptExpression"
    "icu.windea.pls.script.psi.ParadoxDefinitionProperty"
  ]
  stubClass="icu.windea.pls.script.psi.ParadoxScriptPropertyStub"
  methods=[getIcon getPresentation getName setName getNameIdentifier getValue getTruncatedValue getDepth getBlock getValueType getType getPathName getOriginalPathName]
}
property_key ::= PROPERTY_KEY_ID | QUOTED_PROPERTY_KEY_ID{
  methods=[getValue setValue getReference]
}
private property_separator ::= EQUAL_SIGN | LT_SIGN | GT_SIGN | LE_SIGN | GE_SIGN | NOT_EQUAL_SIGN
property_value ::= value
//当前属性解析失败时，需要跳过继续解析下一个
private property_recover ::= !(BOOLEAN_TOKEN | CODE_START | COLOR_TOKEN | COMMENT | END_OF_LINE_COMMENT | FLOAT_TOKEN | INT_TOKEN | LEFT_BRACE | PROPERTY_KEY_ID | QUOTED_PROPERTY_KEY_ID | QUOTED_STRING_TOKEN | RIGHT_BRACE | STRING_TOKEN | VARIABLE_NAME_ID | VARIABLE_REFERENCE_ID)

value ::= variable_reference | boolean | number | string | color | block | advance_value{
  implements=[
    "com.intellij.psi.PsiLiteralValue"
    "icu.windea.pls.script.psi.ParadoxScriptExpression"
  ]
  methods=[getIcon getPresentation getValue getTruncatedValue]
}
variable_reference ::= VARIABLE_REFERENCE_ID {
  extends=value
  methods=[getName setName getReference getReferenceValue getValueType]
}
boolean ::= BOOLEAN_TOKEN {
  extends=value
  methods=[getBooleanValue getValueType getType]
}
number ::= int | float {
  extends=value
}
int ::= INT_TOKEN {
  extends=number
  methods=[getIntValue getValueType getType]
}
float ::= FLOAT_TOKEN{
  extends=number
  methods=[getFloatValue getValueType getType]
}
string ::= STRING_TOKEN | QUOTED_STRING_TOKEN {
  extends=value
  methods=[getValue setValue getReference getStringValue getValueType getType]
}
color ::= COLOR_TOKEN {
  extends=value
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue getColor setColor getValueType getType]
}
block ::= LEFT_BRACE block_item * RIGHT_BRACE {
  pin=1
  extends=value
  implements="com.intellij.psi.PsiListLikeElement"
  methods=[getValue getTruncatedValue isEmpty isNotEmpty isObject isArray getComponents getValueType getType]
}
private block_item ::= END_OF_LINE_COMMENT | COMMENT | variable | property | value

//TODO
advance_value ::= code {
  extends=value
}
code ::= CODE_START code_text CODE_END{
  pin=1
  extends=value
  methods=[getValueType getType]
}
private code_text ::= CODE_TEXT_TOKEN
