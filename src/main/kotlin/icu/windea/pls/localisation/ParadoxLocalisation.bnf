{
  parserClass="icu.windea.pls.localisation.parser.ParadoxLocalisationParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="ParadoxLocalisation"
  psiImplClassSuffix="Impl"
  psiPackage="icu.windea.pls.localisation.psi"
  psiImplPackage="icu.windea.pls.localisation.psi.impl"
  elementTypeHolderClass="icu.windea.pls.localisation.psi.ParadoxLocalisationElementTypes"
  tokenTypeFactory="icu.windea.pls.localisation.psi.ParadoxLocalisationElementTypeFactory.getTokenType"
  elementTypeFactory="icu.windea.pls.localisation.psi.ParadoxLocalisationElementTypeFactory.getElementType"
  psiImplUtilClass="icu.windea.pls.localisation.psi.impl.ParadoxLocalisationPsiImplUtil"
  parserUtilClass="icu.windea.pls.localisation.parser.ParadoxLocalisationParserUtil"
  methods(".*")=[getPresentation getResolveScope getUseScope]
}

// core rules

root ::= property_list *

property_list ::= COMMENT * (property_item_list_with_locale | property_item_list) {
  recoverWhile="#auto"
  implements="com.intellij.psi.PsiListLikeElement"
  methods=[getIcon getComponents]
}
private property_item_list_with_locale ::= locale property_item * {
  pin=1
}
private property_item_list ::= property_item +
private property_item ::= COMMENT | property {
  recoverWhile="#auto"
}

locale ::= LOCALE_TOKEN COLON {
  pin=1
  implements="com.intellij.psi.NavigatablePsiElement"
  methods=[getIcon getName setName getReference]
}

property ::= property_key COLON property_number? property_value {
  pin=1
  recoverWhile="#auto"
  extends="icu.windea.pls.localisation.psi.impl.ParadoxLocalisationStubElementImpl<?>"
  stubClass="icu.windea.pls.localisation.psi.ParadoxLocalisationPropertyStub"
  implements="icu.windea.pls.localisation.psi.ParadoxLocalisationNamedElement"
  methods=[
    getIcon getName setName getNameIdentifier getTextOffset getCategory getValue setValue
    isEquivalentTo toString
  ]
}

property_key ::= PROPERTY_KEY_TOKEN {
  methods=[getIcon]
}

// The number seen in vanilla files right after the colon can be omitted, as it is only useful for Paradoxâ€™s internal translation tracking
// https://stellaris.paradoxwikis.com/Localisation_modding
// https://twitter.com/Martin_Anward/status/1039175213773144066
private property_number ::= PROPERTY_NUMBER

property_value ::= LEFT_QUOTE PROPERTY_VALUE_TOKEN RIGHT_QUOTE { // lazy-parsing PROPERTY_VALUE_TOKEN
  pin=1
  methods=[getRichTextList]
}

// ------

// localisation text rules (lazy-parsing, from PROPERTY_VALUE_TOKEN)

text_root ::= text_item + {
  extraRoot=true
}
private text_item ::= rich_text | COLORFUL_TEXT_END {
  recoverWhile="#auto"
}

rich_text ::= string | colorful_text | property_reference | icon | command

string ::= STRING_TOKEN

// localisation colorful text rules

// see: https://stellaris.paradoxwikis.com/Localisation_modding#Color_Codes
colorful_text ::= COLORFUL_TEXT_START COLOR_TOKEN colorful_text_item [COLORFUL_TEXT_END]{
  pin=1
  extends=rich_text
  methods=[getName setName getReference]
}
private colorful_text_item ::= rich_text *

// localisation reference rules

// see: https://stellaris.paradoxwikis.com/Localisation_modding#.24_Codes
// may be resolved to localisation / parameter / system statistics in GUI elements
property_reference ::= PROPERTY_REFERENCE_START [property_reference_name] [PIPE [property_reference_parameter]] PROPERTY_REFERENCE_END {
  pin=1
  extends=rich_text
  implements=[
    "com.intellij.psi.NavigatablePsiElement"
  ]
  methods=[getName setName getReference]
}
// token / command (e.g. "[Root.GetName]") / scripted_variable (e.g. "@v")
private property_reference_name ::= PROPERTY_REFERENCE_TOKEN | command | scripted_variable_reference
private property_reference_parameter ::= PROPERTY_REFERENCE_PARAMETER_TOKEN //TODO check syntax

// scripted variable reference rules (in references)

scripted_variable_reference ::= AT SCRIPTED_VARIABLE_REFERENCE_TOKEN {
  implements=[
    "icu.windea.pls.lang.psi.ParadoxScriptedVariableReference"
  ]
  methods=[getIcon getName setName getReference getType getExpression]
}

// localisation command rules

// see: https://stellaris.paradoxwikis.com/Localisation_modding#Bracket_Commands
command ::= COMMAND_START command_expression ? COMMAND_END {
  pin=1
  extends=rich_text
  implements="icu.windea.pls.localisation.psi.ParadoxLocalisationRichText"
  methods=[getIcon]
}

private command_expression ::= concept_expression | command_text
command_text ::= (COMMAND_TEXT_TOKEN | property_reference)* { //can be parameterized
  implements=[
    "icu.windea.pls.localisation.psi.ParadoxLocalisationExpressionElement"
    "com.intellij.psi.ContributedReferenceHost"
  ]
  methods=[getName getValue setValue getType getExpression getReference getReferences]
}

// localisation icon rules

icon ::= ICON_START icon_name [PIPE icon_frame] ICON_END {
  pin=1
  extends=rich_text
  implements=[
    "com.intellij.psi.NavigatablePsiElement"
  ]
  methods=[getIcon getName setName getFrame getReference]
}
private icon_name ::= command | property_reference | ICON_TOKEN //can be parameterized
private icon_frame ::= ICON_FRAME | property_reference //can be parameterized

// [stellaris] localisation concept rules (as special commands)

private concept_expression ::= <<supportsConceptQuoted>> concept
concept ::= LEFT_SINGLE_QUOTE concept_name RIGHT_SINGLE_QUOTE (COMMA concept_text) ? {
  pin=1
  methods=[getIcon getName setName getReference]
}
concept_name ::= (CONCEPT_NAME_TOKEN | property_reference)* { //can be parameterized
  pin=1
  implements=[
    "icu.windea.pls.localisation.psi.ParadoxLocalisationExpressionElement"
    "com.intellij.psi.ContributedReferenceHost"
  ]
  methods=[getName getValue setValue getType getExpression getReference getReferences]
}
concept_text ::= rich_text *

// [ck3, vic3] localisation formatting rules

// TODO 1.4.0

// [ck3, vic3] localisation text icon rules

// TODO 1.4.0

