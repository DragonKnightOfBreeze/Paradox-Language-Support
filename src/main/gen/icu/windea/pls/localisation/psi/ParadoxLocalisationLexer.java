/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.localisation.psi;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.localisation.psi.ParadoxLocalisationTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ParadoxLocalisationLexer.flex</tt>
 */
public class ParadoxLocalisationLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_LOCALE_COLON = 2;
  public static final int WAITING_LOCALE_EOL = 4;
  public static final int WAITING_PROPERTY_KEY = 6;
  public static final int WAITING_PROPERTY_COLON = 8;
  public static final int WAITING_PROPERTY_NUMBER = 10;
  public static final int WAITING_PROPERTY_VALUE = 12;
  public static final int WAITING_PROPERTY_EOL = 14;
  public static final int WAITING_RICH_TEXT = 16;
  public static final int WAITING_PROPERTY_REFERENCE = 18;
  public static final int WAITING_PROPERTY_REFERENCE_PARAMETER = 20;
  public static final int WAITING_ICON = 22;
  public static final int WAITING_ICON_NAME_FINISHED = 24;
  public static final int WAITING_ICON_PARAMETER = 26;
  public static final int WAITING_SEQUENTIAL_NUMBER = 28;
  public static final int WAITING_COMMAND_SCOPE_OR_FIELD = 30;
  public static final int WAITING_COMMAND_SEPARATOR = 32;
  public static final int WAITING_COLOR_ID = 34;
  public static final int WAITING_COLORFUL_TEXT = 36;
  public static final int WAITING_CHECK_PROPERTY_REFERENCE_START = 38;
  public static final int WAITING_CHECK_ICON_START = 40;
  public static final int WAITING_CHECK_SEQUENTIAL_NUMBER_START = 42;
  public static final int WAITING_CHECK_COMMAND_START = 44;
  public static final int WAITING_CHECK_COLORFUL_TEXT_START = 46;
  public static final int WAITING_CHECK_RIGHT_QUOTE = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  8,  8, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 4256 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\6\4\1\5\4\4\1\6\1\7\1\10\4\4\1\11\6\4\1\12\1\13\361\4");

  /* The ZZ_CMAP_Y table has 768 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\26\3\1\4\1\3\1\5\3\3\1\6\5\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\10\1\3\1\10\1\4\4\3\1\6"+
    "\1\10\27\3\1\11\4\3\1\4\1\10\4\3\1\12\1\3\1\10\2\3\1\13\2\3\1\10\1\5\2\3\1"+
    "\13\16\3\1\14\1\15\76\3\1\11\227\3\1\4\12\3\1\10\1\6\2\3\1\16\1\3\1\10\5\3"+
    "\1\5\114\3\1\10\25\3\1\4\56\3\1\7\1\3\1\5\1\17\2\3\1\10\3\3\1\5\5\3\1\10\1"+
    "\3\1\10\5\3\1\10\1\3\1\6\1\5\6\3\1\4\15\3\1\10\67\3\1\4\3\3\1\10\61\3\1\20"+
    "\105\3\1\10\32\3");

  /* The ZZ_CMAP_A table has 1088 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\3\2\2\1\3\22\0\1\4\1\33\1\6\1\5\1\30\1\22\1\0\1\11\2\0\2\25\1"+
    "\0\1\24\1\21\1\23\12\12\1\32\2\0\1\25\2\0\1\27\32\26\1\16\1\13\1\17\1\0\1"+
    "\10\1\0\15\20\1\15\3\20\1\15\1\20\1\15\6\20\1\0\1\34\10\0\1\2\32\0\1\1\2\0"+
    "\1\31\3\0\1\14\170\0\12\7\106\0\12\7\6\0\12\7\134\0\12\7\40\0\12\7\46\0\1"+
    "\1\105\0\12\7\60\0\12\7\6\0\12\7\46\0\13\1\35\0\2\2\5\0\1\1\57\0\1\1\60\0"+
    "\12\7\26\0\12\7\74\0\12\7\16\0\62\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\30\0\2\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\6\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\25\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\1\1\43\1\44\1\45\2\46\1\47\1\20\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\2\0\1\57"+
    "\1\60\1\61\1\62\1\0\1\63\1\64\1\65\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b"+
    "\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383"+
    "\0\u03a0\0\u03bd\0\u02b8\0\u03da\0\u03f7\0\u02b8\0\u0414\0\u0431"+
    "\0\u02b8\0\u02b8\0\u044e\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df"+
    "\0\u02b8\0\u02b8\0\u02b8\0\u04fc\0\u0519\0\u02b8\0\u02b8\0\u02b8"+
    "\0\u0536\0\u0553\0\u0570\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u058d"+
    "\0\u02b8\0\u02b8\0\u05aa\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u0383"+
    "\0\u05c7\0\u05e4\0\u02b8\0\u0601\0\u061e\0\u063b\0\u0658\0\u0675"+
    "\0\u0692\0\u02d5\0\u0383\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u05aa"+
    "\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u06af\0\u02b8\0\u02b8"+
    "\0\u02b8\0\u02b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\2\33\1\34\1\35\2\31\1\36\2\37"+
    "\2\31\1\36\2\31\1\36\1\37\2\31\1\37\1\31"+
    "\1\37\7\31\1\40\2\41\1\42\25\31\1\43\3\31"+
    "\1\40\2\41\1\42\1\44\30\31\1\32\2\33\1\34"+
    "\1\45\2\31\3\37\2\31\1\37\2\31\2\37\2\31"+
    "\1\37\1\31\1\37\7\31\1\40\2\41\1\42\25\31"+
    "\1\46\3\31\1\40\2\41\1\47\2\31\1\50\2\31"+
    "\1\50\23\31\1\40\2\41\1\42\1\31\1\51\27\31"+
    "\1\40\2\41\1\42\1\44\1\52\26\31\1\53\1\54"+
    "\1\55\1\41\1\54\1\53\1\52\4\53\1\56\1\57"+
    "\1\53\1\60\3\53\1\61\5\53\1\62\1\63\3\53"+
    "\1\31\1\40\2\41\1\64\1\31\1\52\1\31\3\65"+
    "\1\31\1\57\1\65\1\66\1\31\2\65\2\31\1\65"+
    "\1\31\1\65\1\31\1\67\3\31\1\70\4\31\1\71"+
    "\1\31\1\52\3\31\1\72\1\31\1\57\6\72\1\31"+
    "\3\72\1\31\1\67\5\31\1\40\2\41\1\64\1\31"+
    "\1\52\1\31\1\73\1\31\2\73\1\57\1\73\1\74"+
    "\1\31\1\73\2\31\2\73\1\31\1\73\1\31\1\75"+
    "\1\76\2\31\1\77\1\31\1\40\2\41\1\64\1\31"+
    "\1\52\5\31\1\57\1\31\1\74\11\31\1\75\1\76"+
    "\2\31\1\77\1\31\1\40\2\41\1\64\1\31\1\52"+
    "\3\31\1\100\1\31\1\57\1\100\2\31\1\100\1\31"+
    "\1\100\1\31\3\100\1\31\1\75\1\76\4\31\1\40"+
    "\2\41\1\64\1\31\1\52\5\31\1\57\1\101\2\31"+
    "\1\101\1\31\1\102\3\31\1\101\7\31\1\40\2\41"+
    "\1\42\1\31\1\52\1\31\1\103\1\31\1\103\1\31"+
    "\1\57\1\103\1\31\1\104\1\103\5\31\2\103\1\105"+
    "\1\31\1\103\3\31\1\40\2\41\1\42\1\31\1\52"+
    "\5\31\1\57\2\31\1\104\1\31\1\106\6\31\1\105"+
    "\4\31\1\107\1\110\2\41\1\111\1\107\1\52\5\107"+
    "\1\112\1\113\2\107\1\113\5\107\1\113\6\107\30\31"+
    "\1\114\35\31\1\115\25\31\1\116\30\31\1\117\32\31"+
    "\1\120\26\31\1\121\26\31\36\0\1\122\2\33\1\122"+
    "\31\0\4\33\31\0\1\122\2\33\1\34\30\0\3\35"+
    "\1\0\31\35\10\0\1\36\2\37\2\0\1\36\2\0"+
    "\1\36\1\37\2\0\1\37\1\0\1\37\16\0\3\37"+
    "\2\0\1\37\2\0\2\37\2\0\1\37\1\0\1\37"+
    "\7\0\1\123\2\41\1\123\31\0\4\41\31\0\1\123"+
    "\2\41\1\42\30\0\3\44\1\0\2\44\1\0\26\44"+
    "\3\45\1\0\31\45\1\0\1\123\2\41\1\47\37\0"+
    "\1\50\2\0\1\50\22\0\3\53\1\0\2\53\1\0"+
    "\4\53\2\0\1\53\1\0\3\53\1\0\5\53\2\0"+
    "\4\53\1\54\1\55\1\41\1\54\1\53\1\0\4\53"+
    "\2\0\1\53\1\0\3\53\1\0\5\53\2\0\4\53"+
    "\2\55\1\41\1\55\1\53\1\0\4\53\2\0\1\53"+
    "\1\0\3\53\1\0\5\53\2\0\3\53\2\124\2\0"+
    "\2\124\1\125\5\124\3\125\3\124\1\125\5\124\2\125"+
    "\3\124\33\0\1\126\17\0\1\127\17\0\1\123\2\41"+
    "\1\64\40\0\3\65\2\0\1\65\2\0\2\65\2\0"+
    "\1\65\1\0\1\65\12\0\1\71\42\0\1\72\2\0"+
    "\6\72\1\0\3\72\16\0\1\73\1\0\2\73\1\0"+
    "\1\73\2\0\1\73\2\0\2\73\1\0\1\73\20\0"+
    "\1\100\2\0\1\100\2\0\1\100\1\0\1\100\1\0"+
    "\3\100\16\0\1\130\1\0\1\130\2\0\1\130\1\0"+
    "\1\131\1\130\1\132\4\0\2\130\2\0\1\130\3\0"+
    "\1\123\2\41\1\111\63\0\1\133\1\0\1\114\1\134"+
    "\2\0\1\134\1\114\1\134\21\114\1\134\4\114\2\135"+
    "\2\0\31\135\2\136\2\0\31\136\1\117\1\137\2\0"+
    "\1\137\1\117\1\137\10\117\1\137\1\117\1\137\13\117"+
    "\2\140\2\0\31\140\3\121\1\0\2\121\1\141\26\121"+
    "\2\142\2\0\31\142";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\30\0\1\11\11\1\1\11\2\1\1\11\2\1\2\11"+
    "\6\1\3\11\2\1\3\11\3\1\4\11\1\1\2\11"+
    "\1\1\4\11\3\1\1\11\6\1\2\0\4\11\1\0"+
    "\5\11\1\1\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int depth = 0;
  private int commandLocation = 0;
  private int propertyReferenceLocation = 0;
  private boolean inIconName = false;

  public void increaseDepth(){
	  depth++;
  }
  
  public void decreaseDepth(){
	  if(depth > 0) depth--;
  }
  
  public int nextStateForText(){
    return depth <= 0 ? WAITING_RICH_TEXT : WAITING_COLORFUL_TEXT;
  }
  
  public int nextStateForCommand(){
    if(commandLocation == 0) return nextStateForText();
    else if (commandLocation == 1) return WAITING_PROPERTY_REFERENCE;
    else if (commandLocation == 2) return WAITING_ICON;
    else return nextStateForText();
  }

  public int nextStateForPropertyReference(){
    if(propertyReferenceLocation == 0) return nextStateForText();
    else if (propertyReferenceLocation == 2) return WAITING_ICON;
    else if (propertyReferenceLocation == 3) return WAITING_COMMAND_SCOPE_OR_FIELD;
    else return nextStateForText();
  }
  
  public boolean isLetter(char c){
	  return ('a' <= c && 'z' >= c) || ('A' <= c && 'Z' >= c);
  }
  
  public boolean isDigit(char c){
	  return '0' <= c && '9' >= c;
  }
  
  public boolean isLetterOrDigitOrUnderline(char c){
	  return isLetter(c) || isDigit(c) || c == '_';
  }
  
  public boolean isBlankOrDoubleQuote(char c){
	  return Character.isWhitespace(c) || c == '"';
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParadoxLocalisationLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return ROOT_COMMENT;
            } 
            // fall through
          case 56: break;
          case 4: 
            { yybegin(WAITING_LOCALE_COLON); return LOCALE_ID;
            } 
            // fall through
          case 57: break;
          case 5: 
            { yybegin(WAITING_PROPERTY_COLON); return PROPERTY_KEY_ID;
            } 
            // fall through
          case 58: break;
          case 6: 
            { yybegin(WAITING_PROPERTY_KEY); return WHITE_SPACE;
            } 
            // fall through
          case 59: break;
          case 7: 
            { yybegin(WAITING_LOCALE_EOL); return COLON;
            } 
            // fall through
          case 60: break;
          case 8: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return COMMENT;
            } 
            // fall through
          case 62: break;
          case 10: 
            { yybegin(WAITING_PROPERTY_NUMBER); return COLON;
            } 
            // fall through
          case 63: break;
          case 11: 
            { yybegin(WAITING_PROPERTY_VALUE); return WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 12: 
            { yybegin(WAITING_PROPERTY_VALUE); return NUMBER;
            } 
            // fall through
          case 65: break;
          case 13: 
            { yybegin(WAITING_RICH_TEXT); return LEFT_QUOTE;
            } 
            // fall through
          case 66: break;
          case 14: 
            { yypushback(yylength()); yybegin(WAITING_CHECK_RIGHT_QUOTE);
            } 
            // fall through
          case 67: break;
          case 15: 
            { return STRING_TOKEN;
            } 
            // fall through
          case 68: break;
          case 16: 
            { yypushback(yylength()); yybegin(WAITING_CHECK_COLORFUL_TEXT_START);
            } 
            // fall through
          case 69: break;
          case 17: 
            { commandLocation=0; yypushback(yylength()); yybegin(WAITING_CHECK_COMMAND_START);
            } 
            // fall through
          case 70: break;
          case 18: 
            { yypushback(yylength()); yybegin(WAITING_CHECK_SEQUENTIAL_NUMBER_START);
            } 
            // fall through
          case 71: break;
          case 19: 
            { propertyReferenceLocation=0; yypushback(yylength()); yybegin(WAITING_CHECK_PROPERTY_REFERENCE_START);
            } 
            // fall through
          case 72: break;
          case 20: 
            { yypushback(yylength()); yybegin(WAITING_CHECK_ICON_START);
            } 
            // fall through
          case 73: break;
          case 21: 
            { yybegin(nextStateForText()); return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return PROPERTY_REFERENCE_ID;
            } 
            // fall through
          case 75: break;
          case 23: 
            { commandLocation=1; yypushback(yylength()); yybegin(WAITING_CHECK_COMMAND_START);
            } 
            // fall through
          case 76: break;
          case 24: 
            { yybegin(nextStateForPropertyReference()); return PROPERTY_REFERENCE_END;
            } 
            // fall through
          case 77: break;
          case 25: 
            { yybegin(WAITING_PROPERTY_REFERENCE_PARAMETER); return PARAMETER_SEPARATOR;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return PROPERTY_REFERENCE_PARAMETER;
            } 
            // fall through
          case 79: break;
          case 27: 
            { yybegin(WAITING_ICON_NAME_FINISHED); return ICON_ID;
            } 
            // fall through
          case 80: break;
          case 28: 
            { commandLocation=2; yypushback(yylength()); yybegin(WAITING_CHECK_COMMAND_START);
            } 
            // fall through
          case 81: break;
          case 29: 
            { propertyReferenceLocation=2; yypushback(yylength()); yybegin(WAITING_CHECK_PROPERTY_REFERENCE_START);
            } 
            // fall through
          case 82: break;
          case 30: 
            { yybegin(nextStateForText()); return ICON_END;
            } 
            // fall through
          case 83: break;
          case 31: 
            { yybegin(WAITING_ICON_PARAMETER); return PARAMETER_SEPARATOR;
            } 
            // fall through
          case 84: break;
          case 32: 
            { return ICON_PARAMETER;
            } 
            // fall through
          case 85: break;
          case 33: 
            { return SEQUENTIAL_NUMBER_ID;
            } 
            // fall through
          case 86: break;
          case 34: 
            { yybegin(nextStateForText()); return SEQUENTIAL_NUMBER_END;
            } 
            // fall through
          case 87: break;
          case 35: 
            { yybegin(nextStateForCommand()); return COMMAND_END;
            } 
            // fall through
          case 88: break;
          case 36: 
            { propertyReferenceLocation=3; yypushback(yylength()); yybegin(WAITING_CHECK_PROPERTY_REFERENCE_START);
            } 
            // fall through
          case 89: break;
          case 37: 
            { yybegin(WAITING_COMMAND_SCOPE_OR_FIELD); return COMMAND_SEPARATOR;
            } 
            // fall through
          case 90: break;
          case 38: 
            { yypushback(yylength()); yybegin(WAITING_COLORFUL_TEXT);
            } 
            // fall through
          case 91: break;
          case 39: 
            { yybegin(WAITING_COLORFUL_TEXT); return WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 40: 
            { yybegin(WAITING_COLORFUL_TEXT); return COLOR_ID;
            } 
            // fall through
          case 93: break;
          case 41: 
            { //特殊处理
    //如果匹配到的字符串长度大于1，且最后一个字符不为空白或双引号，则认为代表命令的开始
    //否则认为是常规字符串
    boolean isPropertyReferenceStart = yylength() > 1 && !isBlankOrDoubleQuote(yycharat(yylength()-1));
	yypushback(yylength()-1);
	if(isPropertyReferenceStart){
		yybegin(WAITING_PROPERTY_REFERENCE);
		return PROPERTY_REFERENCE_START;
	}else{
		yybegin(nextStateForText());
		return STRING_TOKEN;
	}
            } 
            // fall through
          case 94: break;
          case 42: 
            { //特殊处理
    //如果匹配到的字符串的第2个字符存在且为字母、数字或下划线，则认为代表图标的开始
    //否则认为是常规字符串
    boolean isIconStart = yylength() == 2 && isLetterOrDigitOrUnderline(yycharat(1));
    yypushback(yylength()-1);
    if(isIconStart){
    	  yybegin(WAITING_ICON);
    	  return ICON_START;
    }else{
        yybegin(nextStateForText());
        return STRING_TOKEN;
    }
            } 
            // fall through
          case 95: break;
          case 43: 
            { //特殊处理
    //如果匹配的字符串的第3个字符存在且为百分号，则认为整个字符串代表一个编号
    //否则认为是常规字符串
    boolean isSequentialNumberStart = yylength() == 3 && yycharat(2) == '%';
    yypushback(yylength()-1);
    if(isSequentialNumberStart){
        yybegin(WAITING_SEQUENTIAL_NUMBER);
        return SEQUENTIAL_NUMBER_START;
    }else{
        yybegin(nextStateForText());
        return STRING_TOKEN;
    }
            } 
            // fall through
          case 96: break;
          case 44: 
            { //特殊处理
    //除了可以通过连续的两个左方括号转义之外
    //如果匹配到的字符串长度大于1，且最后一个字符不为空白或双引号，则认为代表命令的开始
    //否则认为是常规字符串
    boolean isCommandStart = yylength() > 1 && !isBlankOrDoubleQuote(yycharat(yylength()-1));
    yypushback(yylength()-1);
    if(isCommandStart){
	    yybegin(WAITING_COMMAND_SCOPE_OR_FIELD);
	    return COMMAND_START;
    } else {
	    yybegin(nextStateForText());
	    return STRING_TOKEN;
    }
            } 
            // fall through
          case 97: break;
          case 45: 
            { //特殊处理
    //如果匹配到的字符串的第2个字符存在且为字母，则认为代表彩色文本的开始
    //否则认为是常规字符串
    boolean isColorfulTextStart = yylength() == 2 && isLetter(yycharat(1));
    yypushback(yylength()-1);
    if(isColorfulTextStart){
        yybegin(WAITING_COLOR_ID);
        increaseDepth();
        return COLORFUL_TEXT_START;
    }else{
        yybegin(nextStateForText());
        return STRING_TOKEN;
    }
            } 
            // fall through
          case 98: break;
          case 46: 
            { //特殊处理
    //如果匹配到的字符串长度为1，或者最后一个字符不是双引号，则认为代表本地化富文本的结束
    //否则认为是常规字符串
    boolean isRightQuote = yylength() == 1 || yycharat(yylength()-1) != '"';
    yypushback(yylength()-1);
    if(isRightQuote){
        yybegin(WAITING_PROPERTY_EOL);
        return RIGHT_QUOTE;
    }else{
        yybegin(nextStateForText());
        return STRING_TOKEN;
    }
            } 
            // fall through
          case 99: break;
          case 47: 
            { return INVALID_ESCAPE_TOKEN;
            } 
            // fall through
          case 100: break;
          case 48: 
            { return VALID_ESCAPE_TOKEN;
            } 
            // fall through
          case 101: break;
          case 49: 
            { decreaseDepth(); yybegin(nextStateForText()); return COLORFUL_TEXT_END;
            } 
            // fall through
          case 102: break;
          case 50: 
            { return DOUBLE_LEFT_BRACKET;
            } 
            // fall through
          case 103: break;
          case 51: 
            { yypushback(1); yybegin(WAITING_COMMAND_SEPARATOR); return COMMAND_FIELD_ID;
            } 
            // fall through
          case 104: break;
          case 52: 
            { yypushback(1); yybegin(WAITING_COMMAND_SEPARATOR); return COMMAND_SCOPE_ID;
            } 
            // fall through
          case 105: break;
          case 53: 
            { decreaseDepth(); decreaseDepth(); yybegin(nextStateForText()); return COLORFUL_TEXT_END;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
