// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ParadoxLocalisation.Text.flex

package icu.windea.pls.localisation.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import icu.windea.pls.model.ParadoxGameType;
import icu.windea.pls.model.constraints.ParadoxSyntaxConstraint;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.core.StdlibExtensionsKt.*;
import static icu.windea.pls.localisation.psi.ParadoxLocalisationElementTypes.*;


public class _ParadoxLocalisationTextLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHECK_COLORFUL_TEXT = 2;
  public static final int IN_COLOR_ID = 4;
  public static final int IN_COLORFUL_TEXT = 6;
  public static final int CHECK_REFERENCE = 8;
  public static final int IN_REFERENCE = 10;
  public static final int IN_REFERENCE_PARAMETER_TOKEN = 12;
  public static final int IN_SCRIPTED_VARIABLE_REFERENCE = 14;
  public static final int CHECK_COMMAND = 16;
  public static final int IN_COMMAND = 18;
  public static final int IN_COMMAND_TEXT = 20;
  public static final int CHECK_ICON = 22;
  public static final int IN_ICON = 24;
  public static final int IN_ICON_FRAME = 26;
  public static final int IN_CONCEPT_NAME = 28;
  public static final int IN_CONCEPT_TEXT = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  0,  0,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\2\0\1\7\4\0\1\10\1\11"+
    "\1\12\1\13\1\14\11\15\1\16\5\0\1\17\32\20"+
    "\1\21\1\22\1\23\1\0\1\24\1\0\32\20\1\0"+
    "\1\25\10\0\1\3\32\0\1\1\2\0\1\26\3\0"+
    "\1\27\u01d8\0\1\1\177\0\13\1\35\0\2\3\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0\u0100\30";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\2\1\24\1\5\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\6\1\21\1\36\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177"+
    "\0\u0177\0\u0177\0\u0177\0\u0190\0\u01a9\0\u0177\0\u0177\0\u01c2"+
    "\0\u0177\0\u01db\0\u0177\0\u0177\0\u01f4\0\u0177\0\u020d\0\u0226"+
    "\0\u0177\0\u023f\0\u023f\0\u0177\0\u0258\0\u0271\0\u028a\0\u0177"+
    "\0\u0177\0\u02a3\0\u0177\0\u0177\0\u02bc\0\u0177\0\u0177\0\u0177"+
    "\0\u0177\0\u023f\0\u0177";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\20\1\21\12\20\1\22\4\20\1\23\1\24\30\20"+
    "\1\25\1\20\14\26\2\27\2\26\1\27\6\26\1\24"+
    "\1\26\6\20\1\30\30\20\1\31\1\32\1\20\2\32"+
    "\1\20\2\32\1\20\1\33\1\32\1\22\2\20\1\32"+
    "\1\34\1\20\1\24\1\20\2\35\1\20\2\35\1\20"+
    "\1\36\12\35\1\22\1\20\3\35\1\20\1\24\1\35"+
    "\6\20\1\36\11\20\1\37\3\20\1\37\1\34\24\20"+
    "\1\40\7\20\2\41\2\20\24\41\1\20\2\42\1\20"+
    "\3\42\1\43\12\42\1\20\1\42\1\44\3\42\1\45"+
    "\1\42\26\20\1\46\10\20\1\21\2\20\1\47\1\20"+
    "\3\47\2\20\1\47\1\22\1\47\1\20\1\47\1\50"+
    "\1\51\1\24\7\20\1\21\6\20\1\52\3\20\1\22"+
    "\4\20\1\51\1\24\7\20\1\21\1\53\1\54\3\20"+
    "\3\55\1\20\1\55\2\20\1\44\1\55\2\20\1\24"+
    "\7\20\1\21\12\20\1\22\1\20\1\56\2\20\1\23"+
    "\1\24\1\20\35\0\1\57\24\0\2\60\2\0\24\60"+
    "\1\0\1\30\3\0\25\30\7\0\1\32\1\0\2\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\32\4\0\2\35"+
    "\1\0\2\35\2\0\12\35\2\0\3\35\2\0\1\35"+
    "\14\0\2\37\2\0\1\37\3\0\1\37\4\0\2\61"+
    "\2\0\24\61\1\0\2\42\1\0\16\42\1\0\1\42"+
    "\1\0\7\42\1\0\1\42\1\62\14\42\1\0\1\42"+
    "\1\0\5\42\2\63\2\0\24\63\12\0\1\47\1\0"+
    "\3\47\2\0\1\47\1\0\1\47\1\0\1\47\20\0"+
    "\2\52\27\0\3\55\1\0\1\55\3\0\1\55\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[725];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\4\11\2\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\3\1\2\11"+
    "\1\1\2\11\1\1\4\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private ParadoxGameType gameType;

    private Deque<Integer> nextStateByDepthStack = new ArrayDeque<>();
    private Deque<Integer> nextStateStack = new ArrayDeque<>();

    public _ParadoxLocalisationTextLexer() {
        this((java.io.Reader)null);
        this.gameType = null;
    }

    public _ParadoxLocalisationTextLexer(ParadoxGameType gameType) {
        this((java.io.Reader)null);
        this.gameType = gameType;
    }

    public ParadoxGameType getGameType() {
        return this.gameType;
    }

    private boolean isStateByDepth(int state) {
        return state == YYINITIAL || state == IN_COLORFUL_TEXT || state == IN_CONCEPT_TEXT;
    }

    private void setNextStateByDepth(int nextState) {
        if (!isStateByDepth(nextState)) {
            nextState = nextStateByDepthStack.isEmpty() ? YYINITIAL : IN_COLORFUL_TEXT;
        }
        nextStateByDepthStack.addLast(nextState);
    }

    private void beginNextStateByDepth() {
        if (nextStateByDepthStack.isEmpty()) {
            yybegin(YYINITIAL);
            return;
        }
        int nextState = nextStateByDepthStack.removeLast();
        yybegin(nextState);
    }

    private void setNextState(int nextState) {
        nextStateStack.addLast(nextState);
    }

    private void beginNextState() {
        if (nextStateStack.isEmpty()) {
            yybegin(YYINITIAL);
            return;
        }
        int nextState = nextStateStack.removeLast();
        yybegin(nextState);
    }

    private boolean isReference() {
        if (yylength() <= 1) return false;
        return yycharat(yylength() - 1) == '$';
    }

    private IElementType checkReference() {
        yypushback(yylength() - 1);
        if (isReference()) {
            yybegin(IN_REFERENCE);
            return PROPERTY_REFERENCE_START;
        } else {
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isColorfulText() {
        if (yylength() <= 1) return false;
        return isExactLetter(yycharat(1));
    }

    private IElementType checkColorfulText() {
        yypushback(yylength() - 1);
        if (isColorfulText()) {
            yybegin(IN_COLOR_ID);
            return COLORFUL_TEXT_START;
        } else {
            beginNextStateByDepth();
            return STRING_TOKEN;
        }
    }

    private boolean isCommand() {
        if (yylength() <= 1) return false;
        return yycharat(yylength() - 1) == ']';
    }

    private IElementType checkCommand() {
        yypushback(yylength() - 1);
        if (isCommand()) {
            yybegin(IN_COMMAND);
            return COMMAND_START;
        } else {
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isIcon() {
        if (yylength() <= 1) return false;
        char c = yycharat(1);
        return isExactLetter(c) || isExactDigit(c) || c == '_' || c == '$';
    }

    private IElementType checkIcon() {
        yypushback(yylength() - 1);
        if (isIcon()) {
            yybegin(IN_ICON);
            return ICON_START;
        } else {
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isConceptQuoted() {
        return yycharat(0) == '\'' && ParadoxSyntaxConstraint.LocalisationConceptQuoted.supports(this);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ParadoxLocalisationTextLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 31: break;
          case 2:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_REFERENCE);
            }
          // fall through
          case 32: break;
          case 3:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_COMMAND);
            }
          // fall through
          case 33: break;
          case 4:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_ICON);
            }
          // fall through
          case 34: break;
          case 5:
            { setNextStateByDepth(yystate()); yypushback(yylength()); yybegin(CHECK_COLORFUL_TEXT);
            }
          // fall through
          case 35: break;
          case 6:
            { return checkColorfulText();
            }
          // fall through
          case 36: break;
          case 7:
            { yypushback(yylength()); beginNextStateByDepth();
            }
          // fall through
          case 37: break;
          case 8:
            { yybegin(IN_COLORFUL_TEXT); return COLOR_TOKEN;
            }
          // fall through
          case 38: break;
          case 9:
            { return checkReference();
            }
          // fall through
          case 39: break;
          case 10:
            { setNextState(yystate()); return PROPERTY_REFERENCE_END;
            }
          // fall through
          case 40: break;
          case 11:
            { return PROPERTY_REFERENCE_TOKEN;
            }
          // fall through
          case 41: break;
          case 12:
            { yybegin(IN_SCRIPTED_VARIABLE_REFERENCE); return AT;
            }
          // fall through
          case 42: break;
          case 13:
            { yybegin(IN_REFERENCE_PARAMETER_TOKEN); return PIPE;
            }
          // fall through
          case 43: break;
          case 14:
            { return PROPERTY_REFERENCE_PARAMETER_TOKEN;
            }
          // fall through
          case 44: break;
          case 15:
            { beginNextState(); return PROPERTY_REFERENCE_END;
            }
          // fall through
          case 45: break;
          case 16:
            { return SCRIPTED_VARIABLE_REFERENCE_TOKEN;
            }
          // fall through
          case 46: break;
          case 17:
            { return checkCommand();
            }
          // fall through
          case 47: break;
          case 18:
            { if(isConceptQuoted()) {
            yybegin(IN_CONCEPT_NAME);
            return LEFT_SINGLE_QUOTE;
        }
        yypushback(1);
        yybegin(IN_COMMAND_TEXT);
            }
          // fall through
          case 48: break;
          case 19:
            { return COMMAND_TEXT_TOKEN;
            }
          // fall through
          case 49: break;
          case 20:
            { beginNextState(); return COMMAND_END;
            }
          // fall through
          case 50: break;
          case 21:
            { return checkIcon();
            }
          // fall through
          case 51: break;
          case 22:
            { return ICON_TOKEN;
            }
          // fall through
          case 52: break;
          case 23:
            { yybegin(IN_ICON_FRAME); return PIPE;
            }
          // fall through
          case 53: break;
          case 24:
            { beginNextState(); return ICON_END;
            }
          // fall through
          case 54: break;
          case 25:
            { return ICON_FRAME;
            }
          // fall through
          case 55: break;
          case 26:
            { return RIGHT_SINGLE_QUOTE;
            }
          // fall through
          case 56: break;
          case 27:
            { yybegin(IN_CONCEPT_TEXT); return COMMA;
            }
          // fall through
          case 57: break;
          case 28:
            { return CONCEPT_NAME_TOKEN;
            }
          // fall through
          case 58: break;
          case 29:
            { beginNextStateByDepth(); return COMMAND_END;
            }
          // fall through
          case 59: break;
          case 30:
            { beginNextStateByDepth(); return COLORFUL_TEXT_END;
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
