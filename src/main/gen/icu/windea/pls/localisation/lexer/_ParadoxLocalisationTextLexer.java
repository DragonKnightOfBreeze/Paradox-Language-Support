// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ParadoxLocalisation.Text.flex

package icu.windea.pls.localisation.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import icu.windea.pls.model.ParadoxGameType;
import icu.windea.pls.model.constraints.ParadoxSyntaxConstraint;
import it.unimi.dsi.fastutil.ints.*;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.core.StdlibExtensionsKt.*;
import static icu.windea.pls.localisation.psi.ParadoxLocalisationElementTypes.*;


public class _ParadoxLocalisationTextLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHECK_COLORFUL_TEXT = 2;
  public static final int IN_COLOR_ID = 4;
  public static final int IN_COLORFUL_TEXT = 6;
  public static final int CHECK_REFERENCE = 8;
  public static final int IN_PARAMETER = 10;
  public static final int IN_PARAMETER_ARGUMENT = 12;
  public static final int IN_SCRIPTED_VARIABLE_REFERENCE = 14;
  public static final int CHECK_COMMAND = 16;
  public static final int IN_COMMAND = 18;
  public static final int IN_COMMAND_TEXT = 20;
  public static final int IN_COMMAND_ARGUMENT = 22;
  public static final int CHECK_ICON = 24;
  public static final int IN_ICON = 26;
  public static final int IN_ICON_ARGUMENT = 28;
  public static final int IN_CONCEPT_NAME = 30;
  public static final int IN_CONCEPT_BLANK = 32;
  public static final int IN_CONCEPT_TEXT = 34;
  public static final int CHECK_TEXT_FORMAT = 36;
  public static final int IN_TEXT_FORMAT_ID = 38;
  public static final int IN_TEXT_FORMAT_TEXT = 40;
  public static final int CHECK_TEXT_ICON = 42;
  public static final int IN_TEXT_ICON = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  0,  0,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15,  0,  0, 16, 16, 17, 17,  0,  0, 18, 18, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\2\0\1\10\4\0\1\11\1\12"+
    "\1\13\1\14\12\15\1\16\1\17\4\0\1\20\32\21"+
    "\1\22\1\23\1\24\1\0\1\21\1\0\32\21\1\0"+
    "\1\25\10\0\1\3\32\0\1\1\2\0\1\26\3\0"+
    "\1\27\2\0\1\30\12\0\1\30\4\0\1\30\5\0"+
    "\27\30\1\0\37\30\1\0\u01ca\30\4\0\14\30\16\0"+
    "\5\30\7\0\1\30\1\0\1\30\21\0\165\30\1\0"+
    "\2\30\2\0\4\30\1\0\1\30\6\0\1\30\1\0"+
    "\3\30\1\0\1\30\1\0\24\30\1\0\123\30\1\0"+
    "\213\30\1\0\255\30\1\0\46\30\2\0\1\30\6\0"+
    "\51\30\10\0\55\30\1\0\1\30\1\0\2\30\1\0"+
    "\2\30\1\0\1\30\10\0\33\30\4\0\4\30\35\0"+
    "\13\30\5\0\112\30\4\0\146\30\1\0\10\30\2\0"+
    "\12\30\1\0\23\30\2\0\1\30\20\0\73\30\2\0"+
    "\145\30\16\0\66\30\4\0\1\30\2\0\1\30\2\0"+
    "\56\30\22\0\34\30\4\0\13\30\65\0\25\30\1\0"+
    "\10\30\25\0\17\30\1\0\201\30\2\0\12\30\1\0"+
    "\23\30\1\0\10\30\2\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\1\30\3\0\4\30\2\0\11\30\2\0"+
    "\2\30\2\0\4\30\10\0\1\30\4\0\2\30\1\0"+
    "\5\30\2\0\14\30\12\0\1\30\1\0\1\30\2\0"+
    "\3\30\1\0\6\30\4\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0"+
    "\1\30\1\0\5\30\4\0\2\30\2\0\3\30\3\0"+
    "\1\30\7\0\4\30\1\0\1\30\7\0\20\30\13\0"+
    "\3\30\1\0\11\30\1\0\3\30\1\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\2\0\12\30\1\0"+
    "\3\30\1\0\3\30\2\0\1\30\17\0\4\30\2\0"+
    "\12\30\11\0\7\30\1\0\3\30\1\0\10\30\2\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0"+
    "\5\30\2\0\11\30\2\0\2\30\2\0\3\30\10\0"+
    "\2\30\4\0\2\30\1\0\5\30\2\0\12\30\1\0"+
    "\1\30\20\0\2\30\1\0\6\30\3\0\3\30\1\0"+
    "\4\30\3\0\2\30\1\0\1\30\1\0\2\30\3\0"+
    "\2\30\3\0\3\30\3\0\14\30\4\0\5\30\3\0"+
    "\3\30\1\0\4\30\2\0\1\30\6\0\1\30\16\0"+
    "\12\30\20\0\15\30\1\0\3\30\1\0\27\30\1\0"+
    "\20\30\3\0\10\30\1\0\3\30\1\0\4\30\7\0"+
    "\2\30\1\0\3\30\5\0\4\30\2\0\12\30\20\0"+
    "\4\30\1\0\10\30\1\0\3\30\1\0\27\30\1\0"+
    "\12\30\1\0\5\30\2\0\11\30\1\0\3\30\1\0"+
    "\4\30\7\0\2\30\7\0\1\30\1\0\4\30\2\0"+
    "\12\30\1\0\2\30\15\0\4\30\1\0\10\30\1\0"+
    "\3\30\1\0\63\30\1\0\3\30\1\0\5\30\5\0"+
    "\4\30\7\0\5\30\2\0\12\30\12\0\6\30\2\0"+
    "\2\30\1\0\22\30\3\0\30\30\1\0\11\30\1\0"+
    "\1\30\2\0\7\30\3\0\1\30\4\0\6\30\1\0"+
    "\1\30\1\0\10\30\6\0\12\30\2\0\2\30\15\0"+
    "\72\30\5\0\17\30\1\0\12\30\47\0\2\30\1\0"+
    "\1\30\1\0\5\30\1\0\30\30\1\0\1\30\1\0"+
    "\27\30\2\0\5\30\1\0\1\30\1\0\6\30\2\0"+
    "\12\30\2\0\4\30\40\0\1\30\27\0\2\30\6\0"+
    "\12\30\13\0\1\30\1\0\1\30\1\0\1\30\4\0"+
    "\12\30\1\0\44\30\4\0\24\30\1\0\22\30\1\0"+
    "\44\30\11\0\1\30\71\0\112\30\6\0\116\30\2\0"+
    "\46\30\1\0\1\30\5\0\1\30\2\0\53\30\1\0"+
    "\115\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0"+
    "\4\30\2\0\51\30\1\0\4\30\2\0\41\30\1\0"+
    "\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0"+
    "\17\30\1\0\71\30\1\0\4\30\2\0\103\30\2\0"+
    "\3\30\40\0\20\30\20\0\126\30\2\0\6\30\3\0"+
    "\u016c\30\2\0\21\30\1\1\32\30\5\0\113\30\3\0"+
    "\13\30\7\0\15\30\1\0\7\30\13\0\25\30\13\0"+
    "\24\30\14\0\15\30\1\0\3\30\1\0\2\30\14\0"+
    "\124\30\3\0\1\30\4\0\2\30\2\0\12\30\41\0"+
    "\3\30\2\0\12\30\6\0\131\30\7\0\53\30\5\0"+
    "\106\30\12\0\37\30\1\0\14\30\4\0\14\30\12\0"+
    "\50\30\2\0\5\30\13\0\54\30\4\0\32\30\6\0"+
    "\12\30\46\0\34\30\4\0\77\30\1\0\35\30\2\0"+
    "\13\30\6\0\12\30\15\0\1\30\10\0\17\30\101\0"+
    "\114\30\4\0\12\30\21\0\11\30\14\0\164\30\14\0"+
    "\70\30\10\0\12\30\3\0\61\30\2\0\11\30\7\0"+
    "\53\30\2\0\3\30\20\0\3\30\1\0\47\30\5\0"+
    "\372\30\1\0\33\30\2\0\6\30\2\0\46\30\2\0"+
    "\6\30\2\0\10\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\37\30\2\0\65\30\1\0\7\30\1\0"+
    "\1\30\3\0\3\30\1\0\7\30\3\0\4\30\2\0"+
    "\6\30\4\0\15\30\5\0\3\30\1\0\7\30\3\0"+
    "\13\1\35\0\2\3\5\0\1\1\17\0\2\30\23\0"+
    "\1\30\12\0\1\1\21\0\1\30\15\0\1\30\20\0"+
    "\15\30\63\0\41\30\21\0\1\30\4\0\1\30\2\0"+
    "\12\30\1\0\1\30\3\0\5\30\6\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\4\30\1\0\13\30\2\0"+
    "\4\30\5\0\5\30\4\0\1\30\21\0\51\30\u022d\0"+
    "\64\30\26\0\57\30\1\0\57\30\1\0\205\30\6\0"+
    "\11\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0"+
    "\70\30\7\0\1\30\17\0\30\30\11\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\40\30\57\0"+
    "\1\30\320\0\1\1\4\0\3\30\31\0\17\30\1\0"+
    "\5\30\2\0\5\30\4\0\126\30\2\0\2\30\2\0"+
    "\3\30\1\0\132\30\1\0\4\30\5\0\53\30\1\0"+
    "\136\30\21\0\33\30\65\0\306\30\112\0\360\30\20\0"+
    "\215\30\103\0\56\30\2\0\15\30\3\0\34\30\24\0"+
    "\63\30\1\0\12\30\1\0\163\30\45\0\11\30\2\0"+
    "\147\30\2\0\65\30\2\0\5\30\60\0\61\30\30\0"+
    "\64\30\14\0\106\30\12\0\12\30\6\0\30\30\3\0"+
    "\1\30\1\0\61\30\2\0\44\30\14\0\35\30\3\0"+
    "\101\30\16\0\13\30\6\0\37\30\1\0\67\30\11\0"+
    "\16\30\2\0\12\30\6\0\27\30\3\0\111\30\30\0"+
    "\3\30\2\0\20\30\2\0\5\30\12\0\6\30\2\0"+
    "\6\30\2\0\6\30\11\0\7\30\1\0\7\30\1\0"+
    "\53\30\1\0\14\30\10\0\173\30\1\0\2\30\2\0"+
    "\12\30\6\0\244\30\14\0\27\30\4\0\61\30\4\0"+
    "\u0100\31\156\30\2\0\152\30\46\0\7\30\14\0\5\30"+
    "\5\0\14\30\1\0\15\30\1\0\5\30\1\0\1\30"+
    "\1\0\2\30\1\0\2\30\1\0\154\30\41\0\153\30"+
    "\22\0\100\30\2\0\66\30\50\0\14\30\4\0\20\30"+
    "\20\0\20\30\3\0\2\30\30\0\3\30\40\0\5\30"+
    "\1\0\207\30\23\0\12\30\7\0\32\30\4\0\1\30"+
    "\1\0\32\30\13\0\131\30\3\0\6\30\2\0\6\30"+
    "\2\0\6\30\2\0\3\30\43\0\14\30\1\0\32\30"+
    "\1\0\23\30\1\0\2\30\1\0\17\30\2\0\16\30"+
    "\42\0\173\30\105\0\65\30\210\0\1\30\202\0\35\30"+
    "\3\0\61\30\17\0\1\30\37\0\40\30\15\0\36\30"+
    "\5\0\53\30\5\0\36\30\2\0\44\30\4\0\10\30"+
    "\1\0\5\30\52\0\236\30\2\0\12\30\6\0\44\30"+
    "\4\0\44\30\4\0\50\30\10\0\64\30\234\0\67\30"+
    "\11\0\26\30\12\0\10\30\230\0\6\30\2\0\1\30"+
    "\1\0\54\30\1\0\2\30\3\0\1\30\2\0\27\30"+
    "\12\0\27\30\11\0\37\30\101\0\23\30\1\0\2\30"+
    "\12\0\26\30\12\0\32\30\106\0\70\30\6\0\2\30"+
    "\100\0\4\30\1\0\2\30\5\0\10\30\1\0\3\30"+
    "\1\0\35\30\2\0\3\30\4\0\1\30\40\0\35\30"+
    "\3\0\35\30\43\0\10\30\1\0\36\30\31\0\66\30"+
    "\12\0\26\30\12\0\23\30\15\0\22\30\156\0\111\30"+
    "\67\0\63\30\15\0\63\30\15\0\50\30\10\0\12\30"+
    "\306\0\35\30\12\0\1\30\10\0\41\30\217\0\27\30"+
    "\11\0\107\30\37\0\12\30\17\0\74\30\25\0\31\30"+
    "\7\0\12\30\6\0\65\30\1\0\12\30\4\0\3\30"+
    "\11\0\44\30\2\0\1\30\11\0\105\30\4\0\4\30"+
    "\3\0\13\30\1\0\1\30\43\0\22\30\1\0\45\30"+
    "\6\0\1\30\101\0\7\30\1\0\1\30\1\0\4\30"+
    "\1\0\17\30\1\0\12\30\7\0\73\30\5\0\12\30"+
    "\6\0\4\30\1\0\10\30\2\0\2\30\2\0\26\30"+
    "\1\0\7\30\1\0\2\30\1\0\5\30\1\0\12\30"+
    "\2\0\2\30\2\0\3\30\2\0\1\30\6\0\1\30"+
    "\5\0\7\30\2\0\7\30\3\0\5\30\213\0\113\30"+
    "\5\0\12\30\4\0\2\30\40\0\106\30\1\0\1\30"+
    "\10\0\12\30\246\0\66\30\2\0\11\30\27\0\6\30"+
    "\42\0\101\30\3\0\1\30\13\0\12\30\46\0\71\30"+
    "\7\0\12\30\66\0\33\30\2\0\17\30\4\0\12\30"+
    "\306\0\73\30\145\0\112\30\25\0\1\30\240\0\10\30"+
    "\2\0\56\30\2\0\10\30\1\0\2\30\33\0\77\30"+
    "\10\0\1\30\10\0\112\30\3\0\1\30\42\0\71\30"+
    "\7\0\11\30\1\0\55\30\1\0\11\30\17\0\12\30"+
    "\30\0\36\30\2\0\26\30\1\0\16\30\111\0\7\30"+
    "\1\0\2\30\1\0\54\30\3\0\1\30\1\0\2\30"+
    "\1\0\11\30\10\0\12\30\6\0\6\30\1\0\2\30"+
    "\1\0\45\30\1\0\2\30\1\0\6\30\7\0\12\30"+
    "\u0136\0\27\30\11\0\232\30\146\0\157\30\21\0\304\30"+
    "\274\0\57\30\321\0\107\30\271\0\71\30\7\0\37\30"+
    "\1\0\12\30\146\0\36\30\2\0\5\30\13\0\67\30"+
    "\11\0\4\30\14\0\12\30\11\0\25\30\5\0\23\30"+
    "\260\0\100\30\200\0\113\30\4\0\71\30\7\0\21\30"+
    "\100\0\2\30\1\0\1\30\34\0\370\30\10\0\363\30"+
    "\15\0\37\30\61\0\3\30\21\0\4\30\10\0\u018c\30"+
    "\4\0\153\30\5\0\15\30\3\0\11\30\7\0\12\30"+
    "\3\0\2\30\306\0\5\30\3\0\6\30\10\0\10\30"+
    "\2\0\7\30\36\0\4\30\224\0\3\30\273\0\125\30"+
    "\1\0\107\30\1\0\2\30\2\0\1\30\2\0\2\30"+
    "\2\0\4\30\1\0\14\30\1\0\1\30\1\0\7\30"+
    "\1\0\101\30\1\0\4\30\2\0\10\30\1\0\7\30"+
    "\1\0\34\30\1\0\4\30\1\0\5\30\1\0\1\30"+
    "\3\0\7\30\1\0\u0154\30\2\0\31\30\1\0\31\30"+
    "\1\0\37\30\1\0\31\30\1\0\37\30\1\0\31\30"+
    "\1\0\37\30\1\0\31\30\1\0\37\30\1\0\31\30"+
    "\1\0\10\30\2\0\151\30\4\0\62\30\10\0\1\30"+
    "\16\0\1\30\26\0\5\30\1\0\17\30\120\0\7\30"+
    "\1\0\21\30\2\0\7\30\1\0\2\30\1\0\5\30"+
    "\325\0\55\30\3\0\16\30\2\0\12\30\4\0\1\30"+
    "\u0171\0\72\30\6\0\305\30\13\0\7\30\51\0\114\30"+
    "\4\0\12\30\246\0\4\30\1\0\33\30\1\0\2\30"+
    "\1\0\1\30\2\0\1\30\1\0\12\30\1\0\4\30"+
    "\1\0\1\30\1\0\1\30\6\0\1\30\4\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\3\30\1\0\2\30"+
    "\1\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\2\30\1\0\1\30"+
    "\2\0\4\30\1\0\7\30\1\0\4\30\1\0\4\30"+
    "\1\0\1\30\1\0\12\30\1\0\21\30\5\0\3\30"+
    "\1\0\5\30\1\0\21\30\164\0\32\30\6\0\32\30"+
    "\6\0\32\30\166\0\327\30\51\0\65\30\13\0\336\30"+
    "\2\0\u0182\30\16\0\u0131\30\37\0\36\30\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\27"+
    "\1\3\1\26\1\30\1\31\1\10\1\32\1\33\1\34"+
    "\2\35\1\36\1\37\1\40\1\41\1\42\1\41\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\12\2\15\1\0\1\24\1\26"+
    "\1\0\1\56\1\32\1\43\1\57\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"+
    "\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c\0\u0186"+
    "\0\u01a0\0\u01ba\0\u01d4\0\u01ee\0\u0208\0\u0222\0\u023c\0\u023c"+
    "\0\u023c\0\u023c\0\u023c\0\u0256\0\u023c\0\u0270\0\u023c\0\u023c"+
    "\0\u028a\0\u023c\0\u02a4\0\u023c\0\u023c\0\u02be\0\u02d8\0\u02f2"+
    "\0\u023c\0\u030c\0\u0326\0\u0340\0\u030c\0\u035a\0\u023c\0\u030c"+
    "\0\u0374\0\u038e\0\u03a8\0\u023c\0\u023c\0\u02be\0\u023c\0\u023c"+
    "\0\u03c2\0\u023c\0\u03dc\0\u0256\0\u03f6\0\u023c\0\u0410\0\u042a"+
    "\0\u023c\0\u0444\0\u023c\0\u045e\0\u023c\0\u0478\0\u023c\0\u023c"+
    "\0\u023c\0\u0492\0\u023c\0\u0492\0\u023c\0\u023c\0\u04ac\0\u030c"+
    "\0\u023c\0\u023c\0\u023c\0\u023c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\25\1\26\1\27\10\25\1\30\1\25\1\31\1\25"+
    "\1\32\1\25\1\33\1\34\2\25\27\35\1\36\2\35"+
    "\15\37\1\40\3\37\1\40\5\37\1\34\1\40\1\37"+
    "\7\35\1\41\31\35\1\42\1\43\1\35\2\43\1\35"+
    "\1\43\2\35\1\44\1\43\1\31\2\35\1\45\1\35"+
    "\1\34\2\35\2\46\1\35\2\46\1\35\1\46\1\42"+
    "\12\46\1\31\2\35\2\46\1\34\2\46\7\35\1\42"+
    "\11\35\1\47\3\35\1\45\26\35\1\50\7\35\2\51"+
    "\2\35\25\51\1\35\1\52\1\53\1\54\1\53\3\52"+
    "\1\55\1\56\11\52\1\35\1\52\1\57\1\60\1\52"+
    "\1\61\2\52\2\46\1\35\2\46\1\35\1\46\1\27"+
    "\12\46\2\35\1\57\2\46\1\34\2\46\26\35\1\62"+
    "\12\35\1\27\2\35\1\63\1\35\2\63\3\35\1\63"+
    "\1\31\1\63\1\35\1\64\1\65\1\34\2\35\2\46"+
    "\1\35\2\46\1\35\1\46\1\27\12\46\1\31\2\35"+
    "\1\46\1\66\1\34\2\46\7\35\1\27\1\67\1\70"+
    "\3\35\2\71\2\35\1\71\2\35\1\57\2\35\1\34"+
    "\2\35\1\72\3\73\23\72\1\74\2\72\6\35\1\75"+
    "\23\35\1\76\3\77\2\76\1\100\1\101\5\76\3\102"+
    "\1\76\1\102\1\103\4\76\1\34\1\102\1\76\20\35"+
    "\1\104\15\35\1\105\2\35\1\27\5\35\1\106\3\35"+
    "\1\106\1\31\4\35\1\34\1\106\1\35\6\25\2\0"+
    "\10\25\1\0\1\25\1\0\1\25\1\0\1\25\2\0"+
    "\2\25\4\0\1\107\63\0\1\110\25\0\2\111\2\0"+
    "\25\111\1\0\1\112\1\113\2\0\25\112\1\114\10\0"+
    "\1\43\1\0\2\43\1\0\1\43\3\0\1\43\10\0"+
    "\2\46\1\0\2\46\1\0\1\46\1\0\12\46\3\0"+
    "\2\46\1\0\2\46\15\0\1\47\3\0\1\47\10\0"+
    "\2\115\2\0\25\115\1\0\2\52\1\0\5\52\1\0"+
    "\11\52\1\0\1\52\1\0\6\52\1\53\1\54\1\53"+
    "\4\52\1\0\11\52\1\0\1\52\1\0\5\52\1\0"+
    "\3\54\26\0\2\56\1\0\5\56\1\116\12\56\1\117"+
    "\6\56\2\52\1\0\1\52\1\120\3\52\1\0\11\52"+
    "\1\0\1\52\1\0\5\52\2\121\2\0\25\121\13\0"+
    "\1\63\1\0\2\63\3\0\1\63\1\0\1\63\23\0"+
    "\2\71\2\0\1\71\11\0\3\73\26\0\2\122\2\0"+
    "\25\122\2\0\3\77\32\0\1\123\42\0\3\102\1\0"+
    "\1\102\6\0\1\102\1\0\2\124\2\0\25\124\16\0"+
    "\1\106\3\0\1\106\6\0\1\106\1\0\1\114\3\0"+
    "\3\114\1\112\22\114\32\56";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1222];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\2\1\5\11\1\1\1\11\1\1\2\11\1\1"+
    "\1\11\1\1\2\11\3\1\1\11\5\1\1\11\4\1"+
    "\2\11\1\1\2\11\1\1\1\11\3\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\0\2\11\1\0\1\1\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private ParadoxGameType gameType;

    // TODO 1.4.2+ 这里的状态栈处理可能有些问题，不过除非对于存在语法错误的场景，否则问题应当不大
    private IntStack nextStateStack = null;

    public _ParadoxLocalisationTextLexer() {
        this((java.io.Reader)null);
        this.gameType = null;
    }

    public _ParadoxLocalisationTextLexer(ParadoxGameType gameType) {
        this((java.io.Reader)null);
        this.gameType = gameType;
    }

    public ParadoxGameType getGameType() {
        return this.gameType;
    }

    private void setNextState(int nextState) {
        if (nextStateStack == null) {
            nextStateStack = new IntArrayList();
        }
        nextStateStack.push(nextState);
    }

    private void beginNextState() {
        if (nextStateStack == null || nextStateStack.isEmpty()) {
            yybegin(YYINITIAL);
            return;
        }
        int nextState = nextStateStack.popInt();
        yybegin(nextState);
    }

    private boolean isReference() {
        if (yylength() <= 1) return false;
        return yycharat(yylength() - 1) == '$';
    }

    private IElementType checkReference() {
        if (isReference()) {
            yypushback(yylength() - 1);
            yybegin(IN_PARAMETER);
            return PARAMETER_START;
        } else {
            yypushback(yylength() - 1);
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isColorfulText() {
        if (yylength() <= 1) return false;
        return isExactWord(yycharat(1)); // exact letter after prefix
    }

    private IElementType checkColorfulText() {
        if (isColorfulText()) {
            yypushback(yylength() - 1);
            yybegin(IN_COLOR_ID);
            return COLORFUL_TEXT_START;
        } else {
            // skip into IN_COLORFUL_TEXT, rather than fallback
            yypushback(yylength() - 1);
            yybegin(IN_COLORFUL_TEXT);
            return COLORFUL_TEXT_START;
        }
    }

    private boolean isCommand() {
        if (yylength() <= 1) return false;
        return yycharat(yylength() - 1) != '['; // not double quote
    }

    private IElementType checkCommand() {
        if (isCommand()) {
            yypushback(yylength() - 1);
            yybegin(IN_COMMAND);
            return LEFT_BRACKET;
        } else {
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isIcon() {
        if (yylength() <= 1) return false;
        char c = yycharat(1);
        return c == '[' || c == '$' || isExactWord(c);
    }

    private IElementType checkIcon() {
        if (isIcon()) {
            yypushback(yylength() - 1);
            yybegin(IN_ICON);
            return ICON_START;
        } else {
            yypushback(yylength() - 1);
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isTextFormat() {
        if (yylength() <= 1) return false;
        char c = yycharat(1);
        return c == '[' || c == '$' || isExactWord(c);
    }

    private IElementType checkTextFormat() {
        if (isTextFormat()) {
            yypushback(yylength() - 1);
            yybegin(IN_TEXT_FORMAT_ID);
            return TEXT_FORMAT_START;
        } else {
            yypushback(yylength() - 1);
            beginNextState();
            return STRING_TOKEN;
        }
    }

    private boolean isTextIcon() {
        if (yylength() <= 1) return false;
        char c = yycharat(1);
        return c == '[' || c == '$' || isExactWord(c);
    }

    private IElementType checkTextIcon() {
        if (isTextIcon()) {
            yypushback(yylength() - 1);
            yybegin(IN_TEXT_ICON);
            return TEXT_ICON_START;
        } else {
            yypushback(yylength() - 1);
            beginNextState();
            return STRING_TOKEN;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ParadoxLocalisationTextLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return STRING_TOKEN;
            }
          // fall through
          case 48: break;
          case 2:
            { if (!ParadoxSyntaxConstraint.LocalisationTextFormat.supports(this)) return STRING_TOKEN;
        setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_TEXT_FORMAT);
            }
          // fall through
          case 49: break;
          case 3:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_REFERENCE);
            }
          // fall through
          case 50: break;
          case 4:
            { if (!ParadoxSyntaxConstraint.LocalisationTextIcon.supports(this)) return STRING_TOKEN;
        setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_TEXT_ICON);
            }
          // fall through
          case 51: break;
          case 5:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_COMMAND);
            }
          // fall through
          case 52: break;
          case 6:
            { if (yystate() != IN_CONCEPT_TEXT) return STRING_TOKEN;
        beginNextState(); return RIGHT_BRACKET;
            }
          // fall through
          case 53: break;
          case 7:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_ICON);
            }
          // fall through
          case 54: break;
          case 8:
            { yypushback(yylength()); yybegin(CHECK_COLORFUL_TEXT);
            }
          // fall through
          case 55: break;
          case 9:
            { return BAD_CHARACTER;
            }
          // fall through
          case 56: break;
          case 10:
            { return checkColorfulText();
            }
          // fall through
          case 57: break;
          case 11:
            { yypushback(yylength()); beginNextState();
            }
          // fall through
          case 58: break;
          case 12:
            { yybegin(IN_COLORFUL_TEXT); return COLOR_TOKEN;
            }
          // fall through
          case 59: break;
          case 13:
            { return checkReference();
            }
          // fall through
          case 60: break;
          case 14:
            { beginNextState(); return PARAMETER_END;
            }
          // fall through
          case 61: break;
          case 15:
            { return PARAMETER_TOKEN;
            }
          // fall through
          case 62: break;
          case 16:
            { yybegin(IN_SCRIPTED_VARIABLE_REFERENCE); return AT;
            }
          // fall through
          case 63: break;
          case 17:
            { yybegin(IN_PARAMETER_ARGUMENT); return PIPE;
            }
          // fall through
          case 64: break;
          case 18:
            { return ARGUMENT_TOKEN;
            }
          // fall through
          case 65: break;
          case 19:
            { return SCRIPTED_VARIABLE_REFERENCE_TOKEN;
            }
          // fall through
          case 66: break;
          case 20:
            { return checkCommand();
            }
          // fall through
          case 67: break;
          case 21:
            { if(yycharat(0) == '\'' && ParadoxSyntaxConstraint.LocalisationConceptCommand.supports(this)) {
                    yybegin(IN_CONCEPT_NAME);
                    return LEFT_SINGLE_QUOTE;
                }
                yypushback(1);
                yybegin(IN_COMMAND_TEXT);
            }
          // fall through
          case 68: break;
          case 22:
            { return COMMAND_TEXT_TOKEN;
            }
          // fall through
          case 69: break;
          case 23:
            { return WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 24:
            { beginNextState(); return RIGHT_BRACKET;
            }
          // fall through
          case 71: break;
          case 25:
            { yybegin(IN_COMMAND_ARGUMENT); return PIPE;
            }
          // fall through
          case 72: break;
          case 26:
            { return checkIcon();
            }
          // fall through
          case 73: break;
          case 27:
            { return ICON_TOKEN;
            }
          // fall through
          case 74: break;
          case 28:
            { yybegin(IN_ICON_ARGUMENT); return PIPE;
            }
          // fall through
          case 75: break;
          case 29:
            { beginNextState(); return ICON_END;
            }
          // fall through
          case 76: break;
          case 30:
            { return RIGHT_SINGLE_QUOTE;
            }
          // fall through
          case 77: break;
          case 31:
            { yybegin(IN_CONCEPT_BLANK); return COMMA;
            }
          // fall through
          case 78: break;
          case 32:
            { return CONCEPT_NAME_TOKEN;
            }
          // fall through
          case 79: break;
          case 33:
            { yypushback(yylength()); setNextState(IN_CONCEPT_TEXT); yybegin(IN_CONCEPT_TEXT);
            }
          // fall through
          case 80: break;
          case 34:
            { setNextState(IN_CONCEPT_TEXT); yybegin(IN_CONCEPT_TEXT); return WHITE_SPACE;
            }
          // fall through
          case 81: break;
          case 35:
            { return checkTextFormat();
            }
          // fall through
          case 82: break;
          case 36:
            { yypushback(yylength()); setNextState(IN_TEXT_FORMAT_TEXT); yybegin(IN_TEXT_FORMAT_TEXT);
            }
          // fall through
          case 83: break;
          case 37:
            { setNextState(IN_TEXT_FORMAT_TEXT); yybegin(IN_TEXT_FORMAT_TEXT); return WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 38:
            { setNextState(yystate()); yypushback(yylength()); yybegin(CHECK_TEXT_FORMAT);
            }
          // fall through
          case 85: break;
          case 39:
            { setNextState(yylength()); yypushback(yylength()); yybegin(CHECK_REFERENCE);
            }
          // fall through
          case 86: break;
          case 40:
            { return TEXT_FORMAT_TOKEN;
            }
          // fall through
          case 87: break;
          case 41:
            { setNextState(yylength()); yypushback(yylength()); yybegin(CHECK_COMMAND);
            }
          // fall through
          case 88: break;
          case 42:
            { return checkTextIcon();
            }
          // fall through
          case 89: break;
          case 43:
            { beginNextState(); return TEXT_ICON_END;
            }
          // fall through
          case 90: break;
          case 44:
            { return TEXT_ICON_TOKEN;
            }
          // fall through
          case 91: break;
          case 45:
            { if (!ParadoxSyntaxConstraint.LocalisationTextFormat.supports(this)) return STRING_TOKEN;
        beginNextState(); return TEXT_FORMAT_END;
            }
          // fall through
          case 92: break;
          case 46:
            { beginNextState(); return COLORFUL_TEXT_END;
            }
          // fall through
          case 93: break;
          case 47:
            { beginNextState(); return TEXT_FORMAT_END;
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
