// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ParadoxScript.flex

package icu.windea.pls.script.lexer;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.util.concurrent.atomic.*;
import icu.windea.pls.model.constraints.ParadoxSyntaxConstraint;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;

// Lexer for Paradox Script.
// Notes:
// - Uses a stack to manage nested braces/brackets.
// - templateStateRef/parameterStateRef track states to resume after parameters/inline sections.


public class _ParadoxScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_SCRIPTED_VARIABLE = 2;
  public static final int IN_SCRIPTED_VARIABLE_NAME = 4;
  public static final int IN_SCRIPTED_VARIABLE_VALUE = 6;
  public static final int IN_PROPERTY_OR_VALUE = 8;
  public static final int IN_PROPERTY_VALUE = 10;
  public static final int IN_KEY = 12;
  public static final int IN_QUOTED_KEY = 14;
  public static final int IN_STRING = 16;
  public static final int IN_QUOTED_STRING = 18;
  public static final int IN_SCRIPTED_VARIABLE_REFERENCE = 20;
  public static final int IN_SCRIPTED_VARIABLE_REFERENCE_NAME = 22;
  public static final int IN_PARAMETER = 24;
  public static final int IN_PARAMETER_ARGUMENT = 26;
  public static final int IN_PARAMETER_ARGUMENT_END = 28;
  public static final int IN_PARAMETER_CONDITION = 30;
  public static final int IN_PARAMETER_CONDITION_EXPRESSION = 32;
  public static final int IN_PARAMETER_CONDITION_BODY = 34;
  public static final int IN_INLINE_MATH = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\6\0\1\10\1\0\1\10\1\11"+
    "\1\0\1\12\2\13\1\14\2\13\1\15\3\13\2\0"+
    "\1\16\1\17\1\20\1\21\1\22\32\23\1\24\1\25"+
    "\1\26\1\0\1\23\1\0\1\23\1\27\2\23\1\30"+
    "\1\23\1\31\1\32\5\23\1\33\1\34\2\23\1\35"+
    "\1\36\2\23\1\37\2\23\1\40\1\23\1\41\1\42"+
    "\1\43\7\0\1\3\32\0\1\44\u01bf\0\12\45\206\0"+
    "\12\45\306\0\12\45\234\0\12\45\166\0\12\45\140\0"+
    "\12\45\166\0\12\45\106\0\12\45\u0116\0\12\45\106\0"+
    "\12\45\346\0\1\44\u015f\0\12\45\46\0\12\45\u012c\0"+
    "\12\45\200\0\12\45\246\0\12\45\6\0\12\45\266\0"+
    "\12\45\126\0\12\45\206\0\12\45\6\0\12\45\246\0"+
    "\13\44\35\0\2\3\5\0\1\44\57\0\1\44\240\0"+
    "\1\44\u01cf\0\12\45\46\0\12\45\306\0\12\45\26\0"+
    "\12\45\126\0\12\45\u0196\0\12\45\6\0\u0100\46\240\0"+
    "\12\45\206\0\12\45\u012c\0\12\45\200\0\12\45\74\0"+
    "\12\45\220\0\12\45\166\0\12\45\146\0\12\45\206\0"+
    "\12\45\106\0\12\45\266\0\12\45\u0164\0\62\45\100\0"+
    "\12\45\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\1\1\1\2\2\1\1\3\2\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\4\1\1\14"+
    "\1\15\2\16\1\17\1\16\1\20\1\13\1\21\1\22"+
    "\1\23\1\24\1\20\4\25\1\26\1\16\2\25\1\20"+
    "\1\27\2\30\1\10\2\31\2\2\1\31\1\10\1\32"+
    "\2\33\1\10\1\34\1\20\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\52\1\53\1\0\1\54\1\1\1\54\1\55"+
    "\1\1\1\54\1\0\1\56\1\57\1\60\1\61\1\62"+
    "\1\0\3\1\1\63\2\1\1\0\1\17\1\25\1\0"+
    "\1\64\1\65\1\25\1\30\2\0\1\32\1\0\1\1"+
    "\1\54\1\0\2\1\1\0\1\1\1\0\1\1\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03a8\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492"+
    "\0\u04b9\0\u02e5\0\u04e0\0\u0507\0\u052e\0\u0555\0\u041d\0\u041d"+
    "\0\u041d\0\u057c\0\u05a3\0\u046b\0\u05a3\0\u041d\0\u041d\0\u041d"+
    "\0\u05ca\0\u041d\0\u041d\0\u05f1\0\u0618\0\u063f\0\u0666\0\u063f"+
    "\0\u0492\0\u068d\0\u06b4\0\u04b9\0\u0492\0\u06db\0\u0702\0\u041d"+
    "\0\u0729\0\u0750\0\u0777\0\u0750\0\u041d\0\u079e\0\u07c5\0\u07ec"+
    "\0\u041d\0\u0813\0\u083a\0\u083a\0\u0861\0\u041d\0\u041d\0\u0888"+
    "\0\u041d\0\u08af\0\u041d\0\u08d6\0\u041d\0\u08fd\0\u041d\0\u04b9"+
    "\0\u041d\0\u0924\0\u094b\0\u041d\0\u0972\0\u02e5\0\u0972\0\u041d"+
    "\0\u041d\0\u0999\0\u035a\0\u09c0\0\u03cf\0\u041d\0\u041d\0\u041d"+
    "\0\u041d\0\u09e7\0\u04b9\0\u041d\0\u0a0e\0\u02e5\0\u0a35\0\u0a5c"+
    "\0\u0a83\0\u041d\0\u041d\0\u0aaa\0\u0666\0\u05f1\0\u0ad1\0\u041d"+
    "\0\u079e\0\u0777\0\u041d\0\u0813\0\u0af8\0\u0af8\0\u0b1f\0\u0b46"+
    "\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u041d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\24\3\25\1\26\1\27\1\30\1\24\1\31\1\32"+
    "\4\33\1\34\1\35\1\36\1\37\1\40\1\24\1\41"+
    "\1\24\1\42\3\24\1\43\1\44\1\24\1\45\2\24"+
    "\1\46\1\47\1\24\1\50\1\25\2\24\1\51\3\25"+
    "\1\52\1\51\1\30\1\53\6\51\1\34\1\35\1\36"+
    "\1\54\1\51\1\53\1\55\1\51\1\56\12\53\1\57"+
    "\1\51\1\50\1\25\3\51\3\25\2\51\1\30\1\60"+
    "\2\51\4\61\1\51\1\62\3\51\1\61\1\63\1\51"+
    "\1\56\12\61\1\57\1\51\1\50\1\25\2\51\1\64"+
    "\3\25\1\64\1\65\1\30\1\51\1\66\1\67\4\70"+
    "\4\51\1\71\1\64\1\63\1\64\1\56\4\64\1\72"+
    "\4\64\1\73\1\57\1\64\1\50\1\25\2\64\1\24"+
    "\3\25\1\26\1\27\1\30\1\24\1\31\1\32\4\33"+
    "\1\34\1\35\1\36\1\54\1\40\1\24\1\74\1\24"+
    "\1\42\3\24\1\43\1\44\1\24\1\45\2\24\1\46"+
    "\1\57\1\24\1\50\1\25\3\24\3\25\1\24\1\27"+
    "\1\30\1\24\1\31\1\32\4\33\4\51\1\75\1\24"+
    "\1\74\1\24\1\42\3\24\1\43\1\44\1\24\1\45"+
    "\2\24\1\46\1\57\1\24\1\50\1\25\2\24\1\76"+
    "\3\25\1\77\1\100\1\30\1\60\6\76\1\34\1\35"+
    "\1\36\1\37\1\100\1\76\1\63\1\76\1\56\12\76"+
    "\1\57\1\76\1\50\1\25\2\76\1\101\1\102\1\103"+
    "\1\104\1\101\1\105\1\101\1\60\15\101\1\106\16\101"+
    "\1\102\2\101\1\107\3\25\1\107\1\100\1\30\1\60"+
    "\6\107\5\100\1\107\1\63\1\107\1\56\12\107\1\57"+
    "\1\107\1\50\1\25\2\107\5\110\1\111\1\110\1\60"+
    "\15\110\1\112\21\110\1\51\3\25\2\51\1\30\1\113"+
    "\13\51\1\113\1\114\1\51\1\56\12\113\1\57\1\51"+
    "\1\50\1\25\3\51\3\25\2\51\1\30\1\60\2\51"+
    "\4\115\5\51\1\115\1\63\1\51\1\56\12\115\1\57"+
    "\1\51\1\50\1\25\2\51\1\100\3\116\2\100\1\116"+
    "\1\117\13\100\1\120\1\63\1\100\1\56\12\120\1\57"+
    "\1\121\1\50\1\116\2\100\1\122\3\116\2\122\1\116"+
    "\1\117\6\122\4\100\2\122\1\63\1\122\1\56\12\122"+
    "\1\57\1\122\1\50\1\116\2\122\1\100\3\116\2\100"+
    "\1\116\1\117\14\100\1\63\1\100\1\56\12\100\1\57"+
    "\1\100\1\50\1\116\2\100\1\51\3\25\2\51\1\30"+
    "\15\51\1\123\1\51\1\56\12\51\1\57\1\51\1\50"+
    "\1\25\2\51\1\100\3\124\1\125\1\100\1\30\14\100"+
    "\1\126\2\100\1\127\12\126\1\57\1\100\1\50\1\124"+
    "\2\100\1\24\3\25\1\24\1\27\1\30\1\24\1\31"+
    "\1\32\4\33\4\51\1\71\1\24\1\130\1\24\1\42"+
    "\3\24\1\43\1\44\1\24\1\45\2\24\1\46\1\131"+
    "\1\24\1\50\1\25\2\24\1\132\1\133\1\124\1\133"+
    "\2\132\1\30\15\132\1\100\1\132\1\134\12\132\1\57"+
    "\1\132\1\50\1\133\2\132\1\24\3\135\1\136\1\137"+
    "\1\0\7\24\4\140\17\24\1\0\1\24\1\0\1\135"+
    "\2\24\1\0\3\25\40\0\1\25\2\0\1\24\3\135"+
    "\1\136\1\137\1\0\7\24\1\140\1\141\2\140\17\24"+
    "\1\0\1\24\1\0\1\135\2\24\2\27\1\142\1\27"+
    "\1\143\1\137\10\27\4\143\3\27\1\144\21\27\2\30"+
    "\1\0\44\30\1\24\3\135\1\136\1\137\1\0\2\24"+
    "\1\32\4\33\4\140\17\24\1\0\1\24\1\0\1\135"+
    "\3\24\3\135\1\136\1\137\1\0\3\24\4\145\4\140"+
    "\17\24\1\0\1\24\1\0\1\135\2\24\17\0\1\146"+
    "\1\141\114\0\1\147\46\0\1\150\53\0\1\151\1\152"+
    "\21\0\1\153\3\0\1\153\1\154\1\0\7\153\4\0"+
    "\17\153\1\0\1\153\2\0\2\153\1\24\3\135\1\136"+
    "\1\137\1\0\7\24\4\140\14\24\1\155\2\24\1\0"+
    "\1\24\1\0\1\135\3\24\3\135\1\136\1\137\1\0"+
    "\7\24\4\140\12\24\1\156\4\24\1\0\1\24\1\0"+
    "\1\135\3\24\3\135\1\136\1\137\1\0\7\24\4\140"+
    "\7\24\1\157\7\24\1\0\1\24\1\0\1\135\3\24"+
    "\3\135\1\136\1\137\1\0\7\24\4\140\6\24\1\160"+
    "\10\24\1\0\1\24\1\0\1\135\2\24\17\0\1\141"+
    "\27\0\1\53\3\161\1\53\2\0\10\53\1\162\2\53"+
    "\1\0\16\53\1\0\1\53\1\0\1\161\2\53\12\0"+
    "\4\61\5\0\1\61\3\0\12\61\6\0\1\64\3\0"+
    "\1\64\1\163\2\0\6\64\4\0\2\64\1\0\1\64"+
    "\1\0\12\64\1\0\1\64\2\0\2\64\5\65\1\163"+
    "\17\65\1\164\21\65\1\64\3\0\1\64\1\163\2\0"+
    "\1\64\1\67\4\70\4\0\2\64\1\0\1\64\1\0"+
    "\12\64\1\0\1\64\2\0\3\64\3\0\1\64\1\163"+
    "\2\0\2\64\4\165\4\0\2\64\1\0\1\64\1\0"+
    "\12\64\1\0\1\64\2\0\3\64\3\0\1\64\1\163"+
    "\2\0\6\64\4\0\2\64\1\0\1\64\1\0\5\64"+
    "\1\166\4\64\1\0\1\64\2\0\3\64\3\0\1\64"+
    "\1\163\2\0\6\64\4\0\2\64\1\0\1\64\1\0"+
    "\1\64\1\167\10\64\1\0\1\64\2\0\2\64\1\76"+
    "\3\0\1\76\1\170\2\0\6\76\4\0\2\76\1\0"+
    "\1\76\1\0\12\76\1\0\1\76\2\0\3\76\3\0"+
    "\1\76\1\170\2\0\6\76\1\0\1\141\2\0\2\76"+
    "\1\0\1\76\1\0\12\76\1\0\1\76\2\0\2\76"+
    "\2\101\1\0\2\101\1\105\1\101\1\0\15\101\1\171"+
    "\22\101\1\102\1\103\1\104\1\101\1\105\1\101\1\0"+
    "\15\101\1\171\16\101\1\102\2\101\1\0\1\172\2\103"+
    "\40\0\1\172\2\0\47\101\1\107\3\0\1\107\1\173"+
    "\2\0\6\107\4\0\2\107\1\0\1\107\1\0\12\107"+
    "\1\0\1\107\2\0\2\107\5\110\1\111\1\110\1\0"+
    "\15\110\1\174\70\110\5\113\2\0\10\113\1\0\2\113"+
    "\1\0\2\113\1\0\10\113\1\0\2\113\1\0\1\113"+
    "\1\0\3\113\12\0\4\115\5\0\1\115\3\0\12\115"+
    "\20\0\4\120\5\0\1\120\3\0\12\120\6\0\1\122"+
    "\3\0\2\122\2\0\6\122\4\0\2\122\1\0\1\122"+
    "\1\0\12\122\1\0\1\122\2\0\2\122\1\0\3\124"+
    "\40\0\1\124\14\0\4\126\5\0\1\126\3\0\12\126"+
    "\6\0\2\132\1\0\3\132\1\0\15\132\1\0\1\132"+
    "\1\0\12\132\1\0\1\132\1\0\4\132\1\133\1\124"+
    "\1\133\2\132\1\0\15\132\1\0\1\132\1\0\12\132"+
    "\1\0\1\132\1\0\1\133\2\132\1\0\3\135\1\140"+
    "\11\0\4\140\22\0\1\135\2\0\1\175\3\142\1\176"+
    "\1\154\10\175\4\176\3\175\1\177\16\175\1\142\2\175"+
    "\2\27\2\175\42\27\1\175\24\0\1\151\22\0\1\24"+
    "\3\135\1\136\1\137\1\0\7\24\4\140\15\24\1\200"+
    "\1\24\1\0\1\24\1\0\1\135\3\24\3\135\1\136"+
    "\1\137\1\0\7\24\4\140\5\24\1\201\11\24\1\0"+
    "\1\24\1\0\1\135\3\24\3\135\1\136\1\137\1\0"+
    "\7\24\4\140\14\24\1\156\2\24\1\0\1\24\1\0"+
    "\1\135\2\24\1\0\3\161\13\0\1\162\24\0\1\161"+
    "\2\0\47\65\1\64\3\0\1\64\1\163\2\0\6\64"+
    "\4\0\2\64\1\0\1\64\1\0\7\64\1\166\2\64"+
    "\1\0\1\64\2\0\2\64\5\175\1\154\17\175\1\177"+
    "\70\175\1\24\1\202\2\135\1\136\1\137\1\0\5\24"+
    "\1\203\1\24\4\140\17\24\1\204\1\24\1\0\1\135"+
    "\3\24\1\202\2\135\1\136\1\137\1\0\7\24\4\140"+
    "\17\24\1\204\1\24\1\0\1\135\2\24\1\0\1\202"+
    "\2\135\1\140\11\0\4\140\17\0\1\204\2\0\1\135"+
    "\2\0\1\24\3\135\1\136\1\137\1\0\6\24\1\205"+
    "\4\140\17\24\1\0\1\24\1\0\1\135\2\24\1\0"+
    "\1\204\1\0\1\204\5\0\5\204\25\0\1\206\2\204"+
    "\1\0\1\24\3\135\1\136\1\137\1\0\3\24\1\201"+
    "\3\24\4\140\17\24\1\0\1\24\1\0\1\135\2\24";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3120];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\11\1\1\11\11\1\3\11\4\1\3\11\1\1"+
    "\2\11\14\1\1\11\4\1\1\11\3\1\1\11\4\1"+
    "\2\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\0\2\1\2\11"+
    "\2\1\1\0\1\1\4\11\1\0\1\1\1\11\4\1"+
    "\1\0\2\11\1\0\3\1\1\11\2\0\1\11\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private final Deque<Integer> stack = new ArrayDeque<>();
    private final AtomicInteger templateStateRef = new AtomicInteger(-1);
    private final AtomicInteger parameterStateRef = new AtomicInteger(-1);

    public _ParadoxScriptLexer() {
        this((java.io.Reader)null);
    }

    private void enterState(Deque<Integer> stack, int state) {
        stack.offerLast(state);
        yybegin(state);
    }

    private void exitState(Deque<Integer> stack, int defaultState) {
        Integer state = stack.pollLast();
        if(state != null) {
            yybegin(state);
        } else {
            yybegin(defaultState);
        }
    }

    private void enterState(AtomicInteger stateRef, int state) {
        if(stateRef.get() == -1) {
            stateRef.set(state);
        }
    }

    private void exitState(AtomicInteger stateRef) {
        int state = stateRef.getAndSet(-1);
        if(state != -1) {
            if(stateRef == templateStateRef) {
                state = stack.isEmpty() ? YYINITIAL : stack.peekLast();
            }
            yybegin(state);
        }
    }

    private boolean exitStateForErrorToken(AtomicInteger stateRef) {
        int state = stateRef.getAndSet(-1);
        if(state != -1) {
            if(stateRef == templateStateRef) {
                state = stack.isEmpty() ? YYINITIAL : stack.peekLast();
            }
            yybegin(state);
        }
        if(state != -1) {
            yypushback(yylength());
            return true;
        } else {
            return false;
        }
    }

    private void recoverState(AtomicInteger stateRef) {
        int state = stateRef.get();
        if(state != -1) {
            yybegin(state);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { boolean leftQuoted = yycharat(0) == '"';
        if(leftQuoted) {
            yypushback(yylength() - 1);
            enterState(templateStateRef, yystate());
            yybegin(IN_QUOTED_STRING);
            return STRING_TOKEN;
        } else {
            yypushback(yylength());
            enterState(templateStateRef, yystate());
            yybegin(IN_STRING);
        }
            }
          // fall through
          case 55: break;
          case 2:
            { exitState(templateStateRef); return WHITE_SPACE;
            }
          // fall through
          case 56: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 57: break;
          case 4:
            { enterState(templateStateRef, yystate());  return INT_TOKEN;
            }
          // fall through
          case 58: break;
          case 5:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return LT_SIGN;
            }
          // fall through
          case 59: break;
          case 6:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return EQUAL_SIGN;
            }
          // fall through
          case 60: break;
          case 7:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return GT_SIGN;
            }
          // fall through
          case 61: break;
          case 8:
            { return BAD_CHARACTER;
            }
          // fall through
          case 62: break;
          case 9:
            { yybegin(IN_SCRIPTED_VARIABLE); return AT;
            }
          // fall through
          case 63: break;
          case 10:
            { enterState(stack, YYINITIAL); yybegin(IN_PARAMETER_CONDITION); return LEFT_BRACKET;
            }
          // fall through
          case 64: break;
          case 11:
            { exitState(stack, YYINITIAL); recoverState(templateStateRef); return RIGHT_BRACKET;
            }
          // fall through
          case 65: break;
          case 12:
            { enterState(stack, YYINITIAL); return LEFT_BRACE;
            }
          // fall through
          case 66: break;
          case 13:
            { exitState(stack, YYINITIAL); return RIGHT_BRACE;
            }
          // fall through
          case 67: break;
          case 14:
            { boolean r = exitStateForErrorToken(templateStateRef);
        if(!r) return BAD_CHARACTER;
            }
          // fall through
          case 68: break;
          case 15:
            { // If the matched text ends with '=', parse as a scripted variable; otherwise parse as a scripted variable reference.
        if(yycharat(yylength() -1) == '='){
            yypushback(yylength());
            enterState(templateStateRef, yystate());
            yybegin(IN_SCRIPTED_VARIABLE_NAME);
        } else {
            yypushback(yylength());
            enterState(templateStateRef, yystate());
            yybegin(IN_SCRIPTED_VARIABLE_REFERENCE_NAME);
        }
            }
          // fall through
          case 69: break;
          case 16:
            { enterState(stack, stack.isEmpty() ? YYINITIAL : IN_PROPERTY_OR_VALUE); yybegin(IN_PARAMETER_CONDITION); return LEFT_BRACKET;
            }
          // fall through
          case 70: break;
          case 17:
            { enterState(stack, stack.isEmpty() ? YYINITIAL : IN_PROPERTY_OR_VALUE); return LEFT_BRACE;
            }
          // fall through
          case 71: break;
          case 18:
            { enterState(parameterStateRef, yystate()); yybegin(IN_PARAMETER); return PARAMETER_START;
            }
          // fall through
          case 72: break;
          case 19:
            { return SCRIPTED_VARIABLE_NAME_TOKEN;
            }
          // fall through
          case 73: break;
          case 20:
            { exitState(templateStateRef); yybegin(IN_SCRIPTED_VARIABLE_VALUE); return EQUAL_SIGN;
            }
          // fall through
          case 74: break;
          case 21:
            { enterState(templateStateRef, yystate()); return STRING_TOKEN;
            }
          // fall through
          case 75: break;
          case 22:
            { enterState(templateStateRef, yystate()); return INT_TOKEN;
            }
          // fall through
          case 76: break;
          case 23:
            { yybegin(IN_SCRIPTED_VARIABLE_REFERENCE); return AT;
            }
          // fall through
          case 77: break;
          case 24:
            { return PROPERTY_KEY_TOKEN;
            }
          // fall through
          case 78: break;
          case 25:
            { boolean rightQuoted = yycharat(yylength() -1) == '"';
        if(rightQuoted) {
            exitState(templateStateRef);
        }
        return PROPERTY_KEY_TOKEN;
            }
          // fall through
          case 79: break;
          case 26:
            { return STRING_TOKEN;
            }
          // fall through
          case 80: break;
          case 27:
            { boolean rightQuoted = yycharat(yylength() -1) == '"';
        if(rightQuoted) {
            exitState(templateStateRef);
        }
        return STRING_TOKEN;
            }
          // fall through
          case 81: break;
          case 28:
            { yypushback(yylength());
        enterState(templateStateRef, yystate());
        yybegin(IN_SCRIPTED_VARIABLE_REFERENCE_NAME);
            }
          // fall through
          case 82: break;
          case 29:
            { return SCRIPTED_VARIABLE_REFERENCE_TOKEN;
            }
          // fall through
          case 83: break;
          case 30:
            { yypushback(yylength()); exitState(parameterStateRef);
            }
          // fall through
          case 84: break;
          case 31:
            { exitState(parameterStateRef); return PARAMETER_END;
            }
          // fall through
          case 85: break;
          case 32:
            { return PARAMETER_TOKEN;
            }
          // fall through
          case 86: break;
          case 33:
            { yybegin(IN_PARAMETER_ARGUMENT); return PIPE;
            }
          // fall through
          case 87: break;
          case 34:
            { yybegin(IN_PARAMETER_ARGUMENT_END); return ARGUMENT_TOKEN;
            }
          // fall through
          case 88: break;
          case 35:
            { yybegin(IN_PARAMETER_CONDITION_EXPRESSION); return NESTED_LEFT_BRACKET;
            }
          // fall through
          case 89: break;
          case 36:
            { return WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 37:
            { return NOT_SIGN;
            }
          // fall through
          case 91: break;
          case 38:
            { return CONDITION_PARAMETER_TOKEN;
            }
          // fall through
          case 92: break;
          case 39:
            { yybegin(IN_PARAMETER_CONDITION_BODY); return NESTED_RIGHT_BRACKET;
            }
          // fall through
          case 93: break;
          case 40:
            { enterState(stack, IN_PARAMETER_CONDITION_BODY); yybegin(IN_PARAMETER_CONDITION); return LEFT_BRACKET;
            }
          // fall through
          case 94: break;
          case 41:
            { enterState(stack, IN_PARAMETER_CONDITION_BODY); return LEFT_BRACE;
            }
          // fall through
          case 95: break;
          case 42:
            { return INLINE_MATH_TOKEN;
            }
          // fall through
          case 96: break;
          case 43:
            { exitState(stack, YYINITIAL); return INLINE_MATH_END;
            }
          // fall through
          case 97: break;
          case 44:
            { boolean leftQuoted = yycharat(0) == '"';
        if(leftQuoted) {
            yypushback(yylength() - 1);
            enterState(templateStateRef, yystate());
            yybegin(IN_QUOTED_KEY);
            return PROPERTY_KEY_TOKEN;
        } else {
            yypushback(yylength());
            enterState(templateStateRef, yystate());
            yybegin(IN_KEY);
        }
            }
          // fall through
          case 98: break;
          case 45:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            }
          // fall through
          case 99: break;
          case 46:
            { enterState(templateStateRef, yystate());  return FLOAT_TOKEN;
            }
          // fall through
          case 100: break;
          case 47:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return LE_SIGN;
            }
          // fall through
          case 101: break;
          case 48:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return GE_SIGN;
            }
          // fall through
          case 102: break;
          case 49:
            { exitState(templateStateRef); yybegin(IN_PROPERTY_VALUE); return SAFE_EQUAL_SIGN;
            }
          // fall through
          case 103: break;
          case 50:
            { enterState(stack, yystate());
        enterState(templateStateRef, yystate());
        yybegin(IN_INLINE_MATH);
        return INLINE_MATH_START;
            }
          // fall through
          case 104: break;
          case 51:
            { enterState(templateStateRef, yystate());  return BOOLEAN_TOKEN;
            }
          // fall through
          case 105: break;
          case 52:
            { enterState(templateStateRef, yystate()); return FLOAT_TOKEN;
            }
          // fall through
          case 106: break;
          case 53:
            { enterState(templateStateRef, yystate()); return BOOLEAN_TOKEN;
            }
          // fall through
          case 107: break;
          case 54:
            { enterState(templateStateRef, yystate());  return COLOR_TOKEN;
            }
          // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
