/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.script.psi;

import com.intellij.openapi.project.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ParadoxScriptLexer.flex</tt>
 */
public class ParadoxScriptLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VARIABLE_NAME = 2;
  public static final int WAITING_VARIABLE_EQUAL_SIGN = 4;
  public static final int WAITING_VARIABLE_VALUE = 6;
  public static final int WAITING_VARIABLE_END = 8;
  public static final int WAITING_PROPERTY = 10;
  public static final int WAITING_PROPERTY_KEY = 12;
  public static final int WATIING_PROPERTY_SEPARATOR = 14;
  public static final int WAITING_PROPERTY_VALUE = 16;
  public static final int WAITING_PROPERTY_END = 18;
  public static final int WAITING_VARIABLE = 20;
  public static final int WAITING_VARIABLE_REFERENCE_NAME = 22;
  public static final int WAITING_PARAMETER = 24;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE = 26;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE_END = 28;
  public static final int WAITING_AFTER_PARAMETER = 30;
  public static final int WAITING_INLINE_MATH = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  4,  4,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\35\1\3\2\2\1\3\22\0\1\35\1\0\1\14\1\4\1\6\1\47\2\0\1\15\1\43\1\45"+
    "\1\44\1\0\1\24\1\26\1\46\1\25\11\11\2\0\1\41\1\5\1\7\1\0\1\12\32\10\1\40\1"+
    "\16\1\50\1\0\1\10\1\0\1\32\1\31\2\10\1\20\1\10\1\30\1\33\3\10\1\34\1\10\1"+
    "\22\1\23\2\10\1\27\1\21\2\10\1\34\2\10\1\17\1\10\1\36\1\42\1\13\7\0\1\2\32"+
    "\0\1\1\77\0\12\37\46\0\12\37\14\0\12\37\20\0\12\37\6\0\12\37\6\0\13\1\35\0"+
    "\2\2\5\0\1\1\57\0\1\1\26\0\12\37\16\0\62\37");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\3\1\1\6\2\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\4\1\15\1\16\1\1\1\6\1\17"+
    "\3\1\1\6\2\1\1\20\1\21\1\22\1\1\1\5"+
    "\1\6\1\23\1\4\3\1\1\6\2\1\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\35\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\0\1\47\1\50\1\47"+
    "\1\0\1\47\1\1\1\0\1\51\2\0\2\47\1\0"+
    "\1\52\2\0\1\1\1\53\2\1\1\0\1\54\1\47"+
    "\2\1\1\53\2\1\1\55\1\56\1\57\1\54\1\1"+
    "\1\0\1\52\1\0\1\1\1\53\2\1\1\0\1\24"+
    "\1\31\1\0\1\60\1\52\2\0\2\47\1\0\2\1"+
    "\1\61\1\60\2\1\1\60\2\1\1\32\1\35\3\0"+
    "\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u030b"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u030b"+
    "\0\u04ce\0\u030b\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4"+
    "\0\u05ed\0\u0386\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u030b\0\u070c\0\u0735\0\u075e\0\u030b\0\u0787\0\u0386\0\u07b0"+
    "\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u030b\0\u0921\0\u030b\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee"+
    "\0\u0a17\0\u0a40\0\u030b\0\u030b\0\u0a69\0\u030b\0\u030b\0\u030b"+
    "\0\u030b\0\u030b\0\u030b\0\u030b\0\u0a92\0\u030b\0\u0a92\0\u0290"+
    "\0\u0334\0\u0334\0\u0abb\0\u0ae4\0\u030b\0\u03af\0\u0b0d\0\u0b36"+
    "\0\u03af\0\u0b36\0\u0334\0\u0b5f\0\u0b88\0\u0bb1\0\u0290\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0a92\0\u05c4\0\u0c55\0\u0c7e\0\u05c4\0\u0ca7"+
    "\0\u0cd0\0\u030b\0\u030b\0\u030b\0\u030b\0\u0cf9\0\u07b0\0\u030b"+
    "\0\u0d22\0\u0d4b\0\u075e\0\u0d74\0\u0d9d\0\u0dc6\0\u030b\0\u0def"+
    "\0\u0e18\0\u0abb\0\u0e41\0\u0e6a\0\u0e93\0\u07b0\0\u0b5f\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0c2c\0\u0c55\0\u0f37\0\u0f60\0\u0cf9\0\u0f89"+
    "\0\u0fb2\0\u0def\0\u0e18\0\u0fdb\0\u1004\0\u102d\0\u030b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\3\22\1\23\1\24\1\25\2\21\1\26\1\27"+
    "\1\30\1\31\2\21\1\32\2\21\1\33\1\21\1\34"+
    "\1\35\1\21\1\36\3\21\1\37\1\21\1\22\1\40"+
    "\5\21\1\34\4\21\1\24\3\22\1\41\1\42\2\24"+
    "\1\43\2\24\1\30\3\24\5\43\3\24\6\43\1\22"+
    "\1\40\13\24\3\22\1\41\1\42\5\24\1\30\21\24"+
    "\1\22\1\40\13\24\3\22\1\41\4\24\1\44\1\24"+
    "\1\30\10\24\1\45\1\46\7\24\1\22\1\40\5\24"+
    "\1\45\5\24\3\47\1\41\6\24\1\30\21\24\1\47"+
    "\1\40\63\24\1\50\3\22\1\23\1\24\1\25\2\50"+
    "\1\51\1\52\1\30\1\31\2\50\1\53\2\50\1\54"+
    "\1\50\1\55\1\56\1\50\1\57\3\50\1\60\1\50"+
    "\1\22\1\40\5\50\1\55\4\50\1\24\3\22\1\41"+
    "\1\61\1\24\1\62\3\24\1\30\21\24\1\22\1\40"+
    "\2\24\1\63\7\24\1\64\3\22\1\41\1\24\1\65"+
    "\2\64\1\66\1\67\1\30\1\70\2\64\1\71\2\64"+
    "\1\72\1\64\1\73\1\74\1\64\1\75\3\64\1\76"+
    "\1\64\1\22\1\40\5\64\1\73\4\64\1\24\3\47"+
    "\4\24\1\77\2\24\1\30\3\24\5\77\3\24\6\77"+
    "\1\47\1\40\13\24\3\47\4\24\1\100\2\24\1\30"+
    "\3\24\5\100\3\24\6\100\1\47\1\40\13\24\3\47"+
    "\2\24\1\101\1\24\1\102\2\24\1\30\3\24\5\102"+
    "\3\24\6\102\1\47\1\40\3\24\1\103\6\24\1\104"+
    "\3\47\2\24\1\101\2\104\1\105\1\24\1\30\1\24"+
    "\7\104\1\106\1\107\7\104\1\47\1\40\5\104\1\106"+
    "\4\104\1\24\3\47\2\24\1\101\4\24\1\30\21\24"+
    "\1\47\1\40\12\24\1\110\3\47\2\24\1\65\3\110"+
    "\1\24\1\30\1\24\20\110\1\47\1\40\12\110\1\24"+
    "\3\22\2\24\1\65\1\24\1\111\1\112\3\24\1\113"+
    "\1\24\5\111\1\114\1\115\1\24\6\111\1\22\4\24"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\21"+
    "\3\125\1\21\1\126\1\127\1\130\3\21\1\0\1\131"+
    "\20\21\1\125\1\0\2\21\1\130\7\21\1\0\3\22"+
    "\31\0\1\22\13\0\3\23\1\0\45\23\51\0\1\131"+
    "\3\125\1\131\1\126\1\125\1\132\3\131\1\0\21\131"+
    "\1\125\1\0\2\131\1\132\7\131\1\21\3\125\1\21"+
    "\1\126\1\127\1\130\1\21\1\26\1\21\1\0\1\131"+
    "\10\21\1\26\1\133\6\21\1\125\1\0\2\21\1\130"+
    "\7\21\16\0\1\134\21\0\1\135\10\0\1\136\2\137"+
    "\1\125\1\136\1\140\1\137\1\141\3\136\1\142\1\143"+
    "\1\144\1\145\16\136\1\137\1\142\2\136\1\141\7\136"+
    "\1\21\3\125\1\21\1\126\1\127\1\130\3\21\1\0"+
    "\1\131\3\21\1\146\14\21\1\125\1\0\2\21\1\130"+
    "\10\21\3\125\1\21\1\126\1\127\1\130\3\21\1\0"+
    "\1\131\6\21\1\147\11\21\1\125\1\0\2\21\1\130"+
    "\10\21\3\125\1\21\1\126\1\127\1\130\1\21\1\26"+
    "\1\21\1\0\1\131\10\21\1\35\7\21\1\125\1\0"+
    "\2\21\1\130\10\21\3\125\1\21\1\126\1\127\1\130"+
    "\3\21\1\0\1\131\11\21\1\133\6\21\1\125\1\0"+
    "\2\21\1\130\10\21\3\125\1\21\1\126\1\127\1\130"+
    "\3\21\1\0\1\131\13\21\1\150\4\21\1\125\1\0"+
    "\2\21\1\130\10\21\3\125\1\21\1\126\1\127\1\130"+
    "\3\21\1\0\1\131\4\21\1\151\13\21\1\125\1\0"+
    "\2\21\1\130\7\21\3\41\1\0\45\41\10\0\2\43"+
    "\5\0\5\43\1\0\1\43\1\0\6\43\25\0\1\44"+
    "\13\0\1\44\1\152\33\0\1\44\13\0\1\46\51\0"+
    "\1\152\23\0\3\47\31\0\1\47\13\0\1\50\3\125"+
    "\1\50\1\126\1\153\1\154\3\50\1\0\1\131\20\50"+
    "\1\125\1\0\2\50\1\154\10\50\3\125\1\50\1\126"+
    "\1\153\1\154\1\50\1\51\1\50\1\0\1\131\10\50"+
    "\1\51\1\155\6\50\1\125\1\0\2\50\1\154\10\50"+
    "\3\125\1\50\1\126\1\153\1\154\3\50\1\0\1\131"+
    "\3\50\1\156\14\50\1\125\1\0\2\50\1\154\10\50"+
    "\3\125\1\50\1\126\1\153\1\154\3\50\1\0\1\131"+
    "\6\50\1\157\11\50\1\125\1\0\2\50\1\154\10\50"+
    "\3\125\1\50\1\126\1\153\1\154\1\50\1\51\1\50"+
    "\1\0\1\131\10\50\1\56\7\50\1\125\1\0\2\50"+
    "\1\154\10\50\3\125\1\50\1\126\1\153\1\154\3\50"+
    "\1\0\1\131\11\50\1\155\6\50\1\125\1\0\2\50"+
    "\1\154\10\50\3\125\1\50\1\126\1\153\1\154\3\50"+
    "\1\0\1\131\13\50\1\160\4\50\1\125\1\0\2\50"+
    "\1\154\10\50\3\125\1\50\1\126\1\153\1\154\3\50"+
    "\1\0\1\131\4\50\1\161\13\50\1\125\1\0\2\50"+
    "\1\154\7\50\5\0\1\162\50\0\1\163\1\0\1\164"+
    "\41\0\1\64\3\0\1\64\1\0\1\165\4\64\2\0"+
    "\20\64\2\0\13\64\3\0\1\64\1\0\1\165\2\64"+
    "\1\66\1\64\2\0\10\64\1\66\1\166\6\64\2\0"+
    "\12\64\3\167\1\0\10\167\1\170\1\167\1\171\32\167"+
    "\1\64\3\0\1\64\1\0\1\165\4\64\2\0\3\64"+
    "\1\172\14\64\2\0\13\64\3\0\1\64\1\0\1\165"+
    "\4\64\2\0\6\64\1\173\11\64\2\0\13\64\3\0"+
    "\1\64\1\0\1\165\2\64\1\66\1\64\2\0\10\64"+
    "\1\74\7\64\2\0\13\64\3\0\1\64\1\0\1\165"+
    "\4\64\2\0\11\64\1\166\6\64\2\0\13\64\3\0"+
    "\1\64\1\0\1\165\4\64\2\0\13\64\1\174\4\64"+
    "\2\0\13\64\3\0\1\64\1\0\1\165\4\64\2\0"+
    "\4\64\1\175\13\64\2\0\12\64\1\0\3\176\1\0"+
    "\1\177\2\0\2\77\5\0\5\77\1\0\1\77\1\0"+
    "\6\77\1\176\23\0\2\100\5\0\5\100\1\0\1\100"+
    "\1\0\6\100\24\0\2\102\5\0\5\102\1\0\1\102"+
    "\1\0\6\102\14\0\1\104\3\0\1\104\2\0\4\104"+
    "\2\0\20\104\2\0\13\104\3\0\1\104\2\0\2\104"+
    "\1\105\1\104\2\0\10\104\1\105\1\200\6\104\2\0"+
    "\13\104\3\0\1\104\2\0\2\104\1\105\1\104\2\0"+
    "\10\104\1\107\7\104\2\0\13\104\3\0\1\104\2\0"+
    "\4\104\2\0\11\104\1\200\6\104\2\0\12\104\1\110"+
    "\3\0\1\110\2\0\4\110\2\0\20\110\2\0\12\110"+
    "\10\0\2\111\5\0\5\111\1\0\1\111\1\0\6\111"+
    "\25\0\1\112\13\0\1\112\1\201\50\0\1\201\23\0"+
    "\3\125\1\0\1\126\1\0\1\126\25\0\1\125\3\0"+
    "\1\126\7\0\1\21\3\125\1\21\1\126\1\127\1\130"+
    "\1\21\1\202\1\21\1\0\1\131\10\21\1\202\7\21"+
    "\1\125\1\0\2\21\1\130\7\21\40\0\1\135\10\0"+
    "\1\142\2\137\1\125\1\142\1\140\1\142\1\140\4\142"+
    "\1\203\1\167\1\204\16\142\1\137\3\142\1\140\12\142"+
    "\1\0\10\142\1\203\1\167\1\204\32\142\1\144\2\205"+
    "\1\125\1\144\1\206\1\205\1\207\3\144\1\167\1\143"+
    "\1\144\1\210\16\144\1\205\1\167\2\144\1\207\7\144"+
    "\1\136\1\137\2\125\1\136\1\140\1\137\1\141\3\136"+
    "\1\142\21\136\1\137\1\142\2\136\1\141\7\136\1\21"+
    "\3\125\1\21\1\126\1\127\1\130\3\21\1\0\1\131"+
    "\4\21\1\147\13\21\1\125\1\0\2\21\1\130\10\21"+
    "\3\125\1\21\1\126\1\127\1\130\3\21\1\0\1\131"+
    "\14\21\1\211\3\21\1\125\1\0\2\21\1\130\10\21"+
    "\3\125\1\21\1\126\1\127\1\130\3\21\1\0\1\131"+
    "\14\21\1\212\2\21\1\212\1\125\1\0\2\21\1\130"+
    "\7\21\11\0\1\213\13\0\1\213\23\0\1\50\3\125"+
    "\1\50\1\126\1\153\1\154\1\50\1\214\1\50\1\0"+
    "\1\131\10\50\1\214\7\50\1\125\1\0\2\50\1\154"+
    "\10\50\3\125\1\50\1\126\1\153\1\154\3\50\1\0"+
    "\1\131\4\50\1\157\13\50\1\125\1\0\2\50\1\154"+
    "\10\50\3\125\1\50\1\126\1\153\1\154\3\50\1\0"+
    "\1\131\14\50\1\215\3\50\1\125\1\0\2\50\1\154"+
    "\10\50\3\125\1\50\1\126\1\153\1\154\3\50\1\0"+
    "\1\131\14\50\1\216\2\50\1\216\1\125\1\0\2\50"+
    "\1\154\7\50\1\64\3\0\1\64\1\0\1\165\2\64"+
    "\1\217\1\64\2\0\10\64\1\217\7\64\2\0\12\64"+
    "\2\167\2\0\45\167\1\64\3\0\1\64\1\0\1\165"+
    "\4\64\2\0\4\64\1\173\13\64\2\0\13\64\3\0"+
    "\1\64\1\0\1\165\4\64\2\0\14\64\1\220\3\64"+
    "\2\0\13\64\3\0\1\64\1\0\1\165\4\64\2\0"+
    "\14\64\1\221\2\64\1\221\2\0\12\64\1\0\3\176"+
    "\1\0\1\177\27\0\1\176\13\0\1\104\3\0\1\104"+
    "\2\0\2\104\1\222\1\104\2\0\10\104\1\222\7\104"+
    "\2\0\12\104\11\0\1\223\13\0\1\223\24\0\3\125"+
    "\1\0\1\126\1\125\1\126\25\0\1\125\3\0\1\126"+
    "\7\0\2\142\2\0\45\142\1\167\2\205\1\125\1\167"+
    "\1\206\1\167\1\206\4\167\1\170\1\167\1\171\16\167"+
    "\1\205\3\167\1\206\7\167\1\144\1\205\2\125\1\144"+
    "\1\206\1\205\1\207\3\144\1\167\21\144\1\205\1\167"+
    "\2\144\1\207\7\144\1\21\3\125\1\21\1\126\1\127"+
    "\1\130\3\21\1\0\1\131\15\21\1\212\2\21\1\224"+
    "\1\225\2\21\1\130\10\21\3\125\1\21\1\126\1\127"+
    "\1\130\3\21\1\0\1\131\20\21\1\224\1\225\2\21"+
    "\1\130\7\21\1\50\3\125\1\50\1\126\1\153\1\154"+
    "\3\50\1\0\1\131\15\50\1\216\2\50\1\224\1\225"+
    "\2\50\1\154\10\50\3\125\1\50\1\126\1\153\1\154"+
    "\3\50\1\0\1\131\20\50\1\224\1\225\2\50\1\154"+
    "\7\50\1\64\3\0\1\64\1\0\1\165\4\64\2\0"+
    "\15\64\1\221\2\64\1\226\1\225\13\64\3\0\1\64"+
    "\1\0\1\165\4\64\2\0\20\64\1\226\1\225\12\64"+
    "\1\0\3\125\1\0\1\126\1\0\1\126\25\0\1\224"+
    "\1\225\2\0\1\126\10\0\2\225\6\0\1\225\1\0"+
    "\1\227\11\0\2\225\6\0\1\225\1\0\1\225\46\0"+
    "\1\226\1\225\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4182];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\3\1\1\11\3\1\1\11\7\1\1\11\1\1"+
    "\1\11\16\1\1\11\3\1\1\11\13\1\1\11\1\1"+
    "\1\11\7\1\2\11\1\1\7\11\1\0\1\11\2\1"+
    "\1\0\2\1\1\0\1\11\2\0\2\1\1\0\1\1"+
    "\2\0\4\1\1\0\7\1\4\11\1\1\1\0\1\11"+
    "\1\0\4\1\1\0\1\11\1\1\1\0\2\1\2\0"+
    "\2\1\1\0\13\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Project project;
                  
    private int depth = 0;
	private boolean isPropertyKey = false;
    private boolean inInlineMath = false;
    private boolean leftAbsSign = true;
    
    public ParadoxScriptLexer(Project propect) {
        this((java.io.Reader)null);
        this.project = project;
    }
    
    private void beginNextState(){
        if(depth <= 0){
	        yybegin(YYINITIAL);
        } else {
	        yybegin(WAITING_PROPERTY_KEY);
        }
    }
	
    private void beginNextStateForParameter(){
        if(inInlineMath){
            yybegin(WAITING_INLINE_MATH);
        } else if(isPropertyKey){
			isPropertyKey = false;
			yybegin(WATIING_PROPERTY_SEPARATOR);
		} else {
            yybegin(WAITING_AFTER_PARAMETER);
        }
    }
    
    private void onBlank(){
		//ignore
    }
    
    private void pushbackUntilBeforeBlank(int begin){
        //回退到末尾可能出现的空白之前
        int length = yylength();
        int i;
        for (i = begin; i < length ; i++) {
          char c = yycharat(length-i-1);
          if(!Character.isWhitespace(c)) break;
        }
        if(i != 0){
            yypushback(i);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { beginNextState(); return STRING_TOKEN;
            } 
            // fall through
          case 51: break;
          case 2: 
            { onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 52: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 53: break;
          case 4: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 5: 
            { yybegin(WAITING_PARAMETER); return PARAMETER_START;
            } 
            // fall through
          case 55: break;
          case 6: 
            { beginNextState(); return INT_TOKEN;
            } 
            // fall through
          case 56: break;
          case 7: 
            { yybegin(WAITING_VARIABLE_NAME); return AT;
            } 
            // fall through
          case 57: break;
          case 8: 
            { depth--; beginNextState(); return RIGHT_BRACE;
            } 
            // fall through
          case 58: break;
          case 9: 
            { depth++; beginNextState(); return LEFT_BRACE;
            } 
            // fall through
          case 59: break;
          case 10: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 60: break;
          case 11: 
            { yybegin(WAITING_VARIABLE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 61: break;
          case 12: 
            { yybegin(WAITING_VARIABLE_EQUAL_SIGN); return VARIABLE_NAME_ID;
            } 
            // fall through
          case 62: break;
          case 13: 
            { yybegin(WAITING_VARIABLE_END); return INT_TOKEN;
            } 
            // fall through
          case 63: break;
          case 14: 
            { beginNextState(); onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 15: 
            { yybegin(WAITING_VARIABLE); return AT;
            } 
            // fall through
          case 65: break;
          case 16: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 66: break;
          case 17: 
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            } 
            // fall through
          case 67: break;
          case 18: 
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            } 
            // fall through
          case 68: break;
          case 19: 
            { yybegin(WAITING_VARIABLE_REFERENCE_NAME); return AT;
            } 
            // fall through
          case 69: break;
          case 20: 
            { //如果匹配到的文本以等号结尾，则将空白之前的文本解析为VARIABLE_NAME_ID，否则将整个匹配文本解析为VARIABLE_REFERENCE_ID
	if(yycharat(yylength() -1) == '='){
	  pushbackUntilBeforeBlank(1);
	  yybegin(WAITING_VARIABLE_EQUAL_SIGN);
	  return VARIABLE_NAME_ID;
	} else {
	  beginNextState(); 
      return VARIABLE_REFERENCE_ID;
	}
            } 
            // fall through
          case 70: break;
          case 21: 
            { beginNextState(); return VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 71: break;
          case 22: 
            { beginNextStateForParameter(); return PARAMETER_END;
            } 
            // fall through
          case 72: break;
          case 23: 
            { return PARAMETER_ID;
            } 
            // fall through
          case 73: break;
          case 24: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE); return PIPE;
            } 
            // fall through
          case 74: break;
          case 25: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return ARG_STRING_TOKEN;
            } 
            // fall through
          case 75: break;
          case 26: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return ARG_NUMBER_TOKEN;
            } 
            // fall through
          case 76: break;
          case 27: 
            { return STRING_PART;
            } 
            // fall through
          case 77: break;
          case 28: 
            { return INLINE_MATH_VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 78: break;
          case 29: 
            { return NUMBER_TOKEN;
            } 
            // fall through
          case 79: break;
          case 30: 
            { return LP_SIGN;
            } 
            // fall through
          case 80: break;
          case 31: 
            { yybegin(WAITING_INLINE_MATH); return MINUS_SIGN;
            } 
            // fall through
          case 81: break;
          case 32: 
            { if(leftAbsSign){
      leftAbsSign=false; 
      return LABS_SIGN;
    }else{
      leftAbsSign=true;
      return RABS_SIGN;
    }
            } 
            // fall through
          case 82: break;
          case 33: 
            { return RP_SIGN;
            } 
            // fall through
          case 83: break;
          case 34: 
            { yybegin(WAITING_INLINE_MATH); return PLUS_SIGN;
            } 
            // fall through
          case 84: break;
          case 35: 
            { yybegin(WAITING_INLINE_MATH); return TIMES_SIGN;
            } 
            // fall through
          case 85: break;
          case 36: 
            { yybegin(WAITING_INLINE_MATH); return DIV_SIGN;
            } 
            // fall through
          case 86: break;
          case 37: 
            { yybegin(WAITING_INLINE_MATH); return MOD_SIGN;
            } 
            // fall through
          case 87: break;
          case 38: 
            { leftAbsSign=true; inInlineMath=false; beginNextState(); return INLINE_MATH_END;
            } 
            // fall through
          case 88: break;
          case 39: 
            { //根据后面是否有"="判断是否是property
	yybegin(WATIING_PROPERTY_SEPARATOR);
	pushbackUntilBeforeBlank(1);
	char firstChar = yycharat(0);
	if(firstChar == '"'){
		return QUOTED_PROPERTY_KEY_ID;
	} else if(firstChar == '$'){
		//propertyKey也可以是parameter
		isPropertyKey = true;
		yypushback(yylength() -1);
		yybegin(WAITING_PARAMETER);
		return PARAMETER_START;
	} else {
		return PROPERTY_KEY_ID;
	}
            } 
            // fall through
          case 89: break;
          case 40: 
            { yypushback(1);
	return STRING_PART;
            } 
            // fall through
          case 90: break;
          case 41: 
            { inInlineMath=true; yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 91: break;
          case 42: 
            { beginNextState(); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 92: break;
          case 43: 
            { beginNextState(); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 93: break;
          case 44: 
            { yypushback(1);
  	return STRING_PART;
            } 
            // fall through
          case 94: break;
          case 45: 
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            } 
            // fall through
          case 95: break;
          case 46: 
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            } 
            // fall through
          case 96: break;
          case 47: 
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 97: break;
          case 48: 
            { beginNextState(); return FLOAT_TOKEN;
            } 
            // fall through
          case 98: break;
          case 49: 
            { yybegin(WAITING_VARIABLE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 99: break;
          case 50: 
            { beginNextState(); return COLOR_TOKEN;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
