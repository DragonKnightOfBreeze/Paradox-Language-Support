/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.script.psi;

import com.intellij.openapi.project.*;import com.intellij.psi.tree.IElementType;
import icu.windea.pls.config.cwt.*;
import icu.windea.pls.core.*;
import com.intellij.openapi.project;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;
import static icu.windea.pls.script.ParadoxScriptLexerExtensionsKt.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ParadoxScriptLexer.flex</tt>
 */
public class ParadoxScriptLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VARIABLE_EQUAL_SIGN = 2;
  public static final int WAITING_VARIABLE_VALUE = 4;
  public static final int WAITING_VARIABLE_END = 6;
  public static final int WAITING_PROPERTY = 8;
  public static final int WAITING_PROPERTY_KEY = 10;
  public static final int WATIING_PROPERTY_SEPARATOR = 12;
  public static final int WAITING_PROPERTY_VALUE = 14;
  public static final int WAITING_PROPERTY_END = 16;
  public static final int WAITING_CODE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\33\1\3\2\2\1\3\22\0\1\33\1\0\1\10\1\4\4\0\1\11\2\0\1\20\1\0\1\21\1"+
    "\24\1\0\1\22\11\23\2\0\1\42\1\7\1\40\1\0\1\5\32\6\1\41\1\12\1\37\1\0\1\6\1"+
    "\0\1\30\1\27\2\6\1\14\1\6\1\26\1\31\3\6\1\32\1\6\1\16\1\17\2\6\1\25\1\15\2"+
    "\6\1\32\2\6\1\13\1\6\1\34\1\0\1\36\7\0\1\2\32\0\1\1\77\0\12\35\46\0\12\35"+
    "\14\0\12\35\20\0\12\35\6\0\12\35\6\0\13\1\35\0\2\2\5\0\1\1\57\0\1\1\26\0\12"+
    "\35\16\0\62\35");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\3\4\3\1\2\5\2\1"+
    "\1\6\1\7\1\10\1\11\2\12\1\4\3\12\2\13"+
    "\1\2\2\14\2\15\1\16\1\4\3\16\2\5\2\16"+
    "\1\17\1\20\1\21\1\1\2\4\3\1\2\5\2\1"+
    "\1\22\1\14\2\23\1\14\1\24\1\0\1\25\1\0"+
    "\1\25\1\26\3\0\1\25\1\27\3\0\1\25\1\1"+
    "\1\30\3\1\1\0\1\31\1\0\1\12\1\32\1\12"+
    "\2\0\1\15\1\25\1\0\1\16\1\30\3\16\1\33"+
    "\1\34\1\35\1\36\1\0\1\27\1\0\1\1\1\30"+
    "\3\1\1\25\1\37\1\27\2\0\1\25\1\0\1\25"+
    "\1\40\2\1\1\41\1\42\2\0\1\43\1\40\2\16"+
    "\1\40\2\1\3\0\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u01ea"+
    "\0\u01ea\0\u0325\0\u01ea\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0460\0\u0483\0\u04a6\0\u04c9"+
    "\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1"+
    "\0\u0604\0\u01ea\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6"+
    "\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07cb"+
    "\0\u07ee\0\u0811\0\u0811\0\u01ea\0\u0834\0\u01ea\0\u0857\0\u015e"+
    "\0\u087a\0\u089d\0\u020d\0\u08c0\0\u08e3\0\u0857\0\u0906\0\u0929"+
    "\0\u08e3\0\u020d\0\u094c\0\u015e\0\u096f\0\u0992\0\u09b5\0\u038e"+
    "\0\u01ea\0\u09d8\0\u09fb\0\u0348\0\u0a1e\0\u0483\0\u0a41\0\u0a64"+
    "\0\u04ec\0\u0a87\0\u0aaa\0\u04ec\0\u0acd\0\u0af0\0\u0b13\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u0b36\0\u06b3\0\u01ea\0\u0b59\0\u0b7c\0\u066d"+
    "\0\u0b9f\0\u0bc2\0\u0be5\0\u0857\0\u01ea\0\u0834\0\u0c08\0\u0c2b"+
    "\0\u06b3\0\u0c4e\0\u0906\0\u096f\0\u0c71\0\u0c94\0\u0a1e\0\u01ea"+
    "\0\u0cb7\0\u0cda\0\u01ea\0\u0acd\0\u0cfd\0\u0d20\0\u0b9f\0\u0d43"+
    "\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\3\14\1\15\1\16\1\13\1\17\1\20\2\13"+
    "\1\21\2\13\1\22\1\13\2\23\1\24\1\25\1\13"+
    "\1\26\3\13\1\27\1\13\1\14\1\30\1\13\1\31"+
    "\4\13\1\17\3\14\1\32\2\17\1\33\23\17\1\14"+
    "\1\30\1\17\1\31\4\17\1\34\3\14\1\35\1\17"+
    "\1\34\1\17\1\36\2\34\1\37\2\34\1\40\1\34"+
    "\2\41\1\42\1\43\7\34\1\14\1\30\1\34\1\31"+
    "\4\34\1\17\1\44\1\45\1\46\1\32\26\17\1\44"+
    "\1\30\1\17\1\31\4\17\1\47\5\17\1\47\1\17"+
    "\1\50\22\47\2\17\1\47\1\17\4\47\1\51\3\14"+
    "\1\15\1\52\1\51\1\17\1\20\2\51\1\53\2\51"+
    "\1\54\1\51\2\55\1\56\1\57\1\51\1\60\3\51"+
    "\1\61\1\51\1\14\1\30\1\51\1\31\4\51\1\17"+
    "\3\14\1\32\2\17\1\62\23\17\1\14\1\30\1\17"+
    "\1\31\1\17\1\63\1\17\1\64\1\65\3\14\1\32"+
    "\1\66\1\65\1\17\1\67\2\65\1\70\2\65\1\71"+
    "\1\65\2\72\1\73\1\74\1\65\1\75\3\65\1\76"+
    "\1\65\1\14\1\30\1\65\1\31\4\65\1\17\1\77"+
    "\1\100\1\46\1\32\26\17\1\77\1\30\1\17\1\31"+
    "\4\17\1\101\1\102\1\103\1\46\27\101\1\102\2\101"+
    "\1\31\1\104\3\101\1\13\3\105\3\13\1\106\1\107"+
    "\22\13\1\105\1\0\1\13\1\0\1\13\1\110\1\13"+
    "\1\110\1\0\3\14\27\0\1\14\7\0\3\15\1\0"+
    "\37\15\6\0\1\111\3\0\1\112\5\111\1\0\3\111"+
    "\1\0\6\111\53\0\1\113\2\114\1\105\3\113\1\115"+
    "\1\116\1\117\1\120\20\113\1\114\1\121\1\113\1\121"+
    "\1\113\1\122\1\113\1\122\1\13\3\105\3\13\1\106"+
    "\1\107\3\13\1\123\16\13\1\105\1\0\1\13\1\0"+
    "\1\13\1\110\1\13\1\110\1\13\3\105\3\13\1\106"+
    "\1\107\6\13\1\124\13\13\1\105\1\0\1\13\1\0"+
    "\1\13\1\110\1\13\1\110\1\13\3\105\3\13\1\106"+
    "\1\107\11\13\1\24\1\25\7\13\1\105\1\0\1\13"+
    "\1\0\1\13\1\110\1\13\1\110\1\13\3\105\3\13"+
    "\1\106\1\107\13\13\1\125\6\13\1\105\1\0\1\13"+
    "\1\0\1\13\1\110\1\13\1\110\1\13\3\105\3\13"+
    "\1\106\1\107\11\13\2\25\1\125\6\13\1\105\1\0"+
    "\1\13\1\0\1\13\1\110\1\13\1\110\1\13\3\105"+
    "\3\13\1\106\1\107\15\13\1\126\4\13\1\105\1\0"+
    "\1\13\1\0\1\13\1\110\1\13\1\110\1\13\3\105"+
    "\3\13\1\106\1\107\4\13\1\127\15\13\1\105\1\0"+
    "\1\13\1\0\1\13\1\110\1\13\1\110\3\32\1\0"+
    "\37\32\1\34\3\0\3\34\2\0\22\34\2\0\1\34"+
    "\1\0\4\34\1\35\2\32\1\0\3\35\2\32\22\35"+
    "\2\32\1\35\1\32\4\35\3\130\1\0\4\130\1\131"+
    "\1\130\1\132\30\130\1\34\3\0\3\34\2\0\3\34"+
    "\1\133\16\34\2\0\1\34\1\0\5\34\3\0\3\34"+
    "\2\0\6\34\1\134\13\34\2\0\1\34\1\0\5\34"+
    "\3\0\3\34\2\0\11\34\1\42\1\43\7\34\2\0"+
    "\1\34\1\0\5\34\3\0\3\34\2\0\13\34\1\135"+
    "\6\34\2\0\1\34\1\0\5\34\3\0\3\34\2\0"+
    "\11\34\2\43\1\135\6\34\2\0\1\34\1\0\4\34"+
    "\1\0\1\44\1\45\1\46\27\0\1\44\10\0\1\136"+
    "\2\46\27\0\1\136\7\0\1\47\3\0\3\47\1\0"+
    "\23\47\2\0\1\47\1\0\4\47\1\50\2\137\1\0"+
    "\3\50\1\137\2\47\1\140\20\50\2\137\1\50\1\137"+
    "\4\50\1\51\3\105\3\51\1\106\1\107\22\51\1\105"+
    "\1\0\1\51\1\0\1\51\1\141\1\51\1\141\6\0"+
    "\1\142\3\0\1\112\5\142\1\0\3\142\1\0\6\142"+
    "\10\0\1\51\3\105\3\51\1\106\1\107\3\51\1\143"+
    "\16\51\1\105\1\0\1\51\1\0\1\51\1\141\1\51"+
    "\1\141\1\51\3\105\3\51\1\106\1\107\6\51\1\144"+
    "\13\51\1\105\1\0\1\51\1\0\1\51\1\141\1\51"+
    "\1\141\1\51\3\105\3\51\1\106\1\107\11\51\1\56"+
    "\1\57\7\51\1\105\1\0\1\51\1\0\1\51\1\141"+
    "\1\51\1\141\1\51\3\105\3\51\1\106\1\107\13\51"+
    "\1\145\6\51\1\105\1\0\1\51\1\0\1\51\1\141"+
    "\1\51\1\141\1\51\3\105\3\51\1\106\1\107\11\51"+
    "\2\57\1\145\6\51\1\105\1\0\1\51\1\0\1\51"+
    "\1\141\1\51\1\141\1\51\3\105\3\51\1\106\1\107"+
    "\15\51\1\146\4\51\1\105\1\0\1\51\1\0\1\51"+
    "\1\141\1\51\1\141\1\51\3\105\3\51\1\106\1\107"+
    "\4\51\1\147\15\51\1\105\1\0\1\51\1\0\1\51"+
    "\1\141\1\51\1\141\7\0\1\150\42\0\1\151\30\0"+
    "\1\152\2\0\1\65\3\0\3\65\2\0\22\65\2\0"+
    "\1\65\1\0\4\65\6\0\1\153\3\0\1\112\5\153"+
    "\1\0\3\153\1\0\6\153\10\0\3\154\1\0\4\154"+
    "\1\155\1\154\1\156\30\154\1\65\3\0\3\65\2\0"+
    "\3\65\1\157\16\65\2\0\1\65\1\0\5\65\3\0"+
    "\3\65\2\0\6\65\1\160\13\65\2\0\1\65\1\0"+
    "\5\65\3\0\3\65\2\0\11\65\1\73\1\74\7\65"+
    "\2\0\1\65\1\0\5\65\3\0\3\65\2\0\13\65"+
    "\1\161\6\65\2\0\1\65\1\0\5\65\3\0\3\65"+
    "\2\0\11\65\2\74\1\161\6\65\2\0\1\65\1\0"+
    "\5\65\3\0\3\65\2\0\15\65\1\162\4\65\2\0"+
    "\1\65\1\0\5\65\3\0\3\65\2\0\4\65\1\163"+
    "\15\65\2\0\1\65\1\0\4\65\1\0\1\77\1\100"+
    "\1\46\27\0\1\77\7\0\3\101\1\0\32\101\2\0"+
    "\4\101\1\102\1\103\1\46\27\101\1\102\2\101\2\0"+
    "\3\101\1\0\3\105\3\0\1\106\23\0\1\105\4\0"+
    "\1\106\1\0\1\106\1\107\3\105\3\107\1\106\23\107"+
    "\1\105\1\0\1\107\1\0\1\107\1\164\1\107\1\164"+
    "\6\0\1\111\4\0\5\111\1\0\3\111\1\0\6\111"+
    "\51\0\1\165\1\0\1\121\2\114\1\105\3\121\1\115"+
    "\1\166\1\154\1\167\20\121\1\114\4\121\1\115\1\121"+
    "\1\115\3\121\1\0\4\121\1\166\1\154\1\167\30\121"+
    "\1\117\2\170\1\105\3\117\1\171\1\116\1\117\1\172"+
    "\20\117\1\170\1\154\1\117\1\154\1\117\1\173\1\117"+
    "\1\173\1\113\1\114\2\105\3\113\1\115\23\113\1\114"+
    "\1\121\1\113\1\121\1\113\1\122\1\113\1\122\1\13"+
    "\3\105\3\13\1\106\1\107\4\13\1\124\15\13\1\105"+
    "\1\0\1\13\1\0\1\13\1\110\1\13\1\110\1\13"+
    "\3\105\3\13\1\106\1\107\11\13\2\174\7\13\1\105"+
    "\1\0\1\13\1\0\1\13\1\110\1\13\1\110\1\13"+
    "\3\105\3\13\1\106\1\107\16\13\1\175\3\13\1\105"+
    "\1\0\1\13\1\0\1\13\1\110\1\13\1\110\1\13"+
    "\3\105\3\13\1\106\1\107\16\13\1\176\2\13\1\176"+
    "\1\105\1\0\1\13\1\0\1\13\1\110\1\13\1\110"+
    "\2\130\2\0\37\130\1\34\3\0\3\34\2\0\4\34"+
    "\1\134\15\34\2\0\1\34\1\0\5\34\3\0\3\34"+
    "\2\0\11\34\2\177\7\34\2\0\1\34\1\0\4\34"+
    "\3\137\1\0\4\137\1\200\1\0\1\201\30\137\1\50"+
    "\1\137\2\0\3\50\1\137\23\50\2\137\1\50\1\137"+
    "\4\50\1\0\3\202\2\0\1\142\1\203\3\0\5\142"+
    "\1\0\3\142\1\0\6\142\1\202\7\0\1\51\3\105"+
    "\3\51\1\106\1\107\4\51\1\144\15\51\1\105\1\0"+
    "\1\51\1\0\1\51\1\141\1\51\1\141\1\51\3\105"+
    "\3\51\1\106\1\107\11\51\2\204\7\51\1\105\1\0"+
    "\1\51\1\0\1\51\1\141\1\51\1\141\1\51\3\105"+
    "\3\51\1\106\1\107\16\51\1\205\3\51\1\105\1\0"+
    "\1\51\1\0\1\51\1\141\1\51\1\141\1\51\3\105"+
    "\3\51\1\106\1\107\16\51\1\206\2\51\1\206\1\105"+
    "\1\0\1\51\1\0\1\51\1\141\1\51\1\141\6\0"+
    "\1\153\4\0\5\153\1\0\3\153\1\0\6\153\10\0"+
    "\2\154\2\0\37\154\1\65\3\0\3\65\2\0\4\65"+
    "\1\160\15\65\2\0\1\65\1\0\5\65\3\0\3\65"+
    "\2\0\11\65\2\207\7\65\2\0\1\65\1\0\5\65"+
    "\3\0\3\65\2\0\16\65\1\210\3\65\2\0\1\65"+
    "\1\0\5\65\3\0\3\65\2\0\16\65\1\211\2\65"+
    "\1\211\2\0\1\65\1\0\4\65\2\121\2\0\37\121"+
    "\1\154\2\170\1\105\3\154\1\171\1\155\1\154\1\156"+
    "\20\154\1\170\4\154\1\171\1\154\1\171\1\117\1\170"+
    "\2\105\3\117\1\171\23\117\1\170\1\154\1\117\1\154"+
    "\1\117\1\173\1\117\1\173\1\13\3\105\3\13\1\106"+
    "\1\107\17\13\1\176\2\13\1\212\1\213\1\13\1\0"+
    "\1\13\1\110\1\13\1\110\1\13\3\105\3\13\1\106"+
    "\1\107\22\13\1\212\1\213\1\13\1\0\1\13\1\110"+
    "\1\13\1\110\2\137\2\0\37\137\1\0\3\202\3\0"+
    "\1\203\23\0\1\202\7\0\1\51\3\105\3\51\1\106"+
    "\1\107\17\51\1\206\2\51\1\212\1\213\1\51\1\0"+
    "\1\51\1\141\1\51\1\141\1\51\3\105\3\51\1\106"+
    "\1\107\22\51\1\212\1\213\1\51\1\0\1\51\1\141"+
    "\1\51\1\141\1\65\3\0\3\65\2\0\17\65\1\211"+
    "\2\65\1\214\1\213\1\65\1\0\5\65\3\0\3\65"+
    "\2\0\22\65\1\214\1\213\1\65\1\0\4\65\1\0"+
    "\3\105\3\0\1\106\23\0\1\212\1\213\3\0\1\106"+
    "\1\0\1\106\1\0\2\213\17\0\3\213\6\0\1\213"+
    "\1\0\1\213\1\215\37\0\1\214\1\213\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3570];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\4\1\1\11\10\1\2\11\1\1\1\11\26\1"+
    "\1\11\21\1\1\11\1\0\1\11\1\0\2\1\3\0"+
    "\2\1\3\0\6\1\1\0\1\11\1\0\3\1\2\0"+
    "\2\1\1\0\5\1\3\11\1\1\1\0\1\11\1\0"+
    "\6\1\1\11\1\1\2\0\1\1\1\0\5\1\1\11"+
    "\2\0\1\11\6\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Project project;
      
    private int depth = 0;
    
    public ParadoxScriptLexer(Project propect) {
        this((java.io.Reader)null);
        this.project = project;
    }
    
    public int nextState(){
        return depth <= 0 ? YYINITIAL : WAITING_PROPERTY_KEY;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(WAITING_PROPERTY_END); return STRING_TOKEN;
            } 
            // fall through
          case 37: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 38: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 39: break;
          case 4: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 40: break;
          case 5: 
            { yybegin(WAITING_PROPERTY_END); return INT_TOKEN;
            } 
            // fall through
          case 41: break;
          case 6: 
            { depth++; yybegin(nextState()); return LEFT_BRACE;
            } 
            // fall through
          case 42: break;
          case 7: 
            { depth--; yybegin(nextState()); return RIGHT_BRACE;
            } 
            // fall through
          case 43: break;
          case 8: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 44: break;
          case 9: 
            { yybegin(WAITING_VARIABLE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 45: break;
          case 10: 
            { yybegin(WAITING_VARIABLE_END); return STRING_TOKEN;
            } 
            // fall through
          case 46: break;
          case 11: 
            { yybegin(WAITING_VARIABLE_END); return INT_TOKEN;
            } 
            // fall through
          case 47: break;
          case 12: 
            { yybegin(nextState()); return WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 13: 
            { yybegin(WATIING_PROPERTY_SEPARATOR); return PROPERTY_KEY_ID;
            } 
            // fall through
          case 49: break;
          case 14: 
            { //NOTE 这里的字符串可能需要改为解析成标签
    yybegin(WAITING_PROPERTY_END);
	if(matchesTagName(this)) return TAG_TOKEN;
    return STRING_TOKEN;
            } 
            // fall through
          case 50: break;
          case 15: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 51: break;
          case 16: 
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            } 
            // fall through
          case 52: break;
          case 17: 
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            } 
            // fall through
          case 53: break;
          case 18: 
            { yybegin(WAITING_PROPERTY_KEY); return WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 19: 
            { return CODE_TEXT_TOKEN;
            } 
            // fall through
          case 55: break;
          case 20: 
            { yybegin(WAITING_PROPERTY_END); return CODE_END;
            } 
            // fall through
          case 56: break;
          case 21: 
            { yypushback(yylength()); yybegin(WAITING_PROPERTY);
            } 
            // fall through
          case 57: break;
          case 22: 
            { yybegin(WAITING_VARIABLE_EQUAL_SIGN); return VARIABLE_NAME_ID;
            } 
            // fall through
          case 58: break;
          case 23: 
            { yybegin(WAITING_PROPERTY_END); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 59: break;
          case 24: 
            { yybegin(WAITING_PROPERTY_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 60: break;
          case 25: 
            { yybegin(WAITING_VARIABLE_END); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 61: break;
          case 26: 
            { yybegin(WAITING_VARIABLE_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 62: break;
          case 27: 
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            } 
            // fall through
          case 63: break;
          case 28: 
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            } 
            // fall through
          case 64: break;
          case 29: 
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 65: break;
          case 30: 
            { yybegin(WAITING_PROPERTY_END); return VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 66: break;
          case 31: 
            { yybegin(WAITING_CODE); return CODE_START;
            } 
            // fall through
          case 67: break;
          case 32: 
            { yybegin(WAITING_PROPERTY_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 68: break;
          case 33: 
            { yybegin(WAITING_VARIABLE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 69: break;
          case 34: 
            { yybegin(WATIING_PROPERTY_SEPARATOR); return QUOTED_PROPERTY_KEY_ID;
            } 
            // fall through
          case 70: break;
          case 35: 
            { //如果匹配到的文本以等号结尾，则将空白之前的部分解析为VARIABLE_NAME_ID，否则将其解析为VARIABLE_REFERENCE_ID
	CharSequence text = yytext();
	  int length = text.length();
	if(text.charAt(length -1) == '='){
	  //计算需要回退的长度
	  int n = 1;
	  for (int i = length - 2; i > 0; i--) {
	    char c = text.charAt(i);
		if(!Character.isWhitespace(c)) break;
	  }
	  yypushback(n);
	  yybegin(WAITING_VARIABLE_EQUAL_SIGN);
	  return VARIABLE_NAME_ID;
	} else {
	  yybegin(WAITING_PROPERTY_END);
      return VARIABLE_REFERENCE_ID;
	}
            } 
            // fall through
          case 71: break;
          case 36: 
            { yybegin(WAITING_PROPERTY_END); return COLOR_TOKEN;
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
