/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.script.psi;

import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ParadoxScriptLexer.flex</tt>
 */
public class ParadoxScriptLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VARIABLE_NAME = 2;
  public static final int WAITING_VARIABLE_EQUAL_SIGN = 4;
  public static final int WAITING_VARIABLE_VALUE = 6;
  public static final int WAITING_VARIABLE_END = 8;
  public static final int WAITING_PROPERTY = 10;
  public static final int WAITING_PROPERTY_KEY = 12;
  public static final int WATIING_PROPERTY_SEPARATOR = 14;
  public static final int WAITING_PROPERTY_VALUE = 16;
  public static final int WAITING_PROPERTY_END = 18;
  public static final int WAITING_WILDCARD_KEY = 20;
  public static final int WAITING_WILDCARD_VALUE = 22;
  public static final int WAITING_VARIABLE = 24;
  public static final int WAITING_VARIABLE_REFERENCE_NAME = 26;
  public static final int WAITING_PARAMETER = 28;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE = 30;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE_END = 32;
  public static final int WAITING_AFTER_PARAMETER = 34;
  public static final int WAITING_PARAMETER_CONDITION = 36;
  public static final int WAITING_PARAMETER_CONDITION_EXPRESSION = 38;
  public static final int WAITING_INLINE_MATH = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  4,  4,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15,  5,  5, 16, 16, 17, 17, 18, 18
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\35\1\3\2\2\1\3\22\0\1\35\1\44\1\14\1\4\1\13\1\51\2\0\1\15\1\45\1\47"+
    "\1\46\1\0\1\24\1\26\1\50\1\25\11\10\2\0\1\42\1\5\1\6\1\0\1\11\32\7\1\41\1"+
    "\16\1\12\1\0\1\7\1\0\1\32\1\31\2\7\1\20\1\7\1\30\1\33\3\7\1\34\1\7\1\22\1"+
    "\23\2\7\1\27\1\21\2\7\1\34\2\7\1\17\1\7\1\36\1\43\1\40\7\0\1\2\32\0\1\1\77"+
    "\0\12\37\46\0\12\37\14\0\12\37\20\0\12\37\6\0\12\37\6\0\13\1\35\0\2\2\5\0"+
    "\1\1\57\0\1\1\26\0\12\37\16\0\62\37");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\3\1\1\5\2\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\4\1\14\1\15\1\16\1\1\1\5\1\17"+
    "\1\4\3\1\1\5\2\1\1\20\1\21\1\22\1\23"+
    "\1\1\1\5\1\24\1\4\3\1\1\5\2\1\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\36\1\37\1\17\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\45"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\0\2\60"+
    "\1\0\1\1\1\0\1\61\2\0\2\60\1\0\1\62"+
    "\2\0\1\1\1\63\2\1\2\0\2\64\1\0\1\1"+
    "\1\0\1\65\2\0\2\64\1\0\1\62\2\0\1\1"+
    "\1\63\2\1\1\66\1\67\1\70\1\1\1\0\1\71"+
    "\1\0\1\1\1\63\2\1\1\25\1\30\1\0\1\31"+
    "\1\36\1\0\1\60\1\72\1\62\3\0\2\60\1\0"+
    "\2\1\1\73\1\64\1\72\1\62\2\0\2\64\1\0"+
    "\2\1\1\74\2\1\1\37\1\45\1\62\5\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u039c\0\u039c\0\u0540\0\u039c\0\u056a\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u039c\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\u078c\0\u07b6\0\u039c\0\u039c\0\u07e0\0\u080a"+
    "\0\u0834\0\u085e\0\u03f0\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930"+
    "\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u039c\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u039c\0\u039c\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u03f0"+
    "\0\u039c\0\u0b52\0\u039c\0\u039c\0\u0b7c\0\u0ba6\0\u039c\0\u039c"+
    "\0\u039c\0\u039c\0\u0bd0\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c"+
    "\0\u039c\0\u0bfa\0\u039c\0\u031e\0\u0c24\0\u0c4e\0\u0c78\0\u039c"+
    "\0\u041a\0\u0ca2\0\u0ccc\0\u041a\0\u0ccc\0\u0c24\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u031e\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u039c\0\u063c"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u039c\0\u06ba\0\u0e9a\0\u0ec4\0\u06ba"+
    "\0\u0ec4\0\u0e1c\0\u0eee\0\u0f18\0\u0f42\0\u063c\0\u0f6c\0\u0f96"+
    "\0\u039c\0\u039c\0\u039c\0\u0fc0\0\u0888\0\u039c\0\u0fea\0\u1014"+
    "\0\u0834\0\u103e\0\u1068\0\u039c\0\u039c\0\u1092\0\u039c\0\u10bc"+
    "\0\u10e6\0\u0c24\0\u0c4e\0\u0bfa\0\u1110\0\u113a\0\u1164\0\u1110"+
    "\0\u0cf6\0\u118e\0\u11b8\0\u11e2\0\u0dc8\0\u0e1c\0\u0e46\0\u0df2"+
    "\0\u120c\0\u1236\0\u1110\0\u0eee\0\u1260\0\u128a\0\u12b4\0\u0fc0"+
    "\0\u12de\0\u1308\0\u10bc\0\u10e6\0\u039c\0\u1332\0\u135c\0\u1386"+
    "\0\u13b0\0\u13da\0\u039c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\24\3\25\1\26\1\27\2\24\1\30\1\31\1\27"+
    "\1\24\1\32\2\24\1\33\2\24\1\34\1\24\1\35"+
    "\1\36\1\24\1\37\3\24\1\40\1\24\1\25\1\41"+
    "\1\24\1\42\1\27\4\24\1\35\3\24\1\27\3\25"+
    "\1\43\1\44\1\27\1\45\7\27\5\45\3\27\6\45"+
    "\1\25\1\41\1\27\1\42\12\27\3\25\1\43\1\44"+
    "\27\27\1\25\1\41\1\27\1\42\12\27\3\25\1\43"+
    "\3\27\1\46\13\27\1\47\1\50\7\27\1\25\1\41"+
    "\1\27\1\42\5\27\1\47\4\27\3\51\1\43\5\27"+
    "\1\52\22\27\1\51\1\41\1\27\1\42\63\27\1\53"+
    "\3\25\1\26\1\27\2\53\1\54\1\55\1\27\1\53"+
    "\1\56\2\53\1\57\2\53\1\60\1\53\1\61\1\62"+
    "\1\53\1\63\3\53\1\64\1\53\1\25\1\41\1\53"+
    "\1\42\1\65\4\53\1\61\3\53\1\27\3\25\1\43"+
    "\1\66\1\67\26\27\1\25\1\41\1\27\1\42\1\27"+
    "\1\70\7\27\1\71\3\25\1\43\1\27\2\71\1\72"+
    "\1\73\1\27\1\71\1\74\2\71\1\75\2\71\1\76"+
    "\1\71\1\77\1\100\1\71\1\101\3\71\1\102\1\71"+
    "\1\25\1\41\1\71\1\42\1\27\4\71\1\77\3\71"+
    "\1\103\3\104\2\27\3\103\2\27\1\105\21\103\1\104"+
    "\1\41\1\103\1\42\1\27\10\103\1\106\3\51\2\27"+
    "\3\106\2\27\1\105\1\27\20\106\1\51\1\41\1\106"+
    "\1\42\1\27\10\106\1\27\3\51\3\27\1\107\7\27"+
    "\5\107\3\27\6\107\1\51\1\41\1\27\1\42\12\27"+
    "\3\51\3\27\1\110\7\27\5\110\3\27\6\110\1\51"+
    "\1\41\1\27\1\42\20\27\1\111\3\27\1\112\3\27"+
    "\5\111\3\27\6\111\1\27\1\41\1\27\1\42\2\27"+
    "\1\113\6\27\1\114\5\27\2\114\1\115\2\27\1\112"+
    "\1\27\7\114\1\116\1\117\7\114\1\27\1\41\1\114"+
    "\1\42\1\27\4\114\1\116\3\114\13\27\1\112\22\27"+
    "\1\41\1\27\1\42\11\27\1\53\3\25\1\26\1\27"+
    "\2\53\1\54\1\120\1\52\1\53\1\56\2\53\1\57"+
    "\2\53\1\60\1\53\1\61\1\62\1\53\1\63\3\53"+
    "\1\64\1\53\1\25\1\41\1\53\1\42\1\121\4\53"+
    "\1\61\3\53\1\27\3\25\3\27\1\122\2\27\1\123"+
    "\4\27\5\122\3\27\6\122\1\25\1\41\1\27\1\42"+
    "\3\27\1\124\6\27\3\25\3\27\1\125\1\126\1\27"+
    "\1\127\1\130\1\27\1\131\1\27\5\125\1\132\1\133"+
    "\1\27\6\125\1\25\5\27\1\134\1\27\1\135\1\136"+
    "\1\137\1\140\1\141\1\24\3\142\1\24\1\143\1\144"+
    "\3\24\1\0\1\24\1\145\20\24\1\142\1\0\1\24"+
    "\2\0\1\144\7\24\1\0\3\25\31\0\1\25\14\0"+
    "\3\26\1\0\46\26\52\0\1\24\3\142\1\24\1\143"+
    "\1\144\1\24\1\30\1\24\1\0\1\24\1\145\10\24"+
    "\1\30\1\146\6\24\1\142\1\0\1\24\2\0\1\144"+
    "\7\24\16\0\1\147\22\0\1\150\10\0\1\151\2\152"+
    "\1\142\1\151\1\153\1\154\3\151\1\155\1\151\1\156"+
    "\1\157\1\160\16\151\1\152\1\155\1\151\2\155\1\154"+
    "\7\151\1\24\3\142\1\24\1\143\1\144\3\24\1\0"+
    "\1\24\1\145\3\24\1\161\14\24\1\142\1\0\1\24"+
    "\2\0\1\144\10\24\3\142\1\24\1\143\1\144\3\24"+
    "\1\0\1\24\1\145\6\24\1\162\11\24\1\142\1\0"+
    "\1\24\2\0\1\144\10\24\3\142\1\24\1\143\1\144"+
    "\1\24\1\30\1\24\1\0\1\24\1\145\10\24\1\36"+
    "\7\24\1\142\1\0\1\24\2\0\1\144\10\24\3\142"+
    "\1\24\1\143\1\144\3\24\1\0\1\24\1\145\11\24"+
    "\1\146\6\24\1\142\1\0\1\24\2\0\1\144\10\24"+
    "\3\142\1\24\1\143\1\144\3\24\1\0\1\24\1\145"+
    "\13\24\1\163\4\24\1\142\1\0\1\24\2\0\1\144"+
    "\10\24\3\142\1\24\1\143\1\144\3\24\1\0\1\24"+
    "\1\145\4\24\1\164\13\24\1\142\1\0\1\24\2\0"+
    "\1\144\7\24\3\43\1\0\46\43\7\0\2\45\6\0"+
    "\5\45\1\0\1\45\1\0\6\45\25\0\1\46\14\0"+
    "\1\46\1\165\33\0\1\46\14\0\1\50\52\0\1\165"+
    "\24\0\3\51\31\0\1\51\14\0\1\53\3\166\1\53"+
    "\1\167\1\170\3\53\1\0\1\53\1\171\20\53\1\166"+
    "\1\0\1\53\2\0\1\170\10\53\3\166\1\53\1\167"+
    "\1\170\1\53\1\54\1\53\1\0\1\53\1\171\10\53"+
    "\1\54\1\172\6\53\1\166\1\0\1\53\2\0\1\170"+
    "\7\53\16\0\1\173\22\0\1\174\10\0\1\175\2\176"+
    "\1\166\1\175\1\177\1\200\3\175\1\201\1\175\1\202"+
    "\1\203\1\204\16\175\1\176\1\201\1\175\2\201\1\200"+
    "\7\175\1\53\3\166\1\53\1\167\1\170\3\53\1\0"+
    "\1\53\1\171\3\53\1\205\14\53\1\166\1\0\1\53"+
    "\2\0\1\170\10\53\3\166\1\53\1\167\1\170\3\53"+
    "\1\0\1\53\1\171\6\53\1\206\11\53\1\166\1\0"+
    "\1\53\2\0\1\170\10\53\3\166\1\53\1\167\1\170"+
    "\1\53\1\54\1\53\1\0\1\53\1\171\10\53\1\62"+
    "\7\53\1\166\1\0\1\53\2\0\1\170\10\53\3\166"+
    "\1\53\1\167\1\170\3\53\1\0\1\53\1\171\11\53"+
    "\1\172\6\53\1\166\1\0\1\53\2\0\1\170\10\53"+
    "\3\166\1\53\1\167\1\170\3\53\1\0\1\53\1\171"+
    "\13\53\1\207\4\53\1\166\1\0\1\53\2\0\1\170"+
    "\10\53\3\166\1\53\1\167\1\170\3\53\1\0\1\53"+
    "\1\171\4\53\1\210\13\53\1\166\1\0\1\53\2\0"+
    "\1\170\7\53\5\0\1\211\51\0\1\212\1\213\43\0"+
    "\1\71\3\0\1\71\1\0\4\71\1\0\1\71\1\0"+
    "\20\71\2\0\1\71\2\0\11\71\3\0\1\71\1\0"+
    "\2\71\1\72\1\71\1\0\1\71\1\0\10\71\1\72"+
    "\1\214\6\71\2\0\1\71\2\0\10\71\3\215\1\0"+
    "\10\215\1\216\1\215\1\217\33\215\1\71\3\0\1\71"+
    "\1\0\4\71\1\0\1\71\1\0\3\71\1\220\14\71"+
    "\2\0\1\71\2\0\11\71\3\0\1\71\1\0\4\71"+
    "\1\0\1\71\1\0\6\71\1\221\11\71\2\0\1\71"+
    "\2\0\11\71\3\0\1\71\1\0\2\71\1\72\1\71"+
    "\1\0\1\71\1\0\10\71\1\100\7\71\2\0\1\71"+
    "\2\0\11\71\3\0\1\71\1\0\4\71\1\0\1\71"+
    "\1\0\11\71\1\214\6\71\2\0\1\71\2\0\11\71"+
    "\3\0\1\71\1\0\4\71\1\0\1\71\1\0\13\71"+
    "\1\222\4\71\2\0\1\71\2\0\11\71\3\0\1\71"+
    "\1\0\4\71\1\0\1\71\1\0\4\71\1\223\13\71"+
    "\2\0\1\71\2\0\10\71\1\103\3\0\1\103\1\0"+
    "\4\103\1\0\1\224\21\103\2\0\1\103\2\0\10\103"+
    "\1\0\3\104\31\0\1\104\14\0\1\106\3\0\1\106"+
    "\1\0\4\106\1\0\1\225\1\0\20\106\2\0\1\106"+
    "\2\0\10\106\1\0\3\226\1\0\1\227\1\0\2\107"+
    "\6\0\5\107\1\0\1\107\1\0\6\107\1\226\23\0"+
    "\2\110\6\0\5\110\1\0\1\110\1\0\6\110\24\0"+
    "\2\111\6\0\5\111\1\0\1\111\1\0\6\111\15\0"+
    "\1\114\3\0\1\114\1\0\4\114\3\0\20\114\2\0"+
    "\1\114\2\0\11\114\3\0\1\114\1\0\2\114\1\115"+
    "\1\114\3\0\10\114\1\115\1\230\6\114\2\0\1\114"+
    "\2\0\11\114\3\0\1\114\1\0\2\114\1\115\1\114"+
    "\3\0\10\114\1\117\7\114\2\0\1\114\2\0\11\114"+
    "\3\0\1\114\1\0\4\114\3\0\11\114\1\230\6\114"+
    "\2\0\1\114\2\0\10\114\7\0\2\122\6\0\5\122"+
    "\1\0\1\122\1\0\6\122\24\0\2\125\6\0\5\125"+
    "\1\0\1\125\1\0\6\125\25\0\1\126\14\0\1\126"+
    "\1\231\51\0\1\231\24\0\3\142\1\0\2\143\26\0"+
    "\1\142\4\0\1\143\7\0\1\145\3\142\1\145\1\143"+
    "\1\232\3\145\1\0\22\145\1\142\1\0\1\145\2\0"+
    "\1\232\7\145\1\24\3\142\1\24\1\143\1\144\1\24"+
    "\1\233\1\24\1\0\1\24\1\145\10\24\1\233\7\24"+
    "\1\142\1\0\1\24\2\0\1\144\7\24\41\0\1\150"+
    "\10\0\1\155\2\152\1\142\1\155\2\153\5\155\1\234"+
    "\1\235\1\236\16\155\1\152\4\155\1\153\12\155\1\0"+
    "\10\155\1\234\1\235\1\236\33\155\1\157\2\237\1\142"+
    "\1\157\1\240\1\241\3\157\1\235\1\157\1\156\1\157"+
    "\1\242\16\157\1\237\1\235\1\157\2\235\1\241\7\157"+
    "\1\151\1\152\2\142\1\151\1\153\1\154\3\151\1\155"+
    "\22\151\1\152\1\155\1\151\2\155\1\154\7\151\1\24"+
    "\3\142\1\24\1\143\1\144\3\24\1\0\1\24\1\145"+
    "\4\24\1\162\13\24\1\142\1\0\1\24\2\0\1\144"+
    "\10\24\3\142\1\24\1\143\1\144\3\24\1\0\1\24"+
    "\1\145\14\24\1\243\3\24\1\142\1\0\1\24\2\0"+
    "\1\144\10\24\3\142\1\24\1\143\1\144\3\24\1\0"+
    "\1\24\1\145\14\24\1\244\2\24\1\244\1\142\1\0"+
    "\1\24\2\0\1\144\7\24\10\0\1\245\14\0\1\245"+
    "\25\0\3\166\1\0\2\167\26\0\1\166\4\0\1\167"+
    "\7\0\1\171\3\166\1\171\1\167\1\246\3\171\1\0"+
    "\22\171\1\166\1\0\1\171\2\0\1\246\7\171\1\53"+
    "\3\166\1\53\1\167\1\170\1\53\1\247\1\53\1\0"+
    "\1\53\1\171\10\53\1\247\7\53\1\166\1\0\1\53"+
    "\2\0\1\170\7\53\41\0\1\174\10\0\1\201\2\176"+
    "\1\166\1\201\2\177\5\201\1\250\1\235\1\251\16\201"+
    "\1\176\4\201\1\177\12\201\1\0\10\201\1\250\1\235"+
    "\1\251\33\201\1\203\2\252\1\166\1\203\1\253\1\254"+
    "\3\203\1\235\1\203\1\202\1\203\1\255\16\203\1\252"+
    "\1\235\1\203\2\235\1\254\7\203\1\175\1\176\2\166"+
    "\1\175\1\177\1\200\3\175\1\201\22\175\1\176\1\201"+
    "\1\175\2\201\1\200\7\175\1\53\3\166\1\53\1\167"+
    "\1\170\3\53\1\0\1\53\1\171\4\53\1\206\13\53"+
    "\1\166\1\0\1\53\2\0\1\170\10\53\3\166\1\53"+
    "\1\167\1\170\3\53\1\0\1\53\1\171\14\53\1\256"+
    "\3\53\1\166\1\0\1\53\2\0\1\170\10\53\3\166"+
    "\1\53\1\167\1\170\3\53\1\0\1\53\1\171\14\53"+
    "\1\257\2\53\1\257\1\166\1\0\1\53\2\0\1\170"+
    "\7\53\1\71\3\0\1\71\1\0\2\71\1\260\1\71"+
    "\1\0\1\71\1\0\10\71\1\260\7\71\2\0\1\71"+
    "\2\0\10\71\2\215\2\0\46\215\1\71\3\0\1\71"+
    "\1\0\4\71\1\0\1\71\1\0\4\71\1\221\13\71"+
    "\2\0\1\71\2\0\11\71\3\0\1\71\1\0\4\71"+
    "\1\0\1\71\1\0\14\71\1\261\3\71\2\0\1\71"+
    "\2\0\11\71\3\0\1\71\1\0\4\71\1\0\1\71"+
    "\1\0\14\71\1\262\2\71\1\262\2\0\1\71\2\0"+
    "\10\71\1\0\3\226\1\0\1\227\27\0\1\226\14\0"+
    "\1\114\3\0\1\114\1\0\2\114\1\263\1\114\3\0"+
    "\10\114\1\263\7\114\2\0\1\114\2\0\10\114\10\0"+
    "\1\264\14\0\1\264\24\0\3\235\1\0\10\235\1\265"+
    "\1\235\1\266\33\235\2\155\2\0\46\155\1\235\2\237"+
    "\1\142\1\235\2\240\5\235\1\265\1\235\1\266\16\235"+
    "\1\237\4\235\1\240\7\235\1\157\1\237\2\142\1\157"+
    "\1\240\1\241\3\157\1\235\22\157\1\237\1\235\1\157"+
    "\2\235\1\241\7\157\1\24\3\142\1\24\1\143\1\144"+
    "\3\24\1\0\1\24\1\145\15\24\1\244\2\24\1\267"+
    "\1\270\1\24\2\0\1\144\10\24\3\142\1\24\1\143"+
    "\1\144\3\24\1\0\1\24\1\145\20\24\1\267\1\270"+
    "\1\24\2\0\1\144\7\24\2\201\2\0\46\201\1\235"+
    "\2\252\1\166\1\235\2\253\5\235\1\265\1\235\1\266"+
    "\16\235\1\252\4\235\1\253\7\235\1\203\1\252\2\166"+
    "\1\203\1\253\1\254\3\203\1\235\22\203\1\252\1\235"+
    "\1\203\2\235\1\254\7\203\1\53\3\166\1\53\1\167"+
    "\1\170\3\53\1\0\1\53\1\171\15\53\1\257\2\53"+
    "\1\271\1\270\1\53\2\0\1\170\10\53\3\166\1\53"+
    "\1\167\1\170\3\53\1\0\1\53\1\171\20\53\1\271"+
    "\1\270\1\53\2\0\1\170\7\53\1\71\3\0\1\71"+
    "\1\0\4\71\1\0\1\71\1\0\15\71\1\262\2\71"+
    "\1\272\1\270\1\71\2\0\11\71\3\0\1\71\1\0"+
    "\4\71\1\0\1\71\1\0\20\71\1\272\1\270\1\71"+
    "\2\0\10\71\2\235\2\0\46\235\1\0\3\142\1\0"+
    "\2\143\26\0\1\267\1\270\3\0\1\143\10\0\2\270"+
    "\5\0\1\270\14\0\2\270\6\0\1\270\1\0\1\270"+
    "\1\273\12\0\3\166\1\0\2\167\26\0\1\271\1\270"+
    "\3\0\1\167\44\0\1\272\1\270\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\3\1\1\11\11\1\2\11\1\1\1\11\5\1"+
    "\1\11\12\1\2\11\16\1\1\11\4\1\2\11\5\1"+
    "\1\11\1\1\2\11\2\1\4\11\1\1\6\11\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\1\11\2\0\2\1"+
    "\1\0\1\1\2\0\4\1\2\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\2\0\2\1\1\0\1\1\2\0"+
    "\4\1\3\11\1\1\1\0\1\11\1\0\4\1\2\11"+
    "\1\0\1\11\1\1\1\0\3\1\3\0\2\1\1\0"+
    "\6\1\2\0\2\1\1\0\7\1\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int depth = 0;
    private boolean inWildcardKey = false;
    private boolean inWildcardValue = false;
	private boolean isWildcardContainsParameter = false;
	private boolean inParameterCondition = false;
    private boolean inInlineMath = false;
    private boolean leftAbsSign = true;
    
    public ParadoxScriptLexer() {
        this((java.io.Reader)null);
    }
    
    private void beginNextState(){
		if(inParameterCondition){
			yybegin(WAITING_PARAMETER_CONDITION);
		} else {
	        if(depth <= 0){
		        yybegin(YYINITIAL);
	        } else {
		        yybegin(WAITING_PROPERTY_KEY);
	        }
		}
    }
	
    private void beginNextStateForParameter(){
		if(inWildcardKey){
			yybegin(WAITING_WILDCARD_KEY);
		} else if(inWildcardValue){
			yybegin(WAITING_WILDCARD_VALUE);
		} else if(inInlineMath){
            yybegin(WAITING_INLINE_MATH);
        } else {
            beginNextState();
        }
    }
    
    private void onBlank(){
		inWildcardKey = false;
		inWildcardValue = false;
		isWildcardContainsParameter = false;
    }
	
	private void enterWildcardKey(){
		inWildcardKey = true;
	}
	
	private void enterWildcardValue(){
		inWildcardValue = true;
	}
    
	private void enterInlineMath(){
		inInlineMath = true;
		leftAbsSign = true;
	}
	
	private void exitInlineMath(){
		inInlineMath = false;
	}
	
    private void pushbackUntilBeforeBlank(int begin){
        //回退到末尾可能出现的空白之前
        int length = yylength();
        int i;
        for (i = begin; i < length ; i++) {
          char c = yycharat(length-i-1);
          if(!Character.isWhitespace(c)) break;
        }
        if(i != 0){
            yypushback(i);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { enterWildcardValue(); yypushback(yylength()); yybegin(WAITING_WILDCARD_VALUE);
            } 
            // fall through
          case 62: break;
          case 2: 
            { onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 64: break;
          case 4: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 65: break;
          case 5: 
            { yybegin(WAITING_PROPERTY_END); return INT_TOKEN;
            } 
            // fall through
          case 66: break;
          case 6: 
            { yybegin(WAITING_VARIABLE_NAME); return AT;
            } 
            // fall through
          case 67: break;
          case 7: 
            { depth++; beginNextState(); return LEFT_BRACE;
            } 
            // fall through
          case 68: break;
          case 8: 
            { depth--; beginNextState(); return RIGHT_BRACE;
            } 
            // fall through
          case 69: break;
          case 9: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 70: break;
          case 10: 
            { yybegin(WAITING_VARIABLE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 71: break;
          case 11: 
            { yybegin(WAITING_VARIABLE_EQUAL_SIGN); return VARIABLE_NAME_ID;
            } 
            // fall through
          case 72: break;
          case 12: 
            { yybegin(WAITING_VARIABLE_END); return INT_TOKEN;
            } 
            // fall through
          case 73: break;
          case 13: 
            { beginNextState(); onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 14: 
            { inParameterCondition=false; beginNextState(); return RIGHT_BRACKET;
            } 
            // fall through
          case 75: break;
          case 15: 
            { yybegin(WAITING_VARIABLE); return AT;
            } 
            // fall through
          case 76: break;
          case 16: 
            { inParameterCondition=true; yybegin(WAITING_PARAMETER_CONDITION); return LEFT_BRACKET;
            } 
            // fall through
          case 77: break;
          case 17: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 78: break;
          case 18: 
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            } 
            // fall through
          case 79: break;
          case 19: 
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            } 
            // fall through
          case 80: break;
          case 20: 
            { yybegin(WAITING_VARIABLE_REFERENCE_NAME); return AT;
            } 
            // fall through
          case 81: break;
          case 21: 
            { if(yycharat(yylength() - 1) == '$'){
		  yypushback(1);
		  isWildcardContainsParameter = true;
		  return KEY_STRING_SNIPPET;
      } else if(isWildcardContainsParameter){
          return KEY_STRING_SNIPPET;
      } else {
		  return PROPERTY_KEY_TOKEN;
      }
            } 
            // fall through
          case 82: break;
          case 22: 
            { yybegin(WATIING_PROPERTY_SEPARATOR); onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 23: 
            { isWildcardContainsParameter=true; yybegin(WAITING_PARAMETER); return PARAMETER_START;
            } 
            // fall through
          case 84: break;
          case 24: 
            { if(yycharat(yylength() - 1) == '$'){
		  yypushback(1);
		  isWildcardContainsParameter = true;
		  return VALUE_STRING_SNIPPET;
      } else if(isWildcardContainsParameter){
          return VALUE_STRING_SNIPPET;
      } else {
		  return STRING_TOKEN;
      }
            } 
            // fall through
          case 85: break;
          case 25: 
            { //如果匹配到的文本以等号结尾，则将空白之前的文本解析为VARIABLE_NAME_ID，否则将整个匹配文本解析为VARIABLE_REFERENCE_ID
	if(yycharat(yylength() -1) == '='){
	  pushbackUntilBeforeBlank(1);
	  yybegin(WAITING_VARIABLE_EQUAL_SIGN);
	  return VARIABLE_NAME_ID;
	} else {
	  yybegin(WAITING_PROPERTY_END);
      return VARIABLE_REFERENCE_ID;
	}
            } 
            // fall through
          case 86: break;
          case 26: 
            { yybegin(WAITING_PROPERTY_END); return VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 87: break;
          case 27: 
            { return PARAMETER_ID;
            } 
            // fall through
          case 88: break;
          case 28: 
            { beginNextStateForParameter(); return PARAMETER_END;
            } 
            // fall through
          case 89: break;
          case 29: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE); return PIPE;
            } 
            // fall through
          case 90: break;
          case 30: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return ARG_STRING_TOKEN;
            } 
            // fall through
          case 91: break;
          case 31: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return ARG_NUMBER_TOKEN;
            } 
            // fall through
          case 92: break;
          case 32: 
            { yybegin(WAITING_PARAMETER_CONDITION_EXPRESSION); return NESTED_LEFT_BRACKET;
            } 
            // fall through
          case 93: break;
          case 33: 
            { return INPUT_PARAMETER_ID;
            } 
            // fall through
          case 94: break;
          case 34: 
            { yybegin(WAITING_PARAMETER_CONDITION); return NESTED_RIGHT_BRACKET;
            } 
            // fall through
          case 95: break;
          case 35: 
            { return NOT_SIGN;
            } 
            // fall through
          case 96: break;
          case 36: 
            { return INLINE_MATH_VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 97: break;
          case 37: 
            { return NUMBER_TOKEN;
            } 
            // fall through
          case 98: break;
          case 38: 
            { exitInlineMath(); beginNextState(); return INLINE_MATH_END;
            } 
            // fall through
          case 99: break;
          case 39: 
            { yybegin(WAITING_PARAMETER); return PARAMETER_START;
            } 
            // fall through
          case 100: break;
          case 40: 
            { return LP_SIGN;
            } 
            // fall through
          case 101: break;
          case 41: 
            { yybegin(WAITING_INLINE_MATH); return MINUS_SIGN;
            } 
            // fall through
          case 102: break;
          case 42: 
            { if(leftAbsSign){
      leftAbsSign=false; 
      return LABS_SIGN;
    }else{
      leftAbsSign=true;
      return RABS_SIGN;
    }
            } 
            // fall through
          case 103: break;
          case 43: 
            { return RP_SIGN;
            } 
            // fall through
          case 104: break;
          case 44: 
            { yybegin(WAITING_INLINE_MATH); return PLUS_SIGN;
            } 
            // fall through
          case 105: break;
          case 45: 
            { yybegin(WAITING_INLINE_MATH); return TIMES_SIGN;
            } 
            // fall through
          case 106: break;
          case 46: 
            { yybegin(WAITING_INLINE_MATH); return DIV_SIGN;
            } 
            // fall through
          case 107: break;
          case 47: 
            { yybegin(WAITING_INLINE_MATH); return MOD_SIGN;
            } 
            // fall through
          case 108: break;
          case 48: 
            { if(yycharat(0) == '"'){
		  yybegin(WATIING_PROPERTY_SEPARATOR); return QUOTED_PROPERTY_KEY_TOKEN;
	  } else {
	     enterWildcardKey(); yypushback(yylength()); yybegin(WAITING_WILDCARD_KEY);
	  }
            } 
            // fall through
          case 109: break;
          case 49: 
            { enterInlineMath(); yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 110: break;
          case 50: 
            { yybegin(WAITING_PROPERTY_END); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 111: break;
          case 51: 
            { yybegin(WAITING_PROPERTY_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 112: break;
          case 52: 
            { if(yycharat(0) == '"'){
 		  yybegin(WATIING_PROPERTY_SEPARATOR); return QUOTED_PROPERTY_KEY_TOKEN;
 	  } else {
 	     enterWildcardKey(); yypushback(yylength()); yybegin(WAITING_WILDCARD_KEY);
 	  }
            } 
            // fall through
          case 113: break;
          case 53: 
            { enterInlineMath(); leftAbsSign=true; yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 114: break;
          case 54: 
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            } 
            // fall through
          case 115: break;
          case 55: 
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            } 
            // fall through
          case 116: break;
          case 56: 
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 117: break;
          case 57: 
            { beginNextState(); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 118: break;
          case 58: 
            { yybegin(WAITING_PROPERTY_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 119: break;
          case 59: 
            { yybegin(WAITING_VARIABLE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 120: break;
          case 60: 
            { yybegin(WAITING_PROPERTY_END);; return FLOAT_TOKEN;
            } 
            // fall through
          case 121: break;
          case 61: 
            { yybegin(WAITING_PROPERTY_END); return COLOR_TOKEN;
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
