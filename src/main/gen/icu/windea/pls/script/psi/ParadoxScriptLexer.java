/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.script.psi;

import com.intellij.openapi.project.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ParadoxScriptLexer.flex</tt>
 */
public class ParadoxScriptLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VARIABLE_NAME = 2;
  public static final int WAITING_VARIABLE_EQUAL_SIGN = 4;
  public static final int WAITING_VARIABLE_VALUE = 6;
  public static final int WAITING_VARIABLE_END = 8;
  public static final int WAITING_PROPERTY = 10;
  public static final int WAITING_PROPERTY_KEY = 12;
  public static final int WATIING_PROPERTY_SEPARATOR = 14;
  public static final int WAITING_PROPERTY_VALUE = 16;
  public static final int WAITING_PROPERTY_END = 18;
  public static final int WAITING_VARIABLE = 20;
  public static final int WAITING_VARIABLE_REFERENCE_NAME = 22;
  public static final int WAITING_PARAMETER = 24;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE = 26;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE_END = 28;
  public static final int WAITING_AFTER_PARAMETER = 30;
  public static final int WAITING_PARAMETER_CONDITION = 32;
  public static final int WAITING_PARAMETER_CONDITION_EXPRESSION = 34;
  public static final int WAITING_INLINE_MATH = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  4,  4,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\35\1\3\2\2\1\3\22\0\1\35\1\44\1\14\1\4\1\6\1\51\2\0\1\15\1\45\1\47"+
    "\1\46\1\0\1\24\1\26\1\50\1\25\11\11\2\0\1\42\1\5\1\7\1\0\1\12\32\10\1\41\1"+
    "\16\1\13\1\0\1\10\1\0\1\32\1\31\2\10\1\20\1\10\1\30\1\33\3\10\1\34\1\10\1"+
    "\22\1\23\2\10\1\27\1\21\2\10\1\34\2\10\1\17\1\10\1\36\1\43\1\40\7\0\1\2\32"+
    "\0\1\1\77\0\12\37\46\0\12\37\14\0\12\37\20\0\12\37\6\0\12\37\6\0\13\1\35\0"+
    "\2\2\5\0\1\1\57\0\1\1\26\0\12\37\16\0\62\37");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\3\1\1\6\2\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\4\1\15\1\16\1\17\1\1\1\6"+
    "\1\20\3\1\1\6\2\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\5\1\6\1\26\1\4\3\25\1\6\2\25"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\43\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\1\56\1\55\1\0\1\55\1\1"+
    "\1\0\1\57\2\0\2\55\1\0\1\60\2\0\1\1"+
    "\1\61\2\1\1\0\1\62\1\55\2\1\1\61\2\1"+
    "\1\63\1\64\1\65\1\62\1\25\1\0\1\66\1\0"+
    "\1\25\1\61\2\25\1\0\1\27\1\34\1\0\1\67"+
    "\1\60\3\0\2\55\1\0\2\1\1\70\1\67\2\1"+
    "\1\71\2\25\1\35\1\43\1\60\4\0\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u0372\0\u0372\0\u0540\0\u0372\0\u056a\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u0372\0\u063c\0\u0666\0\u03f0\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u0372\0\u0372\0\u078c\0\u07b6\0\u07e0"+
    "\0\u0372\0\u080a\0\u03f0\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u0372\0\u09ae\0\u0372\0\u09d8"+
    "\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0372\0\u0372\0\u0372\0\u0aaa"+
    "\0\u0ad4\0\u0372\0\u0372\0\u0372\0\u0afe\0\u0372\0\u0372\0\u0372"+
    "\0\u0372\0\u0372\0\u0372\0\u0b28\0\u0372\0\u0b28\0\u02f4\0\u039c"+
    "\0\u039c\0\u0b52\0\u0b7c\0\u0372\0\u041a\0\u0ba6\0\u0bd0\0\u041a"+
    "\0\u0bd0\0\u039c\0\u0bfa\0\u0c24\0\u0c4e\0\u02f4\0\u0c78\0\u0ca2"+
    "\0\u0ccc\0\u0b28\0\u063c\0\u0cf6\0\u0d20\0\u063c\0\u0d4a\0\u0d74"+
    "\0\u0372\0\u0372\0\u0372\0\u0372\0\u0d9e\0\u0834\0\u0372\0\u0dc8"+
    "\0\u0df2\0\u07e0\0\u0e1c\0\u0e46\0\u0e70\0\u0372\0\u0e9a\0\u0ec4"+
    "\0\u0b52\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f18\0\u0bfa\0\u0f96"+
    "\0\u0fc0\0\u0fea\0\u0ccc\0\u0cf6\0\u1014\0\u103e\0\u0d9e\0\u1068"+
    "\0\u1092\0\u0e9a\0\u0ec4\0\u0372\0\u10bc\0\u10e6\0\u1110\0\u113a"+
    "\0\u0372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\3\24\1\25\1\26\1\27\2\23\1\30\1\31"+
    "\1\26\1\32\2\23\1\33\2\23\1\34\1\23\1\35"+
    "\1\36\1\23\1\37\3\23\1\40\1\23\1\24\1\41"+
    "\1\23\1\42\1\26\4\23\1\35\3\23\1\26\3\24"+
    "\1\43\1\44\2\26\1\45\6\26\5\45\3\26\6\45"+
    "\1\24\1\41\1\26\1\42\12\26\3\24\1\43\1\44"+
    "\27\26\1\24\1\41\1\26\1\42\12\26\3\24\1\43"+
    "\4\26\1\46\12\26\1\47\1\50\7\26\1\24\1\41"+
    "\1\26\1\42\5\26\1\47\4\26\3\51\1\43\6\26"+
    "\1\52\21\26\1\51\1\41\1\26\1\42\63\26\1\53"+
    "\3\24\1\25\1\26\1\27\2\53\1\54\1\55\1\26"+
    "\1\32\2\53\1\56\2\53\1\57\1\53\1\60\1\61"+
    "\1\53\1\62\3\53\1\63\1\53\1\24\1\41\1\53"+
    "\1\42\1\64\4\53\1\60\3\53\1\26\3\24\1\43"+
    "\1\65\1\26\1\66\25\26\1\24\1\41\1\26\1\42"+
    "\1\26\1\67\7\26\1\70\3\24\1\43\1\26\1\71"+
    "\2\70\1\72\1\73\1\26\1\74\2\70\1\75\2\70"+
    "\1\76\1\70\1\77\1\100\1\70\1\101\3\70\1\102"+
    "\1\70\1\24\1\41\1\70\1\42\1\26\4\70\1\77"+
    "\3\70\1\26\3\51\4\26\1\103\6\26\5\103\3\26"+
    "\6\103\1\51\1\41\1\26\1\42\12\26\3\51\4\26"+
    "\1\104\6\26\5\104\3\26\6\104\1\51\1\41\1\26"+
    "\1\42\12\26\3\51\2\26\1\105\1\26\1\106\6\26"+
    "\5\106\3\26\6\106\1\51\1\41\1\26\1\42\2\26"+
    "\1\107\6\26\1\110\3\51\2\26\1\105\2\110\1\111"+
    "\3\26\7\110\1\112\1\113\7\110\1\51\1\41\1\110"+
    "\1\42\1\26\4\110\1\112\3\110\1\26\3\51\2\26"+
    "\1\105\26\26\1\51\1\41\1\26\1\42\11\26\1\114"+
    "\3\51\2\26\1\71\3\114\1\26\1\52\1\26\20\114"+
    "\1\51\1\41\1\114\1\42\1\26\10\114\1\53\3\24"+
    "\1\25\1\26\1\27\2\53\1\54\1\55\1\52\1\32"+
    "\2\53\1\56\2\53\1\57\1\53\1\60\1\61\1\53"+
    "\1\62\3\53\1\63\1\53\1\24\1\41\1\53\1\42"+
    "\1\115\4\53\1\60\3\53\1\26\3\24\4\26\1\106"+
    "\2\26\1\116\3\26\5\106\3\26\6\106\1\24\1\41"+
    "\1\26\1\42\3\26\1\117\6\26\3\24\2\26\1\71"+
    "\1\26\1\120\1\121\1\26\1\122\1\26\1\123\1\26"+
    "\5\120\1\124\1\125\1\26\6\120\1\24\5\26\1\126"+
    "\1\26\1\127\1\130\1\131\1\132\1\133\1\23\3\134"+
    "\1\23\1\135\1\136\1\137\3\23\1\0\1\140\20\23"+
    "\1\134\1\0\1\23\2\0\1\137\7\23\1\0\3\24"+
    "\31\0\1\24\14\0\3\25\1\0\46\25\52\0\1\140"+
    "\3\134\1\140\1\135\1\134\1\141\3\140\1\0\21\140"+
    "\1\134\1\0\1\140\2\0\1\141\7\140\1\23\3\134"+
    "\1\23\1\135\1\136\1\137\1\23\1\30\1\23\1\0"+
    "\1\140\10\23\1\30\1\142\6\23\1\134\1\0\1\23"+
    "\2\0\1\137\7\23\16\0\1\143\22\0\1\144\10\0"+
    "\1\145\2\146\1\134\1\145\1\147\1\146\1\150\3\145"+
    "\1\151\1\152\1\153\1\154\16\145\1\146\1\151\1\145"+
    "\2\151\1\150\7\145\1\23\3\134\1\23\1\135\1\136"+
    "\1\137\3\23\1\0\1\140\3\23\1\155\14\23\1\134"+
    "\1\0\1\23\2\0\1\137\10\23\3\134\1\23\1\135"+
    "\1\136\1\137\3\23\1\0\1\140\6\23\1\156\11\23"+
    "\1\134\1\0\1\23\2\0\1\137\10\23\3\134\1\23"+
    "\1\135\1\136\1\137\1\23\1\30\1\23\1\0\1\140"+
    "\10\23\1\36\7\23\1\134\1\0\1\23\2\0\1\137"+
    "\10\23\3\134\1\23\1\135\1\136\1\137\3\23\1\0"+
    "\1\140\11\23\1\142\6\23\1\134\1\0\1\23\2\0"+
    "\1\137\10\23\3\134\1\23\1\135\1\136\1\137\3\23"+
    "\1\0\1\140\13\23\1\157\4\23\1\134\1\0\1\23"+
    "\2\0\1\137\10\23\3\134\1\23\1\135\1\136\1\137"+
    "\3\23\1\0\1\140\4\23\1\160\13\23\1\134\1\0"+
    "\1\23\2\0\1\137\7\23\3\43\1\0\46\43\10\0"+
    "\2\45\5\0\5\45\1\0\1\45\1\0\6\45\26\0"+
    "\1\46\13\0\1\46\1\161\34\0\1\46\13\0\1\50"+
    "\52\0\1\161\24\0\3\51\31\0\1\51\14\0\1\53"+
    "\3\134\1\53\1\135\1\162\1\163\3\53\1\0\1\140"+
    "\20\53\1\134\1\0\1\53\2\0\1\163\10\53\3\134"+
    "\1\53\1\135\1\162\1\163\1\53\1\54\1\53\1\0"+
    "\1\140\10\53\1\54\1\164\6\53\1\134\1\0\1\53"+
    "\2\0\1\163\10\53\3\134\1\53\1\135\1\162\1\163"+
    "\3\53\1\0\1\140\3\53\1\165\14\53\1\134\1\0"+
    "\1\53\2\0\1\163\10\53\3\134\1\53\1\135\1\162"+
    "\1\163\3\53\1\0\1\140\6\53\1\166\11\53\1\134"+
    "\1\0\1\53\2\0\1\163\10\53\3\134\1\53\1\135"+
    "\1\162\1\163\1\53\1\54\1\53\1\0\1\140\10\53"+
    "\1\61\7\53\1\134\1\0\1\53\2\0\1\163\10\53"+
    "\3\134\1\53\1\135\1\162\1\163\3\53\1\0\1\140"+
    "\11\53\1\164\6\53\1\134\1\0\1\53\2\0\1\163"+
    "\10\53\3\134\1\53\1\135\1\162\1\163\3\53\1\0"+
    "\1\140\13\53\1\167\4\53\1\134\1\0\1\53\2\0"+
    "\1\163\10\53\3\134\1\53\1\135\1\162\1\163\3\53"+
    "\1\0\1\140\4\53\1\170\13\53\1\134\1\0\1\53"+
    "\2\0\1\163\7\53\5\0\1\171\51\0\1\172\1\0"+
    "\1\173\42\0\1\70\3\0\1\70\1\0\1\174\4\70"+
    "\2\0\20\70\2\0\1\70\2\0\11\70\3\0\1\70"+
    "\1\0\1\174\2\70\1\72\1\70\2\0\10\70\1\72"+
    "\1\175\6\70\2\0\1\70\2\0\10\70\3\176\1\0"+
    "\10\176\1\177\1\176\1\200\33\176\1\70\3\0\1\70"+
    "\1\0\1\174\4\70\2\0\3\70\1\201\14\70\2\0"+
    "\1\70\2\0\11\70\3\0\1\70\1\0\1\174\4\70"+
    "\2\0\6\70\1\202\11\70\2\0\1\70\2\0\11\70"+
    "\3\0\1\70\1\0\1\174\2\70\1\72\1\70\2\0"+
    "\10\70\1\100\7\70\2\0\1\70\2\0\11\70\3\0"+
    "\1\70\1\0\1\174\4\70\2\0\11\70\1\175\6\70"+
    "\2\0\1\70\2\0\11\70\3\0\1\70\1\0\1\174"+
    "\4\70\2\0\13\70\1\203\4\70\2\0\1\70\2\0"+
    "\11\70\3\0\1\70\1\0\1\174\4\70\2\0\4\70"+
    "\1\204\13\70\2\0\1\70\2\0\10\70\1\0\3\205"+
    "\1\0\1\206\2\0\2\103\5\0\5\103\1\0\1\103"+
    "\1\0\6\103\1\205\24\0\2\104\5\0\5\104\1\0"+
    "\1\104\1\0\6\104\25\0\2\106\5\0\5\106\1\0"+
    "\1\106\1\0\6\106\15\0\1\110\3\0\1\110\2\0"+
    "\4\110\2\0\20\110\2\0\1\110\2\0\11\110\3\0"+
    "\1\110\2\0\2\110\1\111\1\110\2\0\10\110\1\111"+
    "\1\207\6\110\2\0\1\110\2\0\11\110\3\0\1\110"+
    "\2\0\2\110\1\111\1\110\2\0\10\110\1\113\7\110"+
    "\2\0\1\110\2\0\11\110\3\0\1\110\2\0\4\110"+
    "\2\0\11\110\1\207\6\110\2\0\1\110\2\0\10\110"+
    "\1\114\3\0\1\114\2\0\4\114\2\0\20\114\2\0"+
    "\1\114\2\0\10\114\10\0\2\120\5\0\5\120\1\0"+
    "\1\120\1\0\6\120\26\0\1\121\13\0\1\121\1\210"+
    "\51\0\1\210\24\0\3\134\1\0\1\135\1\0\1\135"+
    "\25\0\1\134\4\0\1\135\7\0\1\23\3\134\1\23"+
    "\1\135\1\136\1\137\1\23\1\211\1\23\1\0\1\140"+
    "\10\23\1\211\7\23\1\134\1\0\1\23\2\0\1\137"+
    "\7\23\41\0\1\144\10\0\1\151\2\146\1\134\1\151"+
    "\1\147\1\151\1\147\4\151\1\212\1\213\1\214\16\151"+
    "\1\146\4\151\1\147\12\151\1\0\10\151\1\212\1\213"+
    "\1\214\33\151\1\153\2\215\1\134\1\153\1\216\1\215"+
    "\1\217\3\153\1\213\1\152\1\153\1\220\16\153\1\215"+
    "\1\213\1\153\2\213\1\217\7\153\1\145\1\146\2\134"+
    "\1\145\1\147\1\146\1\150\3\145\1\151\21\145\1\146"+
    "\1\151\1\145\2\151\1\150\7\145\1\23\3\134\1\23"+
    "\1\135\1\136\1\137\3\23\1\0\1\140\4\23\1\156"+
    "\13\23\1\134\1\0\1\23\2\0\1\137\10\23\3\134"+
    "\1\23\1\135\1\136\1\137\3\23\1\0\1\140\14\23"+
    "\1\221\3\23\1\134\1\0\1\23\2\0\1\137\10\23"+
    "\3\134\1\23\1\135\1\136\1\137\3\23\1\0\1\140"+
    "\14\23\1\222\2\23\1\222\1\134\1\0\1\23\2\0"+
    "\1\137\7\23\11\0\1\223\13\0\1\223\24\0\1\53"+
    "\3\134\1\53\1\135\1\162\1\163\1\53\1\224\1\53"+
    "\1\0\1\140\10\53\1\224\7\53\1\134\1\0\1\53"+
    "\2\0\1\163\10\53\3\134\1\53\1\135\1\162\1\163"+
    "\3\53\1\0\1\140\4\53\1\166\13\53\1\134\1\0"+
    "\1\53\2\0\1\163\10\53\3\134\1\53\1\135\1\162"+
    "\1\163\3\53\1\0\1\140\14\53\1\225\3\53\1\134"+
    "\1\0\1\53\2\0\1\163\10\53\3\134\1\53\1\135"+
    "\1\162\1\163\3\53\1\0\1\140\14\53\1\226\2\53"+
    "\1\226\1\134\1\0\1\53\2\0\1\163\7\53\1\70"+
    "\3\0\1\70\1\0\1\174\2\70\1\227\1\70\2\0"+
    "\10\70\1\227\7\70\2\0\1\70\2\0\10\70\2\176"+
    "\2\0\46\176\1\70\3\0\1\70\1\0\1\174\4\70"+
    "\2\0\4\70\1\202\13\70\2\0\1\70\2\0\11\70"+
    "\3\0\1\70\1\0\1\174\4\70\2\0\14\70\1\230"+
    "\3\70\2\0\1\70\2\0\11\70\3\0\1\70\1\0"+
    "\1\174\4\70\2\0\14\70\1\231\2\70\1\231\2\0"+
    "\1\70\2\0\10\70\1\0\3\205\1\0\1\206\27\0"+
    "\1\205\14\0\1\110\3\0\1\110\2\0\2\110\1\232"+
    "\1\110\2\0\10\110\1\232\7\110\2\0\1\110\2\0"+
    "\10\110\11\0\1\233\13\0\1\233\25\0\3\134\1\0"+
    "\1\135\1\134\1\135\25\0\1\134\4\0\1\135\7\0"+
    "\3\213\1\0\10\213\1\234\1\213\1\235\33\213\2\151"+
    "\2\0\46\151\1\213\2\215\1\134\1\213\1\216\1\213"+
    "\1\216\4\213\1\234\1\213\1\235\16\213\1\215\4\213"+
    "\1\216\7\213\1\153\1\215\2\134\1\153\1\216\1\215"+
    "\1\217\3\153\1\213\21\153\1\215\1\213\1\153\2\213"+
    "\1\217\7\153\1\23\3\134\1\23\1\135\1\136\1\137"+
    "\3\23\1\0\1\140\15\23\1\222\2\23\1\236\1\237"+
    "\1\23\2\0\1\137\10\23\3\134\1\23\1\135\1\136"+
    "\1\137\3\23\1\0\1\140\20\23\1\236\1\237\1\23"+
    "\2\0\1\137\7\23\1\53\3\134\1\53\1\135\1\162"+
    "\1\163\3\53\1\0\1\140\15\53\1\226\2\53\1\236"+
    "\1\237\1\53\2\0\1\163\10\53\3\134\1\53\1\135"+
    "\1\162\1\163\3\53\1\0\1\140\20\53\1\236\1\237"+
    "\1\53\2\0\1\163\7\53\1\70\3\0\1\70\1\0"+
    "\1\174\4\70\2\0\15\70\1\231\2\70\1\240\1\237"+
    "\1\70\2\0\11\70\3\0\1\70\1\0\1\174\4\70"+
    "\2\0\20\70\1\240\1\237\1\70\2\0\10\70\2\213"+
    "\2\0\46\213\1\0\3\134\1\0\1\135\1\0\1\135"+
    "\25\0\1\236\1\237\3\0\1\135\10\0\2\237\6\0"+
    "\1\237\13\0\2\237\6\0\1\237\1\0\1\237\1\241"+
    "\46\0\1\240\1\237\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\3\1\1\11\12\1\2\11\1\1\1\11\5\1"+
    "\1\11\11\1\2\11\3\1\1\11\13\1\1\11\1\1"+
    "\1\11\5\1\3\11\2\1\3\11\1\1\6\11\1\0"+
    "\1\11\2\1\1\0\2\1\1\0\1\11\2\0\2\1"+
    "\1\0\1\1\2\0\4\1\1\0\7\1\4\11\1\1"+
    "\1\0\1\11\1\0\4\1\1\0\1\11\1\1\1\0"+
    "\2\1\3\0\2\1\1\0\13\1\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Project project;
                  
    private int depth = 0;
	private boolean isPropertyKey = false;
	private boolean inParameterCondition = false;
    private boolean inInlineMath = false;
    private boolean leftAbsSign = true;
    
    public ParadoxScriptLexer(Project propect) {
        this((java.io.Reader)null);
        this.project = project;
    }
    
    private void beginNextState(){
		if(inParameterCondition){
			yybegin(WAITING_PARAMETER_CONDITION);
		} else {
	        if(depth <= 0){
		        yybegin(YYINITIAL);
	        } else {
		        yybegin(WAITING_PROPERTY_KEY);
	        }
		}
    }
	
    private void beginNextStateForParameter(){
        if(inInlineMath){
            yybegin(WAITING_INLINE_MATH);
        } else if(isPropertyKey){
			isPropertyKey = false;
			yybegin(WATIING_PROPERTY_SEPARATOR);
		} else {
            yybegin(WAITING_AFTER_PARAMETER);
        }
    }
    
    private void onBlank(){
		//ignore
    }
    
    private void pushbackUntilBeforeBlank(int begin){
        //回退，到末尾可能出现的空白之前
        int length = yylength();
        int i;
        for (i = begin; i < length ; i++) {
          char c = yycharat(length-i-1);
          if(!Character.isWhitespace(c)) break;
        }
        if(i != 0){
            yypushback(i);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(WAITING_PROPERTY_END); return STRING_TOKEN;
            } 
            // fall through
          case 59: break;
          case 2: 
            { onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 61: break;
          case 4: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 62: break;
          case 5: 
            { yybegin(WAITING_PARAMETER); return PARAMETER_START;
            } 
            // fall through
          case 63: break;
          case 6: 
            { yybegin(WAITING_PROPERTY_END); return INT_TOKEN;
            } 
            // fall through
          case 64: break;
          case 7: 
            { yybegin(WAITING_VARIABLE_NAME); return AT;
            } 
            // fall through
          case 65: break;
          case 8: 
            { depth++; beginNextState(); return LEFT_BRACE;
            } 
            // fall through
          case 66: break;
          case 9: 
            { depth--; beginNextState(); return RIGHT_BRACE;
            } 
            // fall through
          case 67: break;
          case 10: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 68: break;
          case 11: 
            { yybegin(WAITING_VARIABLE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 69: break;
          case 12: 
            { yybegin(WAITING_VARIABLE_EQUAL_SIGN); return VARIABLE_NAME_ID;
            } 
            // fall through
          case 70: break;
          case 13: 
            { yybegin(WAITING_VARIABLE_END); return INT_TOKEN;
            } 
            // fall through
          case 71: break;
          case 14: 
            { beginNextState(); onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 15: 
            { inParameterCondition=false; beginNextState(); return RIGHT_BRACKET;
            } 
            // fall through
          case 73: break;
          case 16: 
            { yybegin(WAITING_VARIABLE); return AT;
            } 
            // fall through
          case 74: break;
          case 17: 
            { inParameterCondition=true; yybegin(WAITING_PARAMETER_CONDITION); return LEFT_BRACKET;
            } 
            // fall through
          case 75: break;
          case 18: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 76: break;
          case 19: 
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            } 
            // fall through
          case 77: break;
          case 20: 
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            } 
            // fall through
          case 78: break;
          case 21: 
            { beginNextState(); return STRING_TOKEN;
            } 
            // fall through
          case 79: break;
          case 22: 
            { yybegin(WAITING_VARIABLE_REFERENCE_NAME); return AT;
            } 
            // fall through
          case 80: break;
          case 23: 
            { //如果匹配到的文本以等号结尾，则将空白之前的文本解析为VARIABLE_NAME_ID，否则将整个匹配文本解析为VARIABLE_REFERENCE_ID
	if(yycharat(yylength() -1) == '='){
	  pushbackUntilBeforeBlank(1);
	  yybegin(WAITING_VARIABLE_EQUAL_SIGN);
	  return VARIABLE_NAME_ID;
	} else {
	  yybegin(WAITING_PROPERTY_END);
      return VARIABLE_REFERENCE_ID;
	}
            } 
            // fall through
          case 81: break;
          case 24: 
            { yybegin(WAITING_PROPERTY_END); return VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 82: break;
          case 25: 
            { beginNextStateForParameter(); return PARAMETER_END;
            } 
            // fall through
          case 83: break;
          case 26: 
            { return PARAMETER_ID;
            } 
            // fall through
          case 84: break;
          case 27: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE); return PIPE;
            } 
            // fall through
          case 85: break;
          case 28: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return ARG_STRING_TOKEN;
            } 
            // fall through
          case 86: break;
          case 29: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return ARG_NUMBER_TOKEN;
            } 
            // fall through
          case 87: break;
          case 30: 
            { return STRING_PART;
            } 
            // fall through
          case 88: break;
          case 31: 
            { yybegin(WAITING_PARAMETER_CONDITION_EXPRESSION); return NESTED_LEFT_BRACKET;
            } 
            // fall through
          case 89: break;
          case 32: 
            { yybegin(WAITING_PARAMETER_CONDITION); return NESTED_RIGHT_BRACKET;
            } 
            // fall through
          case 90: break;
          case 33: 
            { return NOT_SIGN;
            } 
            // fall through
          case 91: break;
          case 34: 
            { return INLINE_MATH_VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 92: break;
          case 35: 
            { return NUMBER_TOKEN;
            } 
            // fall through
          case 93: break;
          case 36: 
            { leftAbsSign=true; inInlineMath=false; beginNextState(); return INLINE_MATH_END;
            } 
            // fall through
          case 94: break;
          case 37: 
            { return LP_SIGN;
            } 
            // fall through
          case 95: break;
          case 38: 
            { yybegin(WAITING_INLINE_MATH); return MINUS_SIGN;
            } 
            // fall through
          case 96: break;
          case 39: 
            { if(leftAbsSign){
      leftAbsSign=false; 
      return LABS_SIGN;
    }else{
      leftAbsSign=true;
      return RABS_SIGN;
    }
            } 
            // fall through
          case 97: break;
          case 40: 
            { return RP_SIGN;
            } 
            // fall through
          case 98: break;
          case 41: 
            { yybegin(WAITING_INLINE_MATH); return PLUS_SIGN;
            } 
            // fall through
          case 99: break;
          case 42: 
            { yybegin(WAITING_INLINE_MATH); return TIMES_SIGN;
            } 
            // fall through
          case 100: break;
          case 43: 
            { yybegin(WAITING_INLINE_MATH); return DIV_SIGN;
            } 
            // fall through
          case 101: break;
          case 44: 
            { yybegin(WAITING_INLINE_MATH); return MOD_SIGN;
            } 
            // fall through
          case 102: break;
          case 45: 
            { //根据后面是否有"="判断是否是property
	yybegin(WATIING_PROPERTY_SEPARATOR);
	pushbackUntilBeforeBlank(1);
	char firstChar = yycharat(0);
	if(firstChar == '"'){
		return QUOTED_PROPERTY_KEY_ID;
	} else if(firstChar == '$'){
		//propertyKey也可以是parameter
		isPropertyKey = true;
		yypushback(yylength() -1);
		yybegin(WAITING_PARAMETER);
		return PARAMETER_START;
	} else {
		return PROPERTY_KEY_ID;
	}
            } 
            // fall through
          case 103: break;
          case 46: 
            { yypushback(1);
	return STRING_PART;
            } 
            // fall through
          case 104: break;
          case 47: 
            { inInlineMath=true; yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 105: break;
          case 48: 
            { yybegin(WAITING_PROPERTY_END); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 106: break;
          case 49: 
            { yybegin(WAITING_PROPERTY_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 107: break;
          case 50: 
            { yypushback(1);
  	return STRING_PART;
            } 
            // fall through
          case 108: break;
          case 51: 
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            } 
            // fall through
          case 109: break;
          case 52: 
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            } 
            // fall through
          case 110: break;
          case 53: 
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 111: break;
          case 54: 
            { beginNextState(); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 112: break;
          case 55: 
            { yybegin(WAITING_PROPERTY_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 113: break;
          case 56: 
            { yybegin(WAITING_VARIABLE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 114: break;
          case 57: 
            { yybegin(WAITING_PROPERTY_END);; return FLOAT_TOKEN;
            } 
            // fall through
          case 115: break;
          case 58: 
            { yybegin(WAITING_PROPERTY_END); return COLOR_TOKEN;
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
