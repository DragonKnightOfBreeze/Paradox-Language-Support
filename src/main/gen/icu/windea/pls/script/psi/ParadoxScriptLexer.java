/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.script.psi;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ParadoxScriptLexer.flex</tt>
 */
public class ParadoxScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_SCRIPTED_VARIABLE_NAME = 2;
  public static final int WAITING_SCRIPTED_VARIABLE_VALUE = 4;
  public static final int WAITING_SCRIPTED_VARIABLE_END = 6;
  public static final int WAITING_PROPERTY = 8;
  public static final int WAITING_PROPERTY_KEY = 10;
  public static final int WAITING_PROPERTY_VALUE = 12;
  public static final int WAITING_PROPERTY_END = 14;
  public static final int WAITING_WILDCARD_KEY = 16;
  public static final int WAITING_WILDCARD_VALUE = 18;
  public static final int CHECKING_VARIABLE = 20;
  public static final int WAITING_SCRIPTED_VARIABLE_REFERENCE_NAME = 22;
  public static final int WAITING_PARAMETER = 24;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE = 26;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE_END = 28;
  public static final int WAITING_PARAMETER_CONDITION = 30;
  public static final int WAITING_PARAMETER_CONDITION_EXPRESSION = 32;
  public static final int WAITING_INLINE_MATH = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  3,  3, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\33\1\3\2\2\1\3\22\0\1\33\1\6\1\14\1\4\1\13\1\47\2\0\1\15\1\43\1\45"+
    "\1\44\1\0\1\24\1\25\1\46\12\10\2\0\1\40\1\5\1\41\1\0\1\11\32\7\1\12\1\16\1"+
    "\37\1\0\1\7\1\0\1\7\1\30\2\7\1\20\1\7\1\27\1\31\5\7\1\22\1\23\2\7\1\26\1\21"+
    "\2\7\1\32\2\7\1\17\1\7\1\34\1\42\1\36\7\0\1\2\32\0\1\1\77\0\12\35\46\0\12"+
    "\35\14\0\12\35\20\0\12\35\6\0\12\35\6\0\13\1\35\0\2\2\5\0\1\1\57\0\1\1\26"+
    "\0\12\35\16\0\62\35");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\5\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\3\20\1\23\2\1"+
    "\1\5\1\24\1\25\1\10\5\1\1\14\1\15\1\1"+
    "\1\5\1\26\1\27\5\1\2\30\1\31\1\14\1\15"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\3\40\1\24\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\0\2\62\1\0\1\63\1\1\1\64"+
    "\1\0\1\62\2\10\1\0\1\1\1\65\2\1\1\66"+
    "\1\63\1\67\1\20\1\22\1\0\1\20\1\65\1\0"+
    "\2\70\1\0\1\1\1\71\1\0\1\70\1\10\1\0"+
    "\1\1\1\65\2\1\1\63\1\0\2\72\1\0\1\1"+
    "\1\72\2\27\1\0\1\1\1\65\2\1\1\30\1\63"+
    "\1\32\1\0\1\33\2\40\1\73\1\0\1\62\1\74"+
    "\1\10\1\0\1\1\1\75\1\70\1\74\1\1\1\72"+
    "\1\76\1\27\1\0\1\1\1\77\1\100\4\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u0320\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u0320"+
    "\0\u0320\0\u0320\0\u04b0\0\u04d8\0\u0320\0\u0500\0\u0528\0\u0550"+
    "\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690"+
    "\0\u06b8\0\u0320\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8"+
    "\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0398\0\u0870\0\u0898\0\u08c0"+
    "\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u0320\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0320\0\u0320\0\u0aa0\0\u0ac8"+
    "\0\u0af0\0\u0b18\0\u0b40\0\u0398\0\u0320\0\u0320\0\u0b68\0\u0320"+
    "\0\u0b90\0\u0bb8\0\u0320\0\u0320\0\u0320\0\u0320\0\u0320\0\u0320"+
    "\0\u0320\0\u0320\0\u0320\0\u0320\0\u0be0\0\u0320\0\u02a8\0\u0c08"+
    "\0\u0320\0\u0c30\0\u0320\0\u0c58\0\u03c0\0\u0be0\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u02a8\0\u0cf8\0\u0d20\0\u0320\0\u02a8\0\u0320\0\u0d48"+
    "\0\u0320\0\u0d70\0\u0d98\0\u0528\0\u0dc0\0\u0320\0\u0640\0\u0de8"+
    "\0\u0e10\0\u0320\0\u0e38\0\u06e0\0\u0dc0\0\u0e60\0\u0e88\0\u0640"+
    "\0\u0eb0\0\u0ed8\0\u0640\0\u0f00\0\u0320\0\u0820\0\u0f28\0\u0f50"+
    "\0\u0870\0\u0f00\0\u0f78\0\u0fa0\0\u0fc8\0\u0820\0\u0ff0\0\u1018"+
    "\0\u0320\0\u0960\0\u0320\0\u1040\0\u0320\0\u1068\0\u1090\0\u0aa0"+
    "\0\u10b8\0\u0c08\0\u0c30\0\u0320\0\u10e0\0\u1108\0\u0d48\0\u0de8"+
    "\0\u0e10\0\u1130\0\u0f28\0\u0f50\0\u0320\0\u1158\0\u1180\0\u1068"+
    "\0\u10b8\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u0320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\3\23\1\24\1\25\1\26\1\22\1\27\1\30"+
    "\1\31\1\22\1\32\2\22\1\33\2\22\1\34\1\22"+
    "\1\35\1\22\1\36\2\22\1\37\1\22\1\23\1\40"+
    "\1\22\1\41\1\42\1\43\1\44\2\22\1\35\3\22"+
    "\1\31\3\23\1\24\1\45\1\31\1\46\7\31\5\46"+
    "\2\31\5\46\1\23\1\40\1\31\1\41\1\42\10\31"+
    "\1\47\3\23\1\24\1\31\2\47\1\50\3\31\1\51"+
    "\2\47\1\52\2\47\1\53\1\47\1\54\6\47\1\23"+
    "\1\40\1\47\1\41\1\42\4\47\1\54\3\47\1\31"+
    "\3\55\1\24\26\31\1\55\1\40\1\31\1\41\1\42"+
    "\60\31\1\56\3\23\1\24\1\25\1\57\1\56\1\60"+
    "\1\61\1\62\1\56\1\63\2\56\1\64\2\56\1\65"+
    "\1\56\1\66\1\56\1\67\2\56\1\70\1\56\1\23"+
    "\1\40\1\56\1\41\1\42\1\71\1\72\2\56\1\66"+
    "\3\56\1\73\3\23\1\24\1\31\2\73\1\74\1\75"+
    "\1\31\1\73\1\76\2\73\1\77\2\73\1\100\1\73"+
    "\1\101\1\73\1\102\2\73\1\103\1\73\1\23\1\40"+
    "\1\73\1\41\1\42\4\73\1\101\3\73\1\104\3\23"+
    "\1\24\1\25\1\105\2\104\2\31\1\106\1\31\16\104"+
    "\1\23\1\40\1\104\1\41\1\42\1\107\1\110\6\104"+
    "\1\111\3\55\1\24\1\31\3\111\2\31\1\106\1\31"+
    "\16\111\1\55\1\40\1\111\1\41\1\42\10\111\1\31"+
    "\3\55\1\24\2\31\1\112\7\31\5\112\2\31\5\112"+
    "\1\55\1\40\1\31\1\41\1\42\11\31\3\55\1\24"+
    "\2\31\1\113\7\31\5\113\2\31\5\113\1\55\1\40"+
    "\1\31\1\41\1\42\11\31\3\23\1\24\2\31\1\114"+
    "\3\31\1\115\3\31\5\114\2\31\5\114\1\23\1\40"+
    "\1\31\1\41\1\42\2\31\1\116\5\31\1\117\3\23"+
    "\1\24\1\31\2\117\1\120\2\31\1\115\1\31\2\117"+
    "\1\121\2\117\1\122\1\117\1\123\6\117\1\23\1\40"+
    "\1\117\1\41\1\42\4\117\1\123\3\117\1\31\3\23"+
    "\1\24\6\31\1\115\17\31\1\23\1\40\1\31\1\41"+
    "\1\42\10\31\1\56\3\23\1\24\1\31\2\56\1\60"+
    "\1\124\1\125\1\56\1\63\2\56\1\64\2\56\1\65"+
    "\1\56\1\66\1\56\1\67\2\56\1\70\1\56\1\23"+
    "\1\40\1\56\1\41\1\42\4\56\1\66\3\56\1\31"+
    "\3\23\1\24\1\31\1\126\1\127\7\31\5\127\2\31"+
    "\5\127\1\23\1\40\1\31\1\41\1\130\11\31\3\23"+
    "\1\24\2\31\1\131\1\132\2\31\1\133\1\31\1\134"+
    "\1\31\5\131\1\135\1\31\5\131\1\23\3\31\1\136"+
    "\2\31\1\137\1\140\1\141\1\142\1\143\1\144\1\22"+
    "\3\145\1\0\1\146\1\147\3\22\1\0\1\22\1\150"+
    "\16\22\1\145\1\0\1\22\2\0\2\147\6\22\1\0"+
    "\3\23\27\0\1\23\14\0\3\24\1\0\44\24\50\0"+
    "\1\22\3\145\1\0\1\151\1\147\3\22\1\0\1\22"+
    "\1\150\16\22\1\145\1\0\1\22\2\0\2\147\7\22"+
    "\3\145\1\0\1\146\1\147\1\22\1\27\1\22\1\0"+
    "\1\22\1\150\10\22\1\152\5\22\1\145\1\0\1\22"+
    "\2\0\2\147\6\22\12\0\1\153\3\0\1\154\31\0"+
    "\3\32\1\145\1\32\2\155\5\32\1\156\1\157\1\160"+
    "\21\32\2\155\6\32\1\22\3\145\1\0\1\146\1\147"+
    "\3\22\1\0\1\22\1\150\3\22\1\161\12\22\1\145"+
    "\1\0\1\22\2\0\2\147\7\22\3\145\1\0\1\146"+
    "\1\147\3\22\1\0\1\22\1\150\6\22\1\162\7\22"+
    "\1\145\1\0\1\22\2\0\2\147\7\22\3\145\1\0"+
    "\1\146\1\147\1\22\1\27\1\22\1\0\1\22\1\150"+
    "\16\22\1\145\1\0\1\22\2\0\2\147\7\22\3\145"+
    "\1\0\1\146\1\147\3\22\1\0\1\22\1\150\12\22"+
    "\1\163\3\22\1\145\1\0\1\22\2\0\2\147\7\22"+
    "\3\145\1\0\1\146\1\147\3\22\1\0\1\22\1\150"+
    "\4\22\1\164\11\22\1\145\1\0\1\22\2\0\2\147"+
    "\7\22\3\145\1\0\1\165\1\147\3\22\1\0\1\22"+
    "\1\150\16\22\1\145\1\0\1\22\2\0\1\147\1\166"+
    "\7\22\3\145\1\0\1\167\1\147\3\22\1\0\1\22"+
    "\1\150\16\22\1\145\1\0\1\22\2\0\2\147\6\22"+
    "\7\0\2\46\6\0\5\46\2\0\5\46\15\0\1\47"+
    "\5\0\4\47\3\0\16\47\2\0\1\47\2\0\11\47"+
    "\5\0\2\47\1\50\1\47\3\0\10\47\1\170\5\47"+
    "\2\0\1\47\2\0\10\47\3\51\1\0\10\51\1\171"+
    "\1\51\1\172\31\51\1\47\5\0\4\47\3\0\3\47"+
    "\1\173\12\47\2\0\1\47\2\0\11\47\5\0\4\47"+
    "\3\0\6\47\1\174\7\47\2\0\1\47\2\0\11\47"+
    "\5\0\2\47\1\50\1\47\3\0\16\47\2\0\1\47"+
    "\2\0\10\47\1\0\3\55\27\0\1\55\14\0\1\56"+
    "\3\175\1\0\1\176\1\177\3\56\1\0\1\56\1\200"+
    "\16\56\1\175\1\0\1\56\2\0\2\177\7\56\3\175"+
    "\1\0\1\151\1\177\3\56\1\0\1\56\1\200\16\56"+
    "\1\175\1\0\1\56\2\0\2\177\7\56\3\175\1\0"+
    "\1\176\1\177\1\56\1\60\1\56\1\0\1\56\1\200"+
    "\10\56\1\201\5\56\1\175\1\0\1\56\2\0\2\177"+
    "\6\56\12\0\1\202\3\0\1\203\31\0\3\63\1\175"+
    "\1\63\2\204\5\63\1\205\1\157\1\206\21\63\2\204"+
    "\6\63\1\56\3\175\1\0\1\176\1\177\3\56\1\0"+
    "\1\56\1\200\3\56\1\207\12\56\1\175\1\0\1\56"+
    "\2\0\2\177\7\56\3\175\1\0\1\176\1\177\3\56"+
    "\1\0\1\56\1\200\6\56\1\210\7\56\1\175\1\0"+
    "\1\56\2\0\2\177\7\56\3\175\1\0\1\176\1\177"+
    "\1\56\1\60\1\56\1\0\1\56\1\200\16\56\1\175"+
    "\1\0\1\56\2\0\2\177\7\56\3\175\1\0\1\176"+
    "\1\177\3\56\1\0\1\56\1\200\12\56\1\211\3\56"+
    "\1\175\1\0\1\56\2\0\2\177\7\56\3\175\1\0"+
    "\1\176\1\177\3\56\1\0\1\56\1\200\4\56\1\212"+
    "\11\56\1\175\1\0\1\56\2\0\2\177\7\56\3\175"+
    "\1\0\1\165\1\177\3\56\1\0\1\56\1\200\16\56"+
    "\1\175\1\0\1\56\2\0\1\177\1\213\7\56\3\175"+
    "\1\0\1\167\1\177\3\56\1\0\1\56\1\200\16\56"+
    "\1\175\1\0\1\56\2\0\2\177\6\56\1\73\3\214"+
    "\1\0\1\215\1\216\3\73\1\0\1\73\1\217\16\73"+
    "\1\214\1\0\1\73\2\0\2\216\7\73\3\214\1\0"+
    "\1\215\1\216\1\73\1\74\1\73\1\0\1\73\1\217"+
    "\10\73\1\220\5\73\1\214\1\0\1\73\2\0\2\216"+
    "\6\73\3\76\1\214\1\76\2\221\5\76\1\222\1\223"+
    "\1\224\21\76\2\221\6\76\1\73\3\214\1\0\1\215"+
    "\1\216\3\73\1\0\1\73\1\217\3\73\1\225\12\73"+
    "\1\214\1\0\1\73\2\0\2\216\7\73\3\214\1\0"+
    "\1\215\1\216\3\73\1\0\1\73\1\217\6\73\1\226"+
    "\7\73\1\214\1\0\1\73\2\0\2\216\7\73\3\214"+
    "\1\0\1\215\1\216\1\73\1\74\1\73\1\0\1\73"+
    "\1\217\16\73\1\214\1\0\1\73\2\0\2\216\7\73"+
    "\3\214\1\0\1\215\1\216\3\73\1\0\1\73\1\217"+
    "\12\73\1\227\3\73\1\214\1\0\1\73\2\0\2\216"+
    "\7\73\3\214\1\0\1\215\1\216\3\73\1\0\1\73"+
    "\1\217\4\73\1\230\11\73\1\214\1\0\1\73\2\0"+
    "\2\216\6\73\1\104\5\0\4\104\1\0\1\231\17\104"+
    "\2\0\1\104\2\0\11\104\4\0\1\151\4\104\1\0"+
    "\1\231\17\104\2\0\1\104\2\0\11\104\4\0\1\165"+
    "\4\104\1\0\1\231\17\104\2\0\1\104\2\0\1\104"+
    "\1\232\7\104\4\0\1\167\4\104\1\0\1\231\17\104"+
    "\2\0\1\104\2\0\10\104\1\111\5\0\4\111\1\0"+
    "\1\233\1\0\16\111\2\0\1\111\2\0\10\111\1\0"+
    "\3\234\1\0\1\235\1\0\2\112\6\0\5\112\2\0"+
    "\5\112\1\234\23\0\2\113\6\0\5\113\2\0\5\113"+
    "\24\0\2\114\6\0\5\114\2\0\5\114\15\0\1\117"+
    "\5\0\4\117\3\0\16\117\2\0\1\117\2\0\11\117"+
    "\5\0\2\117\1\120\1\117\3\0\10\117\1\236\5\117"+
    "\2\0\1\117\2\0\11\117\5\0\4\117\3\0\3\117"+
    "\1\237\12\117\2\0\1\117\2\0\11\117\5\0\4\117"+
    "\3\0\6\117\1\240\7\117\2\0\1\117\2\0\11\117"+
    "\5\0\2\117\1\120\1\117\3\0\16\117\2\0\1\117"+
    "\2\0\10\117\7\0\2\127\6\0\5\127\2\0\5\127"+
    "\24\0\2\131\6\0\5\131\2\0\5\131\25\0\1\132"+
    "\14\0\1\241\23\0\3\145\1\0\2\146\24\0\1\145"+
    "\4\0\2\146\6\0\1\150\3\145\1\0\1\146\1\242"+
    "\3\150\1\0\20\150\1\145\1\0\1\150\2\0\2\242"+
    "\6\150\1\22\3\145\1\0\1\146\1\147\1\22\1\243"+
    "\1\22\1\0\1\22\1\150\16\22\1\145\1\0\1\22"+
    "\2\0\2\147\6\22\12\0\1\153\35\0\3\157\1\0"+
    "\10\157\1\244\1\157\1\245\31\157\2\32\2\0\44\32"+
    "\1\22\3\145\1\0\1\146\1\147\3\22\1\0\1\22"+
    "\1\150\4\22\1\162\11\22\1\145\1\0\1\22\2\0"+
    "\2\147\7\22\3\145\1\0\1\146\1\147\3\22\1\0"+
    "\1\22\1\150\13\22\1\246\2\22\1\145\1\0\1\22"+
    "\2\0\2\147\7\22\3\145\1\0\1\146\1\147\3\22"+
    "\1\0\1\22\1\150\15\22\1\246\1\145\1\0\1\22"+
    "\2\0\2\147\6\22\1\47\5\0\2\47\1\247\1\47"+
    "\3\0\16\47\2\0\1\47\2\0\10\47\2\51\2\0"+
    "\44\51\1\47\5\0\4\47\3\0\4\47\1\174\11\47"+
    "\2\0\1\47\2\0\10\47\1\0\3\175\1\0\2\176"+
    "\24\0\1\175\4\0\2\176\6\0\1\200\3\175\1\0"+
    "\1\176\1\250\3\200\1\0\20\200\1\175\1\0\1\200"+
    "\2\0\2\250\6\200\1\56\3\175\1\0\1\176\1\177"+
    "\1\56\1\251\1\56\1\0\1\56\1\200\16\56\1\175"+
    "\1\0\1\56\2\0\2\177\6\56\12\0\1\202\35\0"+
    "\2\63\2\0\44\63\1\56\3\175\1\0\1\176\1\177"+
    "\3\56\1\0\1\56\1\200\4\56\1\210\11\56\1\175"+
    "\1\0\1\56\2\0\2\177\7\56\3\175\1\0\1\176"+
    "\1\177\3\56\1\0\1\56\1\200\13\56\1\252\2\56"+
    "\1\175\1\0\1\56\2\0\2\177\7\56\3\175\1\0"+
    "\1\176\1\177\3\56\1\0\1\56\1\200\15\56\1\252"+
    "\1\175\1\0\1\56\2\0\2\177\6\56\1\0\3\214"+
    "\1\0\2\215\24\0\1\214\4\0\2\215\6\0\1\217"+
    "\3\214\1\0\1\215\1\253\3\217\1\0\20\217\1\214"+
    "\1\0\1\217\2\0\2\253\6\217\1\73\3\214\1\0"+
    "\1\215\1\216\1\73\1\254\1\73\1\0\1\73\1\217"+
    "\16\73\1\214\1\0\1\73\2\0\2\216\6\73\3\223"+
    "\1\0\10\223\1\255\1\223\1\256\31\223\2\76\2\0"+
    "\44\76\1\73\3\214\1\0\1\215\1\216\3\73\1\0"+
    "\1\73\1\217\4\73\1\226\11\73\1\214\1\0\1\73"+
    "\2\0\2\216\7\73\3\214\1\0\1\215\1\216\3\73"+
    "\1\0\1\73\1\217\13\73\1\257\2\73\1\214\1\0"+
    "\1\73\2\0\2\216\7\73\3\214\1\0\1\215\1\216"+
    "\3\73\1\0\1\73\1\217\15\73\1\257\1\214\1\0"+
    "\1\73\2\0\2\216\6\73\1\0\3\234\1\0\1\235"+
    "\25\0\1\234\14\0\1\117\5\0\2\117\1\260\1\117"+
    "\3\0\16\117\2\0\1\117\2\0\11\117\5\0\4\117"+
    "\3\0\4\117\1\240\11\117\2\0\1\117\2\0\10\117"+
    "\10\0\1\261\37\0\2\157\2\0\44\157\1\22\3\145"+
    "\1\0\1\146\1\147\3\22\1\0\1\22\1\150\16\22"+
    "\1\262\1\263\1\22\2\0\2\147\6\22\1\56\3\175"+
    "\1\0\1\176\1\177\3\56\1\0\1\56\1\200\16\56"+
    "\1\264\1\263\1\56\2\0\2\177\6\56\2\223\2\0"+
    "\44\223\1\73\3\214\1\0\1\215\1\216\3\73\1\0"+
    "\1\73\1\217\16\73\1\265\1\263\1\73\2\0\2\216"+
    "\6\73\1\0\3\145\1\0\2\146\24\0\1\262\1\263"+
    "\3\0\2\146\7\0\2\263\5\0\1\263\14\0\1\263"+
    "\5\0\1\263\1\0\1\263\1\266\12\0\3\175\1\0"+
    "\2\176\24\0\1\264\1\263\3\0\2\176\7\0\3\214"+
    "\1\0\2\215\24\0\1\265\1\263\3\0\2\215\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\3\1\1\11\3\1\1\11\6\1\3\11\2\1"+
    "\1\11\14\1\1\11\23\1\1\11\6\1\2\11\6\1"+
    "\2\11\1\1\1\11\2\1\12\11\1\0\1\11\1\1"+
    "\1\0\1\11\1\1\1\11\1\0\3\1\1\0\4\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\0\2\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\11\1\0\2\1\1\0"+
    "\5\1\1\0\1\11\1\1\1\0\4\1\1\0\4\1"+
    "\1\11\1\1\1\11\1\0\1\11\3\1\1\0\2\1"+
    "\1\11\1\0\7\1\1\11\1\0\3\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	//private ParadoxScriptParsingContext context;

    private int depth = 0;
    private boolean inWildcardKey = false;
    private boolean inWildcardValue = false;
	private boolean isWildcardContainsParameter = false;
	private boolean inParameterCondition = false;
    private boolean inInlineMath = false;
    private boolean leftAbsSign = true;
    
    public ParadoxScriptLexer() {
        this((java.io.Reader)null);
    }
	
	//public ParadoxScriptLexer(ParadoxScriptParsingContext context) {
	//	this((java.io.Reader)null);
	//	this.context = context;
	//}
    
    private void beginNextState(){
		if(inParameterCondition){
			yybegin(WAITING_PARAMETER_CONDITION);
		} else {
	        if(depth <= 0){
		        yybegin(YYINITIAL);
	        } else {
		        yybegin(WAITING_PROPERTY_KEY);
	        }
		}
    }
	
    private void beginNextStateForParameter(){
		if(inWildcardKey){
			yybegin(WAITING_WILDCARD_KEY);
		} else if(inWildcardValue){
			yybegin(WAITING_WILDCARD_VALUE);
		} else if(inInlineMath){
            yybegin(WAITING_INLINE_MATH);
        } else {
            beginNextState();
        }
    }
    
    private void onBlank(){
		inWildcardKey = false;
		inWildcardValue = false;
		isWildcardContainsParameter = false;
    }
	
	private void enterWildcardKey(){
		inWildcardKey = true;
	}
	
	private void enterWildcardValue(){
		inWildcardValue = true;
	}
    
	private void enterInlineMath(){
		inInlineMath = true;
		leftAbsSign = true;
	}
	
	private void exitInlineMath(){
		inInlineMath = false;
	}
	
    private void pushbackUntilBeforeBlank(int begin){
        //回退到末尾可能出现的空白之前
        int length = yylength();
        int i;
        for (i = begin; i < length ; i++) {
          char c = yycharat(length-i-1);
          if(!Character.isWhitespace(c)) break;
        }
        if(i != 0){
            yypushback(i);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { enterWildcardValue(); yypushback(yylength()); yybegin(WAITING_WILDCARD_VALUE);
            } 
            // fall through
          case 66: break;
          case 2: 
            { onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 68: break;
          case 4: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 69: break;
          case 5: 
            { yybegin(WAITING_PROPERTY_END); return INT_TOKEN;
            } 
            // fall through
          case 70: break;
          case 6: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_NAME); return AT;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 72: break;
          case 8: 
            { yybegin(WAITING_PROPERTY_END); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 73: break;
          case 9: 
            { depth++; beginNextState(); return LEFT_BRACE;
            } 
            // fall through
          case 74: break;
          case 10: 
            { depth--; beginNextState(); return RIGHT_BRACE;
            } 
            // fall through
          case 75: break;
          case 11: 
            { inParameterCondition=false; beginNextState(); return RIGHT_BRACKET;
            } 
            // fall through
          case 76: break;
          case 12: 
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            } 
            // fall through
          case 77: break;
          case 13: 
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            } 
            // fall through
          case 78: break;
          case 14: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 79: break;
          case 15: 
            { return SCRIPTED_VARIABLE_NAME_ID;
            } 
            // fall through
          case 80: break;
          case 16: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_END); return STRING_TOKEN;
            } 
            // fall through
          case 81: break;
          case 17: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_END); return INT_TOKEN;
            } 
            // fall through
          case 82: break;
          case 18: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_END); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 83: break;
          case 19: 
            { beginNextState(); onBlank(); return WHITE_SPACE;
            } 
            // fall through
          case 84: break;
          case 20: 
            { yybegin(CHECKING_VARIABLE); return AT;
            } 
            // fall through
          case 85: break;
          case 21: 
            { inParameterCondition=true; yybegin(WAITING_PARAMETER_CONDITION); return LEFT_BRACKET;
            } 
            // fall through
          case 86: break;
          case 22: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_REFERENCE_NAME); return AT;
            } 
            // fall through
          case 87: break;
          case 23: 
            { beginNextState(); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 88: break;
          case 24: 
            { if(yycharat(yylength() - 1) == '$'){
		  yypushback(1);
		  isWildcardContainsParameter = true;
		  return KEY_STRING_SNIPPET;
      } else if(isWildcardContainsParameter){
          return KEY_STRING_SNIPPET;
      } else {
		  return PROPERTY_KEY_TOKEN;
      }
            } 
            // fall through
          case 89: break;
          case 25: 
            { isWildcardContainsParameter=true; yybegin(WAITING_PARAMETER); return PARAMETER_START;
            } 
            // fall through
          case 90: break;
          case 26: 
            { if(yycharat(yylength() - 1) == '$'){
		  yypushback(1);
		  isWildcardContainsParameter = true;
		  return VALUE_STRING_SNIPPET;
      } else if(isWildcardContainsParameter){
          return VALUE_STRING_SNIPPET;
      } else {
		  return STRING_TOKEN;
      }
            } 
            // fall through
          case 91: break;
          case 27: 
            { //如果匹配到的文本以等号结尾，则将空白之前的文本解析为VARIABLE_NAME_ID，否则将整个匹配文本解析为VARIABLE_REFERENCE_ID
	if(yycharat(yylength() -1) == '='){
	  pushbackUntilBeforeBlank(1);
	  yybegin(WAITING_SCRIPTED_VARIABLE_NAME);
	  return SCRIPTED_VARIABLE_NAME_ID;
	} else {
	  yybegin(WAITING_PROPERTY_END);
      return SCRIPTED_VARIABLE_REFERENCE_ID;
	}
            } 
            // fall through
          case 92: break;
          case 28: 
            { yybegin(WAITING_PROPERTY_END); return SCRIPTED_VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return PARAMETER_ID;
            } 
            // fall through
          case 94: break;
          case 30: 
            { beginNextStateForParameter(); return PARAMETER_END;
            } 
            // fall through
          case 95: break;
          case 31: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE); return PIPE;
            } 
            // fall through
          case 96: break;
          case 32: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return STRING_TOKEN;
            } 
            // fall through
          case 97: break;
          case 33: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return INT_TOKEN;
            } 
            // fall through
          case 98: break;
          case 34: 
            { yybegin(WAITING_PARAMETER_CONDITION_EXPRESSION); return NESTED_LEFT_BRACKET;
            } 
            // fall through
          case 99: break;
          case 35: 
            { return NOT_SIGN;
            } 
            // fall through
          case 100: break;
          case 36: 
            { return ARGUMENT_ID;
            } 
            // fall through
          case 101: break;
          case 37: 
            { yybegin(WAITING_PARAMETER_CONDITION); return NESTED_RIGHT_BRACKET;
            } 
            // fall through
          case 102: break;
          case 38: 
            { return INLINE_MATH_SCRIPTED_VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 103: break;
          case 39: 
            { return INT_NUMBER_TOKEN;
            } 
            // fall through
          case 104: break;
          case 40: 
            { yybegin(WAITING_PARAMETER); return PARAMETER_START;
            } 
            // fall through
          case 105: break;
          case 41: 
            { return LP_SIGN;
            } 
            // fall through
          case 106: break;
          case 42: 
            { yybegin(WAITING_INLINE_MATH); return MINUS_SIGN;
            } 
            // fall through
          case 107: break;
          case 43: 
            { exitInlineMath(); beginNextState(); return INLINE_MATH_END;
            } 
            // fall through
          case 108: break;
          case 44: 
            { if(leftAbsSign){
      leftAbsSign=false; 
      return LABS_SIGN;
    }else{
      leftAbsSign=true;
      return RABS_SIGN;
    }
            } 
            // fall through
          case 109: break;
          case 45: 
            { return RP_SIGN;
            } 
            // fall through
          case 110: break;
          case 46: 
            { yybegin(WAITING_INLINE_MATH); return PLUS_SIGN;
            } 
            // fall through
          case 111: break;
          case 47: 
            { yybegin(WAITING_INLINE_MATH); return TIMES_SIGN;
            } 
            // fall through
          case 112: break;
          case 48: 
            { yybegin(WAITING_INLINE_MATH); return DIV_SIGN;
            } 
            // fall through
          case 113: break;
          case 49: 
            { yybegin(WAITING_INLINE_MATH); return MOD_SIGN;
            } 
            // fall through
          case 114: break;
          case 50: 
            { if(yycharat(0) == '"'){
		  pushbackUntilBeforeBlank(1);
		  return QUOTED_PROPERTY_KEY_TOKEN;
	  } else {
	     enterWildcardKey(); yypushback(yylength()); yybegin(WAITING_WILDCARD_KEY);
	  }
            } 
            // fall through
          case 115: break;
          case 51: 
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 116: break;
          case 52: 
            { enterInlineMath(); yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 117: break;
          case 53: 
            { yybegin(WAITING_PROPERTY_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 118: break;
          case 54: 
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            } 
            // fall through
          case 119: break;
          case 55: 
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            } 
            // fall through
          case 120: break;
          case 56: 
            { if(yycharat(0) == '"'){
		  pushbackUntilBeforeBlank(1);
 		  return QUOTED_PROPERTY_KEY_TOKEN;
 	  } else {
 	     enterWildcardKey(); yypushback(yylength()); yybegin(WAITING_WILDCARD_KEY);
 	  }
            } 
            // fall through
          case 121: break;
          case 57: 
            { enterInlineMath(); leftAbsSign=true; yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 122: break;
          case 58: 
            { if(yycharat(0) == '"'){
        pushbackUntilBeforeBlank(1);
        return QUOTED_PROPERTY_KEY_TOKEN;
    } else {
       enterWildcardKey(); yypushback(yylength()); yybegin(WAITING_WILDCARD_KEY);
    }
            } 
            // fall through
          case 123: break;
          case 59: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 124: break;
          case 60: 
            { yybegin(WAITING_PROPERTY_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 125: break;
          case 61: 
            { yybegin(WAITING_SCRIPTED_VARIABLE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 126: break;
          case 62: 
            { yybegin(WAITING_PROPERTY_END);; return FLOAT_TOKEN;
            } 
            // fall through
          case 127: break;
          case 63: 
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END);; return FLOAT_TOKEN;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return FLOAT_NUMBER_TOKEN;
            } 
            // fall through
          case 129: break;
          case 65: 
            { yybegin(WAITING_PROPERTY_END); return COLOR_TOKEN;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
