// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ParadoxScriptLexer.flex

package icu.windea.pls.script.psi;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static icu.windea.pls.script.psi.ParadoxScriptElementTypes.*;


public class _ParadoxScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_SCRIPTED_VARIABLE = 2;
  public static final int WAITING_SCRIPTED_VARIABLE_NAME = 4;
  public static final int WAITING_SCRIPTED_VARIABLE_VALUE = 6;
  public static final int WAITING_PROPERTY_OR_VALUE = 8;
  public static final int WAITING_PROPERTY = 10;
  public static final int WAITING_PROPERTY_VALUE = 12;
  public static final int WAITING_KEY = 14;
  public static final int WAITING_QUOTED_KEY = 16;
  public static final int WAITING_QUOTED_KEY_END = 18;
  public static final int WAITING_STRING = 20;
  public static final int WAITING_QUOTED_STRING = 22;
  public static final int WAITING_SCRIPTED_VARIABLE_REFERENCE = 24;
  public static final int WAITING_SCRIPTED_VARIABLE_REFERENCE_NAME = 26;
  public static final int WAITING_PARAMETER = 28;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE = 30;
  public static final int WAITING_PARAMETER_DEFAULT_VALUE_END = 32;
  public static final int WAITING_PARAMETER_CONDITION = 34;
  public static final int WAITING_PARAMETER_CONDITION_EXPRESSION = 36;
  public static final int WAITING_PARAMETER_CONDITION_BODY = 38;
  public static final int WAITING_INLINE_MATH = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\2\0\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\12\20\2\0\1\21"+
    "\1\22\1\23\1\0\1\24\32\25\1\26\1\27\1\30"+
    "\1\0\1\25\1\0\1\25\1\31\2\25\1\32\1\25"+
    "\1\33\1\34\5\25\1\35\1\36\2\25\1\37\1\40"+
    "\2\25\1\41\2\25\1\42\1\25\1\43\1\44\1\45"+
    "\7\0\1\3\32\0\1\46\u01bf\0\12\47\206\0\12\47"+
    "\306\0\12\47\234\0\12\47\166\0\12\47\140\0\12\47"+
    "\166\0\12\47\106\0\12\47\u0116\0\12\47\106\0\12\47"+
    "\346\0\1\46\u015f\0\12\47\46\0\12\47\u012c\0\12\47"+
    "\200\0\12\47\246\0\12\47\6\0\12\47\266\0\12\47"+
    "\126\0\12\47\206\0\12\47\6\0\12\47\246\0\13\46"+
    "\35\0\2\3\5\0\1\46\57\0\1\46\240\0\1\46"+
    "\u01cf\0\12\47\46\0\12\47\306\0\12\47\26\0\12\47"+
    "\126\0\12\47\u0196\0\12\47\6\0\u0100\50\240\0\12\47"+
    "\206\0\12\47\u012c\0\12\47\200\0\12\47\74\0\12\47"+
    "\220\0\12\47\166\0\12\47\146\0\12\47\206\0\12\47"+
    "\106\0\12\47\266\0\12\47\u0164\0\62\47\100\0\12\47"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\1\2\2\1\1\3\2\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\4\1\1\13\1\14"+
    "\1\15\1\16\1\15\1\17\1\5\1\7\1\11\1\12"+
    "\1\20\1\21\1\22\1\23\1\11\1\12\1\24\1\25"+
    "\3\24\1\26\2\24\1\27\1\30\1\31\1\30\1\32"+
    "\1\5\1\7\2\33\2\34\1\33\1\35\2\17\1\5"+
    "\1\7\1\36\1\37\1\40\2\41\1\42\1\17\1\43"+
    "\1\44\1\11\1\12\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\3\53\1\54\2\53\1\10\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\17\1\71\1\72\1\73\1\74\1\75\1\0"+
    "\2\76\1\77\1\1\1\76\1\1\1\0\1\100\1\101"+
    "\1\77\1\102\1\103\1\0\1\1\1\104\2\1\1\0"+
    "\1\15\1\77\1\24\1\0\1\105\1\106\1\24\1\77"+
    "\3\0\1\107\1\110\1\53\1\111\1\0\1\1\1\76"+
    "\1\1\1\0\1\1\2\0\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0401\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\u0334\0\u0334\0\u04f7\0\u0520\0\u0549\0\u0572\0\u047c\0\u047c"+
    "\0\u059b\0\u05c4\0\u05ed\0\u047c\0\u0616\0\u063f\0\u059b\0\u059b"+
    "\0\u0668\0\u047c\0\u0691\0\u047c\0\u047c\0\u047c\0\u06ba\0\u06e3"+
    "\0\u070c\0\u0735\0\u075e\0\u0735\0\u0787\0\u07b0\0\u04ce\0\u07d9"+
    "\0\u0802\0\u082b\0\u047c\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u08cf\0\u047c\0\u047c\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u047c\0\u0a17\0\u047c\0\u047c\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0a69\0\u0a69\0\u0abb\0\u0ae4\0\u047c\0\u047c\0\u0b0d\0\u047c"+
    "\0\u0b36\0\u0b5f\0\u0b88\0\u0b5f\0\u0bb1\0\u0bda\0\u047c\0\u047c"+
    "\0\u0c03\0\u047c\0\u0c2c\0\u047c\0\u047c\0\u047c\0\u047c\0\u047c"+
    "\0\u047c\0\u047c\0\u047c\0\u0c55\0\u047c\0\u0c7e\0\u0ca7\0\u047c"+
    "\0\u047c\0\u0cd0\0\u0334\0\u047c\0\u047c\0\u0cf9\0\u03af\0\u0cd0"+
    "\0\u0d22\0\u042a\0\u047c\0\u0334\0\u047c\0\u047c\0\u0d4b\0\u0d74"+
    "\0\u0334\0\u0d9d\0\u0dc6\0\u0def\0\u047c\0\u059b\0\u047c\0\u0e18"+
    "\0\u075e\0\u06ba\0\u0e41\0\u07d9\0\u0921\0\u08f8\0\u0a40\0\u0b88"+
    "\0\u0b36\0\u0e6a\0\u0c55\0\u0c55\0\u0e93\0\u0e93\0\u047c\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u047c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\3\26\1\27\1\30\1\31\5\25\2\32\1\33"+
    "\1\25\1\34\1\35\1\36\1\37\1\40\1\25\1\41"+
    "\1\25\1\42\3\25\1\43\1\44\1\25\1\45\2\25"+
    "\1\46\1\47\1\25\1\50\1\26\2\25\1\51\3\52"+
    "\1\53\1\54\1\31\12\51\1\55\1\36\1\56\1\54"+
    "\1\51\1\57\1\51\1\60\12\51\1\47\1\51\1\50"+
    "\1\52\2\51\1\54\3\61\2\54\1\31\1\62\10\54"+
    "\1\63\1\54\1\64\2\54\1\63\1\65\1\54\1\66"+
    "\12\63\1\47\1\54\1\50\1\61\2\54\1\67\3\70"+
    "\1\67\1\71\1\31\1\54\4\67\2\72\1\73\1\67"+
    "\1\74\1\67\1\54\1\67\1\54\1\67\1\65\1\67"+
    "\1\66\4\67\1\75\4\67\1\76\1\47\1\67\1\50"+
    "\1\70\2\67\51\54\1\25\3\26\1\25\1\30\1\31"+
    "\5\25\2\32\1\33\1\25\1\34\1\25\1\54\1\25"+
    "\1\77\1\25\1\41\1\25\1\42\3\25\1\43\1\44"+
    "\1\25\1\45\2\25\1\46\1\47\1\25\1\50\1\26"+
    "\2\25\1\100\3\101\1\102\1\54\1\31\1\103\11\100"+
    "\1\104\1\36\1\105\1\54\1\100\1\65\1\100\1\66"+
    "\12\100\1\47\1\100\1\50\1\101\2\100\1\106\1\107"+
    "\1\110\1\111\1\106\1\112\1\106\1\113\17\106\1\114"+
    "\16\106\1\107\2\106\1\54\3\101\1\115\1\54\1\31"+
    "\12\54\1\116\1\36\1\117\2\54\1\65\1\54\1\66"+
    "\12\54\1\47\1\54\1\50\1\101\2\54\1\120\3\121"+
    "\1\120\1\54\1\31\1\122\12\120\1\54\1\120\1\54"+
    "\1\120\1\65\1\120\1\66\12\120\1\47\1\120\1\50"+
    "\1\121\2\120\5\123\1\124\1\123\1\125\17\123\1\126"+
    "\21\123\1\127\3\130\1\127\1\54\1\31\13\127\1\54"+
    "\1\127\1\54\1\127\1\131\1\127\1\132\12\127\1\47"+
    "\1\127\1\50\1\130\2\127\1\54\3\133\2\54\1\31"+
    "\1\62\10\54\1\134\4\54\1\134\1\65\1\54\1\66"+
    "\12\134\1\47\1\54\1\50\1\133\3\54\3\135\2\54"+
    "\1\135\1\136\15\54\1\137\3\54\12\137\1\47\1\140"+
    "\1\50\1\135\2\54\1\141\3\135\2\141\1\135\1\136"+
    "\4\141\2\142\1\143\1\141\1\144\1\141\1\54\3\141"+
    "\1\54\1\141\1\54\4\141\1\145\4\141\1\146\1\47"+
    "\1\141\1\50\1\135\2\141\1\54\3\135\2\54\1\135"+
    "\1\136\33\54\1\47\1\54\1\50\1\135\3\54\3\26"+
    "\2\54\1\31\15\54\1\147\1\54\1\150\1\54\1\66"+
    "\12\54\1\47\1\54\1\50\1\26\3\54\3\151\1\152"+
    "\1\54\1\31\16\54\1\153\2\54\1\154\12\153\1\47"+
    "\1\54\1\50\1\151\2\54\1\25\3\26\1\25\1\30"+
    "\1\31\5\25\2\32\1\33\1\25\1\34\1\25\1\54"+
    "\1\25\1\40\1\25\1\41\1\25\1\42\3\25\1\43"+
    "\1\44\1\25\1\45\2\25\1\46\1\47\1\25\1\50"+
    "\1\26\2\25\1\54\3\151\2\54\1\31\1\155\1\156"+
    "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
    "\4\54\1\167\2\54\1\170\12\167\1\54\1\171\1\54"+
    "\1\151\2\54\1\25\3\172\1\173\1\25\1\0\12\25"+
    "\1\173\1\174\1\173\17\25\1\0\1\25\1\0\1\172"+
    "\2\25\1\0\3\26\42\0\1\26\2\0\1\25\3\172"+
    "\1\173\1\25\1\0\12\25\1\173\1\175\1\173\17\25"+
    "\1\0\1\25\1\0\1\172\2\25\2\30\1\176\1\30"+
    "\1\177\1\200\13\30\3\177\3\30\1\201\21\30\2\31"+
    "\1\0\46\31\1\25\3\172\1\173\1\25\1\0\7\25"+
    "\1\33\1\25\1\34\1\173\1\174\1\173\17\25\1\0"+
    "\1\25\1\0\1\172\3\25\3\172\1\173\1\25\1\0"+
    "\11\25\1\202\1\173\1\174\1\173\17\25\1\0\1\25"+
    "\1\0\1\172\3\25\3\172\1\173\1\25\1\0\12\25"+
    "\1\173\1\203\1\204\17\25\1\0\1\25\1\0\1\172"+
    "\2\25\51\0\1\25\3\172\1\173\1\25\1\0\12\25"+
    "\1\173\1\205\1\173\17\25\1\0\1\25\1\0\1\172"+
    "\2\25\26\0\1\206\1\207\21\0\1\25\3\172\1\173"+
    "\1\25\1\0\12\25\1\173\1\174\1\173\14\25\1\210"+
    "\2\25\1\0\1\25\1\0\1\172\3\25\3\172\1\173"+
    "\1\25\1\0\12\25\1\173\1\174\1\173\12\25\1\211"+
    "\4\25\1\0\1\25\1\0\1\172\3\25\3\172\1\173"+
    "\1\25\1\0\12\25\1\173\1\174\1\173\7\25\1\212"+
    "\7\25\1\0\1\25\1\0\1\172\3\25\3\172\1\173"+
    "\1\25\1\0\12\25\1\173\1\174\1\173\6\25\1\213"+
    "\10\25\1\0\1\25\1\0\1\172\2\25\1\51\3\214"+
    "\1\51\2\0\13\51\1\215\1\51\1\0\16\51\1\0"+
    "\1\51\1\0\1\214\2\51\1\0\3\52\42\0\1\52"+
    "\2\0\1\51\3\214\1\51\2\0\13\51\1\175\1\51"+
    "\1\0\16\51\1\0\1\51\1\0\1\214\3\51\3\214"+
    "\1\51\2\0\13\51\1\203\1\216\1\0\16\51\1\0"+
    "\1\51\1\0\1\214\3\51\3\214\1\51\2\0\13\51"+
    "\1\205\1\51\1\0\16\51\1\0\1\51\1\0\1\214"+
    "\2\51\1\0\3\61\42\0\1\61\22\0\1\63\4\0"+
    "\1\63\3\0\12\63\6\0\1\67\3\0\2\67\2\0"+
    "\12\67\1\0\3\67\1\0\1\67\1\0\12\67\1\0"+
    "\1\67\2\0\2\67\1\0\3\70\42\0\1\70\2\0"+
    "\5\71\1\217\21\71\1\220\21\71\1\67\3\0\2\67"+
    "\2\0\6\67\1\73\1\67\1\74\1\67\1\0\3\67"+
    "\1\0\1\67\1\0\12\67\1\0\1\67\2\0\3\67"+
    "\3\0\2\67\2\0\10\67\1\221\1\67\1\0\3\67"+
    "\1\0\1\67\1\0\12\67\1\0\1\67\2\0\3\67"+
    "\3\0\2\67\2\0\12\67\1\0\3\67\1\0\1\67"+
    "\1\0\5\67\1\222\4\67\1\0\1\67\2\0\3\67"+
    "\3\0\2\67\2\0\12\67\1\0\3\67\1\0\1\67"+
    "\1\0\1\67\1\223\10\67\1\0\1\67\2\0\2\67"+
    "\1\100\3\0\2\100\2\0\12\100\1\0\3\100\1\0"+
    "\1\100\1\0\12\100\1\0\1\100\2\0\2\100\1\0"+
    "\3\101\42\0\1\101\2\0\1\100\3\0\2\100\2\0"+
    "\12\100\1\175\3\100\1\0\1\100\1\0\12\100\1\0"+
    "\1\100\2\0\3\100\3\0\2\100\2\0\12\100\1\203"+
    "\1\224\2\100\1\0\1\100\1\0\12\100\1\0\1\100"+
    "\2\0\3\100\3\0\2\100\2\0\12\100\1\205\3\100"+
    "\1\0\1\100\1\0\12\100\1\0\1\100\2\0\2\100"+
    "\2\106\1\0\2\106\1\112\1\106\1\0\17\106\1\225"+
    "\22\106\1\107\1\110\1\111\1\106\1\112\1\106\1\0"+
    "\17\106\1\225\16\106\1\107\2\106\1\0\1\226\2\110"+
    "\42\0\1\226\2\0\2\106\2\0\44\106\23\0\1\175"+
    "\50\0\1\203\1\175\47\0\1\205\26\0\1\120\3\0"+
    "\2\120\2\0\12\120\1\0\3\120\1\0\1\120\1\0"+
    "\12\120\1\0\1\120\2\0\2\120\1\0\3\121\42\0"+
    "\1\121\2\0\5\123\1\124\1\123\1\0\17\123\1\227"+
    "\23\123\2\0\44\123\1\0\1\127\3\0\1\127\2\0"+
    "\13\127\1\0\1\127\1\0\16\127\1\0\1\127\2\0"+
    "\2\127\1\0\3\130\42\0\1\130\3\0\3\133\42\0"+
    "\1\133\22\0\1\134\4\0\1\134\3\0\12\134\26\0"+
    "\1\137\4\0\1\137\3\0\12\137\6\0\1\141\3\0"+
    "\2\141\2\0\12\141\1\0\3\141\1\0\1\141\1\0"+
    "\12\141\1\0\1\141\2\0\3\141\3\0\2\141\2\0"+
    "\6\141\1\143\1\141\1\144\1\141\1\0\3\141\1\0"+
    "\1\141\1\0\12\141\1\0\1\141\2\0\3\141\3\0"+
    "\2\141\2\0\10\141\1\230\1\141\1\0\3\141\1\0"+
    "\1\141\1\0\12\141\1\0\1\141\2\0\3\141\3\0"+
    "\2\141\2\0\12\141\1\0\3\141\1\0\1\141\1\0"+
    "\5\141\1\231\4\141\1\0\1\141\2\0\3\141\3\0"+
    "\2\141\2\0\12\141\1\0\3\141\1\0\1\141\1\0"+
    "\1\141\1\232\10\141\1\0\1\141\2\0\2\141\1\0"+
    "\3\151\42\0\1\151\22\0\1\153\4\0\1\153\3\0"+
    "\12\153\26\0\1\233\46\0\1\234\1\0\1\166\4\0"+
    "\1\167\3\0\12\167\26\0\1\167\4\0\1\167\3\0"+
    "\12\167\7\0\3\172\1\174\14\0\3\174\22\0\1\172"+
    "\2\0\1\235\3\176\1\236\1\237\13\235\3\236\3\235"+
    "\1\240\16\235\1\176\2\235\2\30\2\0\44\30\27\0"+
    "\1\206\22\0\1\25\3\172\1\173\1\25\1\0\12\25"+
    "\1\173\1\174\1\173\15\25\1\241\1\25\1\0\1\25"+
    "\1\0\1\172\3\25\3\172\1\173\1\25\1\0\12\25"+
    "\1\173\1\174\1\173\5\25\1\241\11\25\1\0\1\25"+
    "\1\0\1\172\3\25\3\172\1\173\1\25\1\0\12\25"+
    "\1\173\1\174\1\173\14\25\1\211\2\25\1\0\1\25"+
    "\1\0\1\172\2\25\1\0\3\214\16\0\1\215\23\0"+
    "\1\214\2\0\2\71\2\0\44\71\1\0\1\67\3\0"+
    "\2\67\2\0\12\67\1\0\3\67\1\0\1\67\1\0"+
    "\7\67\1\222\2\67\1\0\1\67\2\0\2\67\1\141"+
    "\3\0\2\141\2\0\12\141\1\0\3\141\1\0\1\141"+
    "\1\0\7\141\1\231\2\141\1\0\1\141\2\0\2\141"+
    "\5\235\1\237\21\235\1\240\23\235\2\0\44\235\1\0"+
    "\1\25\1\242\2\172\1\173\1\25\1\0\12\25\1\173"+
    "\1\174\1\173\17\25\1\243\1\25\1\0\1\172\2\25"+
    "\1\0\1\242\2\172\1\174\14\0\3\174\17\0\1\243"+
    "\2\0\1\172\3\0\1\243\1\0\1\243\12\0\1\243"+
    "\1\0\1\243\24\0\1\244\2\243\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3936];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\11\1\1\11\10\1\2\11\3\1\1\11\5\1"+
    "\1\11\1\1\3\11\14\1\1\11\6\1\2\11\6\1"+
    "\1\11\1\1\2\11\7\1\2\11\1\1\1\11\6\1"+
    "\2\11\1\1\1\11\1\1\10\11\1\1\1\11\2\1"+
    "\2\11\1\0\1\1\2\11\3\1\1\0\1\1\1\11"+
    "\1\1\2\11\1\0\4\1\1\0\1\11\1\1\1\11"+
    "\1\0\4\1\3\0\4\1\1\0\2\1\1\11\1\0"+
    "\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	private enum ParameterPosition {
	    NONE, SCRIPTED_VARIABLE_NAME, SCRIPTED_VARIABLE_REFERENCE, KEY, QUOTED_KEY, STRING, QUOTED_STRING, INLINE_MATH;
	}

    private int depth = 0;
    private ParameterPosition parameterPosition = ParameterPosition.NONE;
	private boolean scriptedVariableValueStarted = false;
	private boolean valueStarted = false;
    private boolean inParameterCondition = false;
    private boolean leftAbsSign = true;
	private boolean quoted = false;
	private int nextStateForParameterCondition = 0;
    
    public _ParadoxScriptLexer() {
        this((java.io.Reader)null);
    }
	
	private void beginNextState(){
	    if(inParameterCondition){
		    yybegin(WAITING_PARAMETER_CONDITION);
	    } else {
            if(depth <= 0){
	            yybegin(YYINITIAL);
            } else {
	            yybegin(WAITING_PROPERTY_OR_VALUE);
            }
	    }
    }
    
    private void beginNextStateForParameter(){
		if(parameterPosition == ParameterPosition.SCRIPTED_VARIABLE_NAME) {
			yybegin(WAITING_SCRIPTED_VARIABLE_NAME);
		} else if(parameterPosition == ParameterPosition.SCRIPTED_VARIABLE_REFERENCE) {
            yybegin(WAITING_SCRIPTED_VARIABLE_REFERENCE_NAME);
        } else if(parameterPosition == ParameterPosition.KEY){
		    yybegin(WAITING_KEY);
	    } else if(parameterPosition == ParameterPosition.QUOTED_KEY){
            yybegin(WAITING_QUOTED_KEY);
        } else if(parameterPosition == ParameterPosition.STRING){
		    yybegin(WAITING_STRING);
	    } else if(parameterPosition == ParameterPosition.QUOTED_STRING){
            yybegin(WAITING_QUOTED_STRING);
        } else if(parameterPosition == ParameterPosition.INLINE_MATH) {
            yybegin(WAITING_INLINE_MATH);
        } else {
            beginNextState(); //unexpected
        }
    }
	
	private void beginParameterCondition() {
		inParameterCondition=true;
		nextStateForParameterCondition = yystate();
		yybegin(WAITING_PARAMETER_CONDITION);
	}
	
	private void beginNextStateForParameterCondition(){
		inParameterCondition=false;
        yybegin(nextStateForParameterCondition);
    }
	
	private boolean isParameterized() {
		int length = yylength();
		for(int i = 0; i < length; i++) {
		  char c1 = yycharat(i);
		  if(c1 == '$') return true;
		}
		return false;
	}
	
    private void pushbackUntilBeforeBlank(int from){
        //回退到末尾可能出现的空白之前
        int length = yylength();
        int i;
        for (i = from; i < length ; i++) {
          char c = yycharat(length-i-1);
          if(!Character.isWhitespace(c)) break;
        }
        if(i != 0){
            yypushback(i);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ParadoxScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { boolean leftQuoted = yycharat(0) == '"';
    quoted = leftQuoted;
	if(quoted) {
        if(isParameterized()) {
            parameterPosition = ParameterPosition.QUOTED_STRING;
        }
        yypushback(yylength() - 1);
        yybegin(WAITING_QUOTED_STRING);
	} else {
        if(isParameterized()) {
            parameterPosition = ParameterPosition.STRING;
        }
        yypushback(yylength());
        yybegin(WAITING_STRING);
	}
            }
          // fall through
          case 75: break;
          case 2:
            { if(valueStarted) {
		  valueStarted = false;
		  beginNextState();
	  }
	  return WHITE_SPACE;
            }
          // fall through
          case 76: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 77: break;
          case 4:
            { valueStarted=true; return INT_TOKEN;
            }
          // fall through
          case 78: break;
          case 5:
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            }
          // fall through
          case 79: break;
          case 6:
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            }
          // fall through
          case 80: break;
          case 7:
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            }
          // fall through
          case 81: break;
          case 8:
            { yybegin(WAITING_SCRIPTED_VARIABLE); return AT;
            }
          // fall through
          case 82: break;
          case 9:
            { beginParameterCondition(); return LEFT_BRACKET;
            }
          // fall through
          case 83: break;
          case 10:
            { beginNextStateForParameterCondition(); return RIGHT_BRACKET;
            }
          // fall through
          case 84: break;
          case 11:
            { depth++; beginNextState(); return LEFT_BRACE;
            }
          // fall through
          case 85: break;
          case 12:
            { depth--; beginNextState(); return RIGHT_BRACE;
            }
          // fall through
          case 86: break;
          case 13:
            { //如果匹配到的文本以等号结尾，则作为scriptedVariable进行解析，否则作为scriptedVariableReference解析
        if(yycharat(yylength() -1) == '='){
            if(isParameterized()) {
                parameterPosition = ParameterPosition.SCRIPTED_VARIABLE_NAME; 
            }
            yypushback(yylength());
            yybegin(WAITING_SCRIPTED_VARIABLE_NAME);
        } else {
            if(isParameterized()) {
                parameterPosition = ParameterPosition.SCRIPTED_VARIABLE_REFERENCE; 
            }
            yypushback(yylength());
            yybegin(WAITING_SCRIPTED_VARIABLE_REFERENCE_NAME);
        }
            }
          // fall through
          case 87: break;
          case 14:
            { beginNextState(); return WHITE_SPACE;
            }
          // fall through
          case 88: break;
          case 15:
            { return BAD_CHARACTER;
            }
          // fall through
          case 89: break;
          case 16:
            { parameterPosition = ParameterPosition.NONE;
      return WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 17:
            { yybegin(WAITING_PARAMETER);
	  return PARAMETER_START;
            }
          // fall through
          case 91: break;
          case 18:
            { return SCRIPTED_VARIABLE_NAME_TOKEN;
            }
          // fall through
          case 92: break;
          case 19:
            { yybegin(WAITING_SCRIPTED_VARIABLE_VALUE); return EQUAL_SIGN;
            }
          // fall through
          case 93: break;
          case 20:
            { scriptedVariableValueStarted=true; return STRING_TOKEN;
            }
          // fall through
          case 94: break;
          case 21:
            { if(scriptedVariableValueStarted) {
          scriptedVariableValueStarted = false;
          beginNextState();
      }
	  return WHITE_SPACE;
            }
          // fall through
          case 95: break;
          case 22:
            { scriptedVariableValueStarted=true; return INT_TOKEN;
            }
          // fall through
          case 96: break;
          case 23:
            { yybegin(WAITING_SCRIPTED_VARIABLE_REFERENCE); return AT;
            }
          // fall through
          case 97: break;
          case 24:
            { return PROPERTY_KEY_TOKEN;
            }
          // fall through
          case 98: break;
          case 25:
            { parameterPosition = ParameterPosition.NONE;
	  quoted = false;
	  return WHITE_SPACE;
            }
          // fall through
          case 99: break;
          case 26:
            { yybegin(WAITING_PARAMETER); 
	  return PARAMETER_START;
            }
          // fall through
          case 100: break;
          case 27:
            { if(yycharat(yylength() -1) == '"') {
        parameterPosition = ParameterPosition.NONE;
	    quoted = false;
		yybegin(WAITING_QUOTED_KEY_END);
	}
    return PROPERTY_KEY_TOKEN;
            }
          // fall through
          case 101: break;
          case 28:
            { parameterPosition = ParameterPosition.NONE;
      quoted = false;
      yybegin(WAITING_QUOTED_KEY_END);
      return WHITE_SPACE;
            }
          // fall through
          case 102: break;
          case 29:
            { yybegin(WAITING_PARAMETER); 
    return PARAMETER_START;
            }
          // fall through
          case 103: break;
          case 30:
            { valueStarted=true;
      return STRING_TOKEN;
            }
          // fall through
          case 104: break;
          case 31:
            { if(valueStarted) {
          parameterPosition = ParameterPosition.NONE;
		  quoted = false;
		  valueStarted = false;
		  beginNextState();
	  }
	  return WHITE_SPACE;
            }
          // fall through
          case 105: break;
          case 32:
            { valueStarted=true;
	  yybegin(WAITING_PARAMETER); 
	  return PARAMETER_START;
            }
          // fall through
          case 106: break;
          case 33:
            { if(yycharat(yylength() -1) == '"') {
          parameterPosition = ParameterPosition.NONE;
		  quoted = false;
		  valueStarted = false;
		  beginNextState();
      }
      return STRING_TOKEN;
            }
          // fall through
          case 107: break;
          case 34:
            { yybegin(WAITING_PARAMETER); 
      return PARAMETER_START;
            }
          // fall through
          case 108: break;
          case 35:
            { if(isParameterized()) {
          parameterPosition = ParameterPosition.SCRIPTED_VARIABLE_REFERENCE; 
      }
      yypushback(yylength());
      yybegin(WAITING_SCRIPTED_VARIABLE_REFERENCE_NAME);
            }
          // fall through
          case 109: break;
          case 36:
            { beginNextState();return WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 37:
            { parameterPosition = ParameterPosition.NONE;
	  beginNextState();
	  return WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 38:
            { return SCRIPTED_VARIABLE_REFERENCE_TOKEN;
            }
          // fall through
          case 112: break;
          case 39:
            { yypushback(yylength()); beginNextStateForParameter();
            }
          // fall through
          case 113: break;
          case 40:
            { beginNextStateForParameter(); return PARAMETER_END;
            }
          // fall through
          case 114: break;
          case 41:
            { return PARAMETER_TOKEN;
            }
          // fall through
          case 115: break;
          case 42:
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE); return PIPE;
            }
          // fall through
          case 116: break;
          case 43:
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return STRING_TOKEN;
            }
          // fall through
          case 117: break;
          case 44:
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return INT_TOKEN;
            }
          // fall through
          case 118: break;
          case 45:
            { yybegin(WAITING_PARAMETER_CONDITION_EXPRESSION); return NESTED_LEFT_BRACKET;
            }
          // fall through
          case 119: break;
          case 46:
            { return WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 47:
            { return NOT_SIGN;
            }
          // fall through
          case 121: break;
          case 48:
            { return CONDITION_PARAMETER_TOKEN;
            }
          // fall through
          case 122: break;
          case 49:
            { yybegin(WAITING_PARAMETER_CONDITION_BODY); return NESTED_RIGHT_BRACKET;
            }
          // fall through
          case 123: break;
          case 50:
            { parameterPosition=ParameterPosition.INLINE_MATH; yybegin(WAITING_PARAMETER); return PARAMETER_START;
            }
          // fall through
          case 124: break;
          case 51:
            { yybegin(WAITING_INLINE_MATH); return MOD_SIGN;
            }
          // fall through
          case 125: break;
          case 52:
            { return LP_SIGN;
            }
          // fall through
          case 126: break;
          case 53:
            { return RP_SIGN;
            }
          // fall through
          case 127: break;
          case 54:
            { yybegin(WAITING_INLINE_MATH); return TIMES_SIGN;
            }
          // fall through
          case 128: break;
          case 55:
            { yybegin(WAITING_INLINE_MATH); return PLUS_SIGN;
            }
          // fall through
          case 129: break;
          case 56:
            { yybegin(WAITING_INLINE_MATH); return MINUS_SIGN;
            }
          // fall through
          case 130: break;
          case 57:
            { yybegin(WAITING_INLINE_MATH); return DIV_SIGN;
            }
          // fall through
          case 131: break;
          case 58:
            { return INT_NUMBER_TOKEN;
            }
          // fall through
          case 132: break;
          case 59:
            { return INLINE_MATH_SCRIPTED_VARIABLE_REFERENCE_TOKEN;
            }
          // fall through
          case 133: break;
          case 60:
            { beginNextState(); return INLINE_MATH_END;
            }
          // fall through
          case 134: break;
          case 61:
            { if(leftAbsSign){
      leftAbsSign=false; 
      return LABS_SIGN;
    }else{
      leftAbsSign=true;
      return RABS_SIGN;
    }
            }
          // fall through
          case 135: break;
          case 62:
            { boolean leftQuoted = yycharat(0) == '"';
	  quoted = leftQuoted;
	  if(quoted) {
          if(isParameterized()) {
              parameterPosition = ParameterPosition.QUOTED_KEY;
          }
          yypushback(yylength() - 1);
          yybegin(WAITING_QUOTED_KEY);
	  } else {
          if(isParameterized()) {
              parameterPosition = ParameterPosition.KEY;
          }
          yypushback(yylength());
          yybegin(WAITING_KEY);
	  }
            }
          // fall through
          case 136: break;
          case 63:
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            }
          // fall through
          case 137: break;
          case 64:
            { valueStarted=true; return FLOAT_TOKEN;
            }
          // fall through
          case 138: break;
          case 65:
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            }
          // fall through
          case 139: break;
          case 66:
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            }
          // fall through
          case 140: break;
          case 67:
            { yybegin(WAITING_INLINE_MATH); return INLINE_MATH_START;
            }
          // fall through
          case 141: break;
          case 68:
            { valueStarted=true; return BOOLEAN_TOKEN;
            }
          // fall through
          case 142: break;
          case 69:
            { scriptedVariableValueStarted=true; return FLOAT_TOKEN;
            }
          // fall through
          case 143: break;
          case 70:
            { scriptedVariableValueStarted=true; return BOOLEAN_TOKEN;
            }
          // fall through
          case 144: break;
          case 71:
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END);; return FLOAT_TOKEN;
            }
          // fall through
          case 145: break;
          case 72:
            { yybegin(WAITING_PARAMETER_DEFAULT_VALUE_END); return BOOLEAN_TOKEN;
            }
          // fall through
          case 146: break;
          case 73:
            { return FLOAT_NUMBER_TOKEN;
            }
          // fall through
          case 147: break;
          case 74:
            { valueStarted=true; return COLOR_TOKEN;
            }
          // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
