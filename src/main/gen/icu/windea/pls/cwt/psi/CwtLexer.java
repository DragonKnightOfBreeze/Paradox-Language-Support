/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package icu.windea.pls.cwt.psi;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static icu.windea.pls.cwt.psi.CwtElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CwtLexer.flex</tt>
 */
public class CwtLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_PROPERTY_KEY = 2;
  public static final int WATIING_PROPERTY_SEPARATOR = 4;
  public static final int WAITING_PROPERTY_VALUE = 6;
  public static final int WAITING_PROPERTY_VALUE_END = 8;
  public static final int WAITING_PROPERTY_END = 10;
  public static final int WAITING_OPTION = 12;
  public static final int WAITING_OPTION_TOP_STRING = 14;
  public static final int WAITING_OPTION_KEY = 16;
  public static final int WATIING_OPTION_SEPARATOR = 18;
  public static final int WAITING_OPTION_VALUE = 20;
  public static final int WAITING_OPTION_VALUE_TOP_STRING = 22;
  public static final int WAITING_OPTION_VALUE_END = 24;
  public static final int WAITING_OPTION_END = 26;
  public static final int WAITING_DOCUMENTATION = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\2\1\3\22\0\1\1\1\6\1\11\1\4\7\0\1\21\1\0\1\21\1\23\1\0\12"+
    "\22\2\0\1\7\1\5\1\10\35\0\1\13\10\0\1\15\10\0\1\17\1\20\3\0\1\16\5\0\1\14"+
    "\1\0\1\24\1\0\1\12\7\0\1\2\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\2\5\0\1\1"+
    "\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\2\2\1\3\1\4\2\1\1\5\3\1"+
    "\1\6\1\7\1\10\1\2\2\11\1\12\1\10\1\13"+
    "\1\14\1\3\1\15\2\12\1\16\1\2\1\11\5\16"+
    "\1\17\1\11\1\20\1\21\1\2\1\11\1\3\1\22"+
    "\2\21\1\23\3\21\1\24\1\25\2\26\2\27\1\30"+
    "\1\31\1\32\2\12\6\33\1\34\2\35\1\36\1\11"+
    "\1\37\2\20\1\40\3\0\1\41\2\4\2\1\1\0"+
    "\1\1\1\42\1\1\1\0\1\10\1\0\1\15\1\43"+
    "\2\4\2\16\1\0\1\16\1\44\1\16\3\0\2\22"+
    "\2\21\1\0\1\21\1\45\1\21\1\0\1\27\1\0"+
    "\1\32\1\46\2\22\2\33\1\0\1\33\1\47\1\33"+
    "\2\0\1\50\1\51\1\52\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\25\0\52\0\77\0\124\0\151\0\176\0\223"+
    "\0\250\0\275\0\322\0\347\0\374\0\u0111\0\u0126\0\u013b"+
    "\0\u0150\0\u0165\0\u017a\0\u018f\0\u01a4\0\u01b9\0\u018f\0\u01ce"+
    "\0\u01e3\0\u01f8\0\u020d\0\u018f\0\u0222\0\u0237\0\u0237\0\u024c"+
    "\0\u018f\0\u0261\0\u018f\0\u018f\0\u0276\0\u028b\0\u02a0\0\u02b5"+
    "\0\u02ca\0\u02df\0\u02df\0\u02f4\0\u0309\0\u031e\0\u0333\0\u0348"+
    "\0\u035d\0\u0372\0\u0387\0\u039c\0\u03b1\0\u03b1\0\u03c6\0\u018f"+
    "\0\u03db\0\u03f0\0\u018f\0\u0405\0\u041a\0\u042f\0\u0444\0\u018f"+
    "\0\u0459\0\u018f\0\u046e\0\u0483\0\u018f\0\u018f\0\u0498\0\u04ad"+
    "\0\u04c2\0\u04d7\0\u04ec\0\u0501\0\u0516\0\u052b\0\u0540\0\u0555"+
    "\0\u056a\0\u018f\0\u057f\0\u057f\0\u0594\0\u0594\0\u05a9\0\u05be"+
    "\0\u05d3\0\u05e8\0\u05fd\0\u0612\0\u013b\0\u01b9\0\u0627\0\u05d3"+
    "\0\u063c\0\u0651\0\u013b\0\u0666\0\u024c\0\u018f\0\u067b\0\u018f"+
    "\0\u018f\0\u02ca\0\u0309\0\u0690\0\u05d3\0\u06a5\0\u06ba\0\u02ca"+
    "\0\u06cf\0\u06e4\0\u06f9\0\u070e\0\u039c\0\u03f0\0\u0723\0\u06e4"+
    "\0\u0738\0\u074d\0\u039c\0\u0762\0\u0459\0\u018f\0\u0777\0\u018f"+
    "\0\u018f\0\u04d7\0\u0501\0\u078c\0\u06e4\0\u07a1\0\u07b6\0\u04d7"+
    "\0\u07cb\0\u056a\0\u05a9\0\u018f\0\u0666\0\u06cf\0\u0762\0\u07cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\2\21\1\22\1\23\1\24\1\20\1\25\1\20"+
    "\1\26\1\27\1\20\1\30\2\20\1\31\1\20\1\32"+
    "\1\33\1\20\1\34\1\35\1\36\1\37\1\40\2\41"+
    "\3\35\1\42\1\43\11\35\1\44\1\41\1\36\1\37"+
    "\1\40\1\45\1\46\1\47\1\50\2\41\1\43\11\41"+
    "\1\44\1\51\1\52\1\53\1\40\1\23\1\24\1\51"+
    "\1\54\1\51\1\55\1\43\1\51\1\56\2\51\1\57"+
    "\1\51\1\60\1\61\1\51\1\44\1\41\3\62\1\45"+
    "\5\41\1\43\11\41\1\44\1\41\3\63\1\45\5\41"+
    "\1\43\11\41\1\44\1\64\1\65\1\66\1\40\1\67"+
    "\1\70\1\64\1\71\1\64\1\72\1\73\1\64\1\74"+
    "\2\64\1\75\1\64\1\76\1\77\1\64\1\100\1\101"+
    "\3\41\1\101\1\102\4\101\1\102\11\101\1\102\1\103"+
    "\1\36\1\37\1\40\1\67\1\41\3\103\1\104\1\105"+
    "\11\103\1\106\1\41\1\36\1\37\1\40\1\67\1\107"+
    "\1\110\1\111\2\41\1\105\11\41\1\106\1\112\1\65"+
    "\1\66\1\40\1\23\1\70\1\112\1\113\1\112\1\114"+
    "\1\105\1\112\1\115\2\112\1\116\1\112\1\117\1\120"+
    "\1\112\1\106\1\121\3\41\1\121\1\122\4\121\1\122"+
    "\11\121\1\122\1\41\1\123\1\124\1\40\1\67\5\41"+
    "\1\105\11\41\1\106\1\41\1\125\1\126\1\127\1\67"+
    "\5\41\1\105\11\41\1\106\1\130\1\36\1\37\1\40"+
    "\21\130\1\20\2\131\2\0\1\24\1\20\1\25\2\20"+
    "\1\0\11\20\2\0\2\21\1\22\1\0\1\24\1\132"+
    "\1\133\16\0\3\22\21\0\3\67\1\0\1\134\20\67"+
    "\25\0\1\20\2\131\2\0\1\24\1\20\1\25\1\135"+
    "\1\20\1\0\11\20\1\0\3\26\1\0\1\26\1\136"+
    "\1\26\1\137\1\26\1\140\1\26\1\141\11\26\1\20"+
    "\2\131\2\0\1\24\1\20\1\25\2\20\1\0\2\20"+
    "\1\142\6\20\1\0\1\20\2\131\2\0\1\24\1\20"+
    "\1\25\2\20\1\0\5\20\1\143\3\20\1\0\1\20"+
    "\2\131\2\0\1\24\1\20\1\25\2\20\1\0\7\20"+
    "\1\33\1\20\1\0\1\20\2\131\2\0\1\24\1\20"+
    "\1\25\2\20\1\0\7\20\1\33\1\144\1\0\1\35"+
    "\5\0\4\35\1\0\11\35\2\0\1\36\1\37\1\40"+
    "\22\0\1\145\2\40\21\0\3\42\1\0\5\42\1\146"+
    "\1\42\1\147\11\42\3\67\2\0\20\67\5\0\1\150"+
    "\24\0\1\151\27\0\1\151\14\0\1\51\2\131\2\0"+
    "\1\24\1\51\1\54\2\51\1\0\11\51\2\0\1\52"+
    "\1\53\1\40\1\0\1\24\1\132\1\133\15\0\1\51"+
    "\2\131\2\0\1\24\1\51\1\54\1\152\1\51\1\0"+
    "\11\51\1\0\3\55\1\0\1\55\1\153\1\55\1\154"+
    "\1\55\1\155\1\55\1\156\11\55\1\51\2\131\2\0"+
    "\1\24\1\51\1\54\2\51\1\0\2\51\1\157\6\51"+
    "\1\0\1\51\2\131\2\0\1\24\1\51\1\54\2\51"+
    "\1\0\5\51\1\160\3\51\1\0\1\51\2\131\2\0"+
    "\1\24\1\51\1\54\2\51\1\0\7\51\1\61\1\51"+
    "\1\0\1\51\2\131\2\0\1\24\1\51\1\54\2\51"+
    "\1\0\7\51\1\61\1\161\2\0\3\62\22\0\3\63"+
    "\21\0\1\64\2\162\2\0\1\70\1\64\1\71\2\64"+
    "\1\0\11\64\2\0\1\65\1\66\1\40\1\0\1\70"+
    "\1\163\1\164\15\0\3\67\1\0\21\67\1\64\2\162"+
    "\2\0\1\70\1\64\1\71\1\165\1\64\1\0\11\64"+
    "\1\0\3\72\1\0\1\72\1\166\1\72\1\167\1\72"+
    "\1\170\1\72\1\171\11\72\1\64\2\162\2\0\1\70"+
    "\1\64\1\71\2\64\1\0\2\64\1\172\6\64\1\0"+
    "\1\64\2\162\2\0\1\70\1\64\1\71\2\64\1\0"+
    "\5\64\1\173\3\64\1\0\1\64\2\162\2\0\1\70"+
    "\1\64\1\71\2\64\1\0\7\64\1\77\1\64\1\0"+
    "\1\64\2\162\2\0\1\70\1\64\1\71\2\64\1\0"+
    "\7\64\1\77\1\174\1\0\1\101\2\175\1\0\1\101"+
    "\1\0\4\101\1\0\11\101\1\0\1\103\5\0\4\103"+
    "\1\0\11\103\1\0\3\104\1\0\5\104\1\176\1\104"+
    "\1\177\11\104\5\0\1\200\24\0\1\201\27\0\1\201"+
    "\14\0\1\112\2\162\2\0\1\70\1\112\1\113\2\112"+
    "\1\0\11\112\1\0\1\112\2\162\2\0\1\70\1\112"+
    "\1\113\1\202\1\112\1\0\11\112\1\0\3\114\1\0"+
    "\1\114\1\203\1\114\1\204\1\114\1\205\1\114\1\206"+
    "\11\114\1\112\2\162\2\0\1\70\1\112\1\113\2\112"+
    "\1\0\2\112\1\207\6\112\1\0\1\112\2\162\2\0"+
    "\1\70\1\112\1\113\2\112\1\0\5\112\1\210\3\112"+
    "\1\0\1\112\2\162\2\0\1\70\1\112\1\113\2\112"+
    "\1\0\7\112\1\120\1\112\1\0\1\112\2\162\2\0"+
    "\1\70\1\112\1\113\2\112\1\0\7\112\1\120\1\211"+
    "\1\0\1\121\2\212\1\0\1\121\1\0\4\121\1\0"+
    "\11\121\2\0\1\123\1\124\1\40\22\0\1\125\1\126"+
    "\1\127\22\0\1\213\2\127\21\0\3\130\1\0\21\130"+
    "\1\0\2\131\2\0\1\24\1\132\1\133\22\0\1\24"+
    "\27\0\1\24\20\0\1\214\20\0\3\26\1\0\1\26"+
    "\1\136\1\26\1\137\1\136\1\140\1\26\1\141\13\26"+
    "\2\0\21\26\1\20\2\131\2\0\1\24\1\20\1\25"+
    "\2\20\1\0\3\20\1\143\5\20\1\0\1\20\2\131"+
    "\2\0\1\24\1\20\1\25\2\20\1\0\7\20\1\215"+
    "\1\20\1\0\2\42\2\0\21\42\3\55\1\0\1\55"+
    "\1\153\1\55\1\154\1\153\1\155\1\55\1\156\13\55"+
    "\2\0\21\55\1\51\2\131\2\0\1\24\1\51\1\54"+
    "\2\51\1\0\3\51\1\160\5\51\1\0\1\51\2\131"+
    "\2\0\1\24\1\51\1\54\2\51\1\0\7\51\1\216"+
    "\1\51\2\0\2\162\2\0\1\70\1\163\1\164\22\0"+
    "\1\70\27\0\1\70\14\0\3\72\1\0\1\72\1\166"+
    "\1\72\1\167\1\166\1\170\1\72\1\171\13\72\2\0"+
    "\21\72\1\64\2\162\2\0\1\70\1\64\1\71\2\64"+
    "\1\0\3\64\1\173\5\64\1\0\1\64\2\162\2\0"+
    "\1\70\1\64\1\71\2\64\1\0\7\64\1\217\1\64"+
    "\1\0\2\104\2\0\21\104\3\114\1\0\1\114\1\203"+
    "\1\114\1\204\1\203\1\205\1\114\1\206\13\114\2\0"+
    "\21\114\1\112\2\162\2\0\1\70\1\112\1\113\2\112"+
    "\1\0\3\112\1\210\5\112\1\0\1\112\2\162\2\0"+
    "\1\70\1\112\1\113\2\112\1\0\7\112\1\220\1\112"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\4\1\1\11\2\1\1\11\4\1\1\11\4\1"+
    "\1\11\1\1\2\11\23\1\1\11\2\1\1\11\4\1"+
    "\1\11\1\1\1\11\2\1\2\11\13\1\1\11\6\1"+
    "\3\0\5\1\1\0\3\1\1\0\1\11\1\0\2\11"+
    "\4\1\1\0\3\1\3\0\4\1\1\0\3\1\1\0"+
    "\1\11\1\0\2\11\4\1\1\0\3\1\2\0\1\11"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int optionDepth = 0;
    
    public CwtLexer() {
      this((java.io.Reader)null);
    }
    
    public boolean nextCharIs(char c) {
	    try {
			return yycharat(yylength()) == c;
		} catch(Exception e) {
	        return false;
		}
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CwtLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(WAITING_PROPERTY_VALUE_END); return STRING_TOKEN;
            } 
            // fall through
          case 45: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 47: break;
          case 4: 
            { yypushback(yylength()); yybegin(WAITING_PROPERTY_KEY);
            } 
            // fall through
          case 48: break;
          case 5: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 49: break;
          case 6: 
            { yybegin(WAITING_PROPERTY_VALUE_END); return INT_TOKEN;
            } 
            // fall through
          case 50: break;
          case 7: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 51: break;
          case 8: 
            { yybegin(WATIING_PROPERTY_SEPARATOR); return PROPERTY_KEY_TOKEN;
            } 
            // fall through
          case 52: break;
          case 9: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 10: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 11: 
            { yybegin(YYINITIAL); return RIGHT_BRACE;
            } 
            // fall through
          case 55: break;
          case 12: 
            { yybegin(YYINITIAL); return LEFT_BRACE;
            } 
            // fall through
          case 56: break;
          case 13: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(WAITING_PROPERTY_END); return STRING_TOKEN;
            } 
            // fall through
          case 58: break;
          case 15: 
            { yybegin(WAITING_PROPERTY_END); return INT_TOKEN;
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(YYINITIAL);  return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 17: 
            { if(optionDepth==0){
    	yypushback(yylength()); yybegin(WAITING_OPTION_TOP_STRING);
   	}else{
    	yybegin(WAITING_OPTION_VALUE_END); return STRING_TOKEN;
    }
            } 
            // fall through
          case 61: break;
          case 18: 
            { yypushback(yylength()); yybegin(WAITING_OPTION_KEY);
            } 
            // fall through
          case 62: break;
          case 19: 
            { optionDepth--; return RIGHT_BRACE;
            } 
            // fall through
          case 63: break;
          case 20: 
            { yybegin(WAITING_OPTION_VALUE_END); return INT_TOKEN;
            } 
            // fall through
          case 64: break;
          case 21: 
            { optionDepth++; return LEFT_BRACE;
            } 
            // fall through
          case 65: break;
          case 22: 
            { yybegin(WAITING_OPTION_VALUE_END); return STRING_TOKEN;
            } 
            // fall through
          case 66: break;
          case 23: 
            { yybegin(WATIING_OPTION_SEPARATOR); return OPTION_KEY_TOKEN;
            } 
            // fall through
          case 67: break;
          case 24: 
            { yybegin(WAITING_OPTION); optionDepth--; return RIGHT_BRACE;
            } 
            // fall through
          case 68: break;
          case 25: 
            { yybegin(WAITING_OPTION); optionDepth++; return LEFT_BRACE;
            } 
            // fall through
          case 69: break;
          case 26: 
            { yybegin(WAITING_OPTION_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 70: break;
          case 27: 
            { if(optionDepth==0){
    	yypushback(yylength()); yybegin(WAITING_OPTION_VALUE_TOP_STRING);
   	}else{
    	yybegin(WAITING_OPTION_END); return STRING_TOKEN;
    }
            } 
            // fall through
          case 71: break;
          case 28: 
            { yybegin(WAITING_OPTION_END); return INT_TOKEN;
            } 
            // fall through
          case 72: break;
          case 29: 
            { yybegin(WAITING_OPTION_END); return STRING_TOKEN;
            } 
            // fall through
          case 73: break;
          case 30: 
            { yybegin(WAITING_OPTION); return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 31: 
            { yybegin(WAITING_OPTION);  return WHITE_SPACE;
            } 
            // fall through
          case 75: break;
          case 32: 
            { yybegin(YYINITIAL); return DOCUMENTATION_TOKEN;
            } 
            // fall through
          case 76: break;
          case 33: 
            { if(!nextCharIs('#')) { yypushback(1); yybegin(WAITING_OPTION); return OPTION_START; }
            } 
            // fall through
          case 77: break;
          case 34: 
            { yybegin(WAITING_PROPERTY_VALUE_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 78: break;
          case 35: 
            { yybegin(WAITING_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 79: break;
          case 36: 
            { yybegin(WAITING_PROPERTY_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 80: break;
          case 37: 
            { yybegin(WAITING_OPTION_VALUE_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 81: break;
          case 38: 
            { yybegin(WAITING_OPTION_VALUE); return NOT_EQUAL_SIGN;
            } 
            // fall through
          case 82: break;
          case 39: 
            { yybegin(WAITING_OPTION_END); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 83: break;
          case 40: 
            { yybegin(WAITING_DOCUMENTATION); return DOCUMENTATION_START;
            } 
            // fall through
          case 84: break;
          case 41: 
            { yybegin(WAITING_PROPERTY_VALUE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 85: break;
          case 42: 
            { yybegin(WAITING_PROPERTY_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 86: break;
          case 43: 
            { yybegin(WAITING_OPTION_VALUE_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 87: break;
          case 44: 
            { yybegin(WAITING_OPTION_END); return FLOAT_TOKEN;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
