// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CwtLexer.flex

package icu.windea.pls.cwt.psi;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static icu.windea.pls.cwt.psi.CwtElementTypes.*;


public class _CwtLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PROPERTY_KEY = 2;
  public static final int IN_PROPERTY_SEPARATOR = 4;
  public static final int IN_PROPERTY_VALUE = 6;
  public static final int EXPECT_NEXT = 8;
  public static final int IN_DOCUMENTATION = 10;
  public static final int IN_OPTION = 12;
  public static final int IN_OPTION_KEY = 14;
  public static final int IN_OPTION_SEPARATOR = 16;
  public static final int IN_OPTION_VALUE = 18;
  public static final int IN_OPTION_VALUE_TOP_STRING = 20;
  public static final int EXPECT_NEXT_OPTION = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\7\0\1\7\1\0\1\7\1\10\1\0"+
    "\12\11\2\0\1\12\1\13\1\14\35\0\1\15\10\0"+
    "\1\16\10\0\1\17\1\20\3\0\1\21\5\0\1\22"+
    "\1\0\1\23\1\0\1\24\7\0\1\3\32\0\1\1"+
    "\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\25";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\1\1\3\2\1\1\4\1\1"+
    "\1\5\2\1\1\6\1\7\1\10\1\11\1\10\1\3"+
    "\3\12\1\13\1\11\1\3\1\14\1\15\1\11\3\15"+
    "\1\16\1\15\1\17\2\15\1\20\1\21\2\22\2\12"+
    "\1\23\4\24\1\16\3\24\2\25\3\0\2\1\1\5"+
    "\1\0\1\26\1\27\1\5\1\30\1\1\1\10\1\0"+
    "\1\31\1\13\4\0\2\15\1\17\1\0\1\32\1\17"+
    "\1\33\1\15\1\22\1\0\1\34\1\23\2\24\1\17"+
    "\1\0\1\32\1\17\1\33\1\24\1\0\1\25\1\0"+
    "\1\35\1\0\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\u0134\0\u014a"+
    "\0\u0160\0\u0176\0\u0160\0\u018c\0\u01a2\0\u01b8\0\u01ce\0\u01a2"+
    "\0\u01a2\0\u01e4\0\u01fa\0\u0210\0\u0226\0\u01a2\0\u023c\0\u0252"+
    "\0\u0268\0\u027e\0\u0294\0\u02aa\0\u02c0\0\u02d6\0\u02ec\0\u0302"+
    "\0\u0318\0\u0302\0\u032e\0\u01a2\0\u0344\0\u035a\0\u01a2\0\u01a2"+
    "\0\u0370\0\u0386\0\u039c\0\u03b2\0\u03c8\0\u03de\0\u03f4\0\u040a"+
    "\0\u0420\0\u040a\0\u0436\0\u044c\0\u0462\0\u0478\0\u048e\0\u04a4"+
    "\0\u04ba\0\u04d0\0\u04a4\0\u04e6\0\u0134\0\u04fc\0\u0512\0\u0176"+
    "\0\u0108\0\u0108\0\u0528\0\u01a2\0\u053e\0\u01a2\0\u01a2\0\u0554"+
    "\0\u056a\0\u0580\0\u0596\0\u0554\0\u05ac\0\u02ec\0\u05c2\0\u0318"+
    "\0\u02c0\0\u02c0\0\u05d8\0\u01a2\0\u05ee\0\u01a2\0\u01a2\0\u0554"+
    "\0\u0604\0\u03f4\0\u061a\0\u0420\0\u03de\0\u03de\0\u0630\0\u0478"+
    "\0\u01a2\0\u0646\0\u01a2\0\u065c\0\u056a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\3\16\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\3\15\1\26\2\15\1\27\1\30\1\31"+
    "\1\15\1\32\3\33\1\32\1\34\1\35\4\32\1\36"+
    "\7\32\1\30\1\31\1\32\1\36\3\33\1\37\1\36"+
    "\1\35\3\36\1\40\1\41\7\36\1\30\1\31\1\36"+
    "\1\15\3\42\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\3\15\1\26\2\15\1\27\1\30\1\31"+
    "\1\15\1\36\3\33\2\36\1\43\14\36\1\30\1\31"+
    "\1\36\1\44\3\33\22\44\1\45\3\46\1\45\1\47"+
    "\1\43\1\50\1\51\1\52\1\53\1\54\3\45\1\55"+
    "\2\45\1\56\1\57\1\60\1\45\1\61\3\33\1\61"+
    "\1\62\1\43\4\61\1\36\7\61\1\57\1\60\1\61"+
    "\1\36\3\33\1\63\1\36\1\43\3\36\1\64\1\65"+
    "\7\36\1\57\1\60\1\36\1\66\3\46\1\66\1\67"+
    "\1\43\1\70\1\71\1\72\1\73\1\54\3\66\1\74"+
    "\2\66\1\75\1\57\1\60\1\66\1\76\3\33\1\76"+
    "\1\77\1\43\4\76\1\36\7\76\1\57\1\60\1\76"+
    "\1\36\3\33\2\36\1\43\14\36\1\57\1\60\1\36"+
    "\1\15\3\100\2\15\1\0\3\15\1\24\1\25\7\15"+
    "\2\0\1\15\1\0\3\16\1\101\5\0\1\102\1\25"+
    "\12\0\2\17\1\100\2\17\1\103\4\17\1\104\1\105"+
    "\1\17\1\106\10\17\2\43\1\0\3\43\1\107\17\43"+
    "\1\15\3\100\2\15\1\0\1\15\1\22\1\23\1\24"+
    "\1\25\7\15\2\0\2\15\3\100\2\15\1\0\2\15"+
    "\1\110\1\24\1\25\7\15\2\0\2\15\3\100\2\15"+
    "\1\0\3\15\1\24\1\25\1\111\6\15\2\0\1\15"+
    "\26\0\1\15\3\100\2\15\1\0\3\15\1\24\1\25"+
    "\4\15\1\112\2\15\2\0\2\15\3\100\2\15\1\0"+
    "\3\15\1\24\1\25\2\15\1\113\4\15\2\0\1\15"+
    "\1\32\3\0\2\32\1\0\4\32\1\0\7\32\2\0"+
    "\1\32\1\0\3\33\22\0\2\34\1\0\2\34\1\114"+
    "\7\34\1\115\10\34\2\43\1\0\3\43\1\0\17\43"+
    "\13\0\1\116\26\0\1\116\24\0\1\117\13\0\3\42"+
    "\1\101\5\0\1\102\1\25\12\0\2\43\1\0\23\43"+
    "\2\44\1\0\23\44\1\45\3\120\2\45\1\121\3\45"+
    "\1\53\1\54\7\45\2\0\1\45\1\0\3\46\1\122"+
    "\5\0\1\123\1\54\12\0\2\47\1\120\2\47\1\124"+
    "\4\47\1\125\1\126\1\47\1\127\10\47\1\45\3\120"+
    "\2\45\1\121\1\45\1\51\1\52\1\53\1\54\7\45"+
    "\2\0\2\45\3\120\2\45\1\121\2\45\1\130\1\53"+
    "\1\54\7\45\2\0\2\45\3\120\2\45\1\121\3\45"+
    "\1\53\1\54\1\131\6\45\2\0\2\45\3\120\2\45"+
    "\1\121\3\45\1\53\1\54\4\45\1\132\2\45\2\0"+
    "\2\45\3\120\2\45\1\121\3\45\1\53\1\54\2\45"+
    "\1\133\4\45\2\0\1\45\1\61\3\0\7\61\1\0"+
    "\7\61\2\0\1\61\2\62\1\0\2\62\1\134\7\62"+
    "\1\135\10\62\13\0\1\136\26\0\1\136\24\0\1\137"+
    "\12\0\1\66\3\120\2\66\1\121\3\66\1\73\1\54"+
    "\7\66\2\0\1\66\2\67\1\120\2\67\1\140\4\67"+
    "\1\141\1\142\1\67\1\143\10\67\1\66\3\120\2\66"+
    "\1\121\1\66\1\71\1\72\1\73\1\54\7\66\2\0"+
    "\2\66\3\120\2\66\1\121\2\66\1\144\1\73\1\54"+
    "\7\66\2\0\2\66\3\120\2\66\1\121\3\66\1\73"+
    "\1\54\1\145\6\66\2\0\2\66\3\120\2\66\1\121"+
    "\3\66\1\73\1\54\4\66\1\146\2\66\2\0\2\66"+
    "\3\120\2\66\1\121\3\66\1\73\1\54\2\66\1\147"+
    "\4\66\2\0\1\66\1\76\1\150\1\0\1\150\2\76"+
    "\1\0\4\76\1\0\7\76\2\0\1\76\2\77\1\0"+
    "\2\77\1\151\7\77\1\152\10\77\1\0\3\100\1\101"+
    "\5\0\1\102\1\25\25\0\1\25\26\0\1\25\11\0"+
    "\2\17\1\100\2\17\1\103\4\17\1\104\2\105\1\106"+
    "\12\17\2\0\21\17\7\0\1\153\17\0\1\15\3\100"+
    "\2\15\1\0\3\15\1\24\1\25\5\15\1\112\1\15"+
    "\2\0\1\15\2\34\2\0\21\34\2\0\3\120\1\122"+
    "\5\0\1\123\1\54\12\0\1\121\3\120\6\121\1\154"+
    "\1\54\7\121\2\0\1\121\13\0\1\54\26\0\1\54"+
    "\11\0\2\47\1\120\2\47\1\124\4\47\1\125\2\126"+
    "\1\127\12\47\2\0\21\47\1\0\1\45\3\120\2\45"+
    "\1\121\3\45\1\53\1\54\5\45\1\132\1\45\2\0"+
    "\1\45\2\62\2\0\21\62\1\0\2\67\1\120\2\67"+
    "\1\140\4\67\1\141\2\142\1\143\12\67\2\0\21\67"+
    "\1\0\1\66\3\120\2\66\1\121\3\66\1\73\1\54"+
    "\5\66\1\146\1\66\2\0\1\66\2\77\2\0\21\77"+
    "\1\0\1\121\3\120\6\121\1\154\1\54\1\155\6\121"+
    "\2\0\1\121";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1650];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\10\1\1\11\2\1\2\11\4\1\1\11\15\1"+
    "\1\11\2\1\2\11\17\1\3\0\3\1\1\0\5\1"+
    "\1\11\1\0\2\11\4\0\3\1\1\0\4\1\1\11"+
    "\1\0\2\11\3\1\1\0\4\1\1\0\1\11\1\0"+
    "\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private final Deque<Integer> stack = new ArrayDeque<>();
    private final Deque<Integer> optionStack = new ArrayDeque<>();
    
    public _CwtLexer() {
		this((java.io.Reader)null);
    }
    
	private void enterState(Deque<Integer> stack, int state) {
		stack.offerLast(state);
	}
	
	private void exitState(Deque<Integer> stack, int defaultState) {
		int state = stack.pollLast();
		if(stack != null) {
			yybegin(state);
		} else {
			yybegin(defaultState);
		}
	}
	
	private void processBlank() {
		boolean lineBreak = false;
		for (int i = 0; i < yylength(); i++) {
			char c = yycharat(i);
			if(c == '\r' || c == '\n') {
				lineBreak = true;
				break;
			}
		}
		if(lineBreak) {
			yybegin(YYINITIAL);
			optionStack.clear();
		} else {
			if(yystate() == EXPECT_NEXT) { 
				yybegin(YYINITIAL);
				optionStack.clear();
			} else if(yystate() == EXPECT_NEXT_OPTION) {
				yybegin(IN_OPTION);
			}
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CwtLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(EXPECT_NEXT); return STRING_TOKEN;
            }
          // fall through
          case 30: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 31: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 32: break;
          case 4:
            { yybegin(EXPECT_NEXT); return INT_TOKEN;
            }
          // fall through
          case 33: break;
          case 5:
            { yypushback(yylength()); yybegin(IN_PROPERTY_KEY);
            }
          // fall through
          case 34: break;
          case 6:
            { enterState(stack, YYINITIAL); return LEFT_BRACE;
            }
          // fall through
          case 35: break;
          case 7:
            { exitState(stack, YYINITIAL); return RIGHT_BRACE;
            }
          // fall through
          case 36: break;
          case 8:
            { yybegin(IN_PROPERTY_SEPARATOR); return PROPERTY_KEY_TOKEN;
            }
          // fall through
          case 37: break;
          case 9:
            { processBlank(); return WHITE_SPACE;
            }
          // fall through
          case 38: break;
          case 10:
            { return BAD_CHARACTER;
            }
          // fall through
          case 39: break;
          case 11:
            { yybegin(IN_PROPERTY_VALUE); return EQUAL_SIGN;
            }
          // fall through
          case 40: break;
          case 12:
            { yybegin(YYINITIAL); return DOCUMENTATION_TOKEN;
            }
          // fall through
          case 41: break;
          case 13:
            { if(optionStack.isEmpty()){
      	    yypushback(yylength()); yybegin(IN_OPTION_VALUE_TOP_STRING);
     	} else {
      	    yybegin(EXPECT_NEXT_OPTION); return STRING_TOKEN;
    	}
            }
          // fall through
          case 42: break;
          case 14:
            { yybegin(EXPECT_NEXT_OPTION); return INT_TOKEN;
            }
          // fall through
          case 43: break;
          case 15:
            { yypushback(yylength()); yybegin(IN_OPTION_KEY);
            }
          // fall through
          case 44: break;
          case 16:
            { enterState(optionStack, IN_OPTION); return LEFT_BRACE;
            }
          // fall through
          case 45: break;
          case 17:
            { exitState(optionStack, IN_OPTION); return RIGHT_BRACE;
            }
          // fall through
          case 46: break;
          case 18:
            { yybegin(IN_OPTION_SEPARATOR); return OPTION_KEY_TOKEN;
            }
          // fall through
          case 47: break;
          case 19:
            { yybegin(IN_OPTION_VALUE); return EQUAL_SIGN;
            }
          // fall through
          case 48: break;
          case 20:
            { if(optionStack.isEmpty()){
      	    yypushback(yylength()); yybegin(IN_OPTION_VALUE_TOP_STRING);
     	} else {
      	    yybegin(EXPECT_NEXT_OPTION); return STRING_TOKEN;
        }
            }
          // fall through
          case 49: break;
          case 21:
            { yybegin(EXPECT_NEXT_OPTION); return STRING_TOKEN;
            }
          // fall through
          case 50: break;
          case 22:
            { yybegin(IN_OPTION); return OPTION_START;
            }
          // fall through
          case 51: break;
          case 23:
            { yybegin(EXPECT_NEXT); return FLOAT_TOKEN;
            }
          // fall through
          case 52: break;
          case 24:
            { yybegin(EXPECT_NEXT); return BOOLEAN_TOKEN;
            }
          // fall through
          case 53: break;
          case 25:
            { yybegin(IN_PROPERTY_VALUE); return NOT_EQUAL_SIGN;
            }
          // fall through
          case 54: break;
          case 26:
            { yybegin(EXPECT_NEXT_OPTION); return FLOAT_TOKEN;
            }
          // fall through
          case 55: break;
          case 27:
            { yybegin(EXPECT_NEXT_OPTION); return BOOLEAN_TOKEN;
            }
          // fall through
          case 56: break;
          case 28:
            { yybegin(IN_OPTION_VALUE); return NOT_EQUAL_SIGN;
            }
          // fall through
          case 57: break;
          case 29:
            { yybegin(IN_DOCUMENTATION); return DOCUMENTATION_START;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
