types = {
	## type_key_filter <> { types template }
	type[window] = {
        path = "game/gui"
		severity = warning
	}
    type[gui_type] = {
        skip_root_key = { types }
        path = "game/gui"
        severity = warning
    }
    ## type_key_filter = { template local_template }
    type[gui_template] = {
        path = "game/gui"
        severity = warning
    }
}

single_alias[coords] = {
    ## cardinality = 2..2
    int
}
# TODO: group cardinality
single_alias[percent_coords] = {
    ## cardinality = 0..2
    percentage_field
    ## cardinality = 0..2
    int
}

enums = {
    enum[gui_direction] = {
        top|left
        top|right
        top|hcenter
        bottom|left
        bottom|right
        bottom|hcenter
        center
        center|hcenter
        right
        right|vcenter
        left
        left|vcenter
        hcenter
        hcenter|vcenter
        vertical
        vcenter|hcenter
        vcenter|left
        vcenter|right
    }
    enum[gui_align_direction] = {
        left
        right
        center
        top
        vcenter|hcenter
        nobaseline
        center|nobaseline
        left|top
    }
    enum[gui_layer] = {
        windows_layer
        confirmation
        top
        middle
        bottom
        frontend
        bottom_bottom
    }

    enum[gui_spriteType] = {
        Corneredtiled
        Corneredstretched
    }
    enum[gui_blend_mode] = {
        overlay
        alphamultiply
        colordodge
    }
    enum[gui_gfx_type] = {
        updownframedbuttongfx
        icongfx
        buttongfx
        framedbuttongfx
        togglepushbuttongfx
        coatofarmsgfx
        editboxgfx
        propstretchedicongfx
        windowgfx
        progressbargfx
        checkbuttongfx
        coatofarmsbuttongfx
        progresspiegfx
        webwindowgfx
        linegfx
    }
    enum[gui_font] = {
        TitleFont
        StandardGameFont
        standard_font
        CountyBanner
        SignatureFont
    }
    enum[gui_text_format] = {
        "#dark"
        "#white"
        "#medium"
        "#clickable"
        "#black"
        "#white;italic"
    }
    enum[gui_layout_policy] = {
        expanding
        fixed
        growing
    }
    enum[gui_card_dir] = {
        horizontal
    }
    enum[gui_hardcoded] = {
        margin_widget
        # Not really a type, only in scrollarea
        scrollwidget
        scrollbar_vertical
        overlappingitembox
        fixedgridbox
        tooltipwidget
    }
    enum[gui_mouse_filters] = {
        all
        left
        right
        left|right
        none
    }
    enum[gui_scrollbarpolicy] = {
        always_off
        as_needed
    }
    enum[gui_mirror] = {
        vertical
        horizontal
    }
    enum[gui_tooltip_behaviour] = {
        slide
        mirror
    }
}


alias[gui:<gui_type>] = {
    ## cardinality = 0..1
    name = localisation
    ## cardinality = 0..inf
    using = <gui_template>
    ## cardinality = 0..1
	size = single_alias_right[coords]
    ## cardinality = 0..1
	size = single_alias_right[percent_coords]
    ## cardinality = 0..1
    layoutpolicy_horizontal = enum[gui_layout_policy]
    ## cardinality = 0..1
    layoutpolicy_vertical = enum[gui_layout_policy]
    ## cardinality = 0..1
	parentanchor = enum[gui_direction]
    ## cardinality = 0..1
	widgetanchor = enum[gui_direction]
    ## cardinality = 0..1
	position = single_alias_right[coords]
    ## cardinality = 0..1
    movable = bool
    ## cardinality = 0..1
    spacing = int
    ## cardinality = 0..1
    ignoreinvisible = bool
    ## cardinality = 0..1
    minimumsize = single_alias_right[coords]
    ## cardinality = 0..1
    scissor = yes
    ## cardinality = 0..1
    # TODO: gui loc string
    datamodel = scalar
    ## cardinality = 0..1
    # TODO: gui loc string
    tooltip = scalar
    ## cardinality = 0..inf
    # TODO: gui loc string
    datacontext = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    visible = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    enabled = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    onclick = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    onrightclick = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    down = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    tooltip_enabled = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    text = localisation
    ## cardinality = 0..1
    default_format = enum[gui_text_format]
    ## cardinality = 0..1
    multiline = yes
    ## cardinality = 0..1
    autoresize = yes
    ## cardinality = 0..1
    align = enum[gui_align_direction]
    ## cardinality = 0..1
    max_width = int
    ## cardinality = 0..1
    min_width = int
    ## cardinality = 0..1
    set_parent_size_to_minimum = yes
    ## cardinality = 0..1
    direction = enum[gui_direction]
    ## cardinality = 0..1
    texture = filepath
    # TODO: gui loc string
    ## cardinality = 0..1
    texture = scalar
    ## cardinality = 0..1
    portrait_scale = single_alias_right[coords]
    ## cardinality = 0..1
    portrait_offset = single_alias_right[coords]
    ## cardinality = 0..1
    alwaystransparent = bool
    ## cardinality = 0..1
    resizable = bool
    ## cardinality = 0..1
    allow_outside = bool
    ## cardinality = 0..1
    shaderfile = filepath
    ## cardinality = 0..1
    #TODO : sound
    oversound = scalar
    ## cardinality = 0..1
    #TODO : sound
    clicksound = scalar
    ## cardinality = 0..1
    gfxtype = enum[gui_gfx_type]
    ## cardinality = 0..1
    ignoreinvisible = bool
    # TODO: gui loc string
    ## cardinality = 0..1
    tintcolor = scalar

    ## cardinality = 0..1
    alpha = float
    ## cardinality = 0..1
    filter_mouse = enum[gui_mouse_filters]
    ## cardinality = 0..inf
    state = {
        name = localisation
        ## cardinality = 0..inf
        using = <gui_template>
        ## cardinality = 0..1
        position = single_alias_right[coords]
        # TODO: gui loc string
        ## cardinality = 0..inf
        on_start = scalar
        ## cardinality = 0..1
        position_x = int
    }

    #BACKGROUND
    ## cardinality = 0..1
    spriteType = enum[gui_spriteType]
    ## cardinality = 0..1
    color = {
        ## cardinality = 3..4
        float
    }
    # TODO: gui loc string
    ## cardinality= 0..1
    color = scalar
    ## cardinality = 0..inf
    modify_texture = {
        ## cardinality = 0..1
        texture = filepath
        ## cardinality = 0..1
        blend_mode = enum[gui_blend_mode]
        ## cardinality = 0..1
        name = scalar
        ## cardinality = 0..1
        spriteType = enum[gui_spriteType]
        ## cardinality = 0..1
        alpha = float
        alias_name[spriteborder] = alias_match_left[spriteborder]
    }
    ## cardinality = 0..1
    spriteborder = single_alias_right[coords]

    #TEXT
    ## cardinality = 0..1
    fontsize = int
    # TODO: gui loc string
    ## cardinality = 0..1
    fonttintcolor = scalar
    ## cardinality = 0..1
    font = enum[gui_font]

    #SCROLLAREA
    ## cardinality = 0..1
    scrollbarpolicy_horizontal = enum[gui_scrollbarpolicy]
    ## cardinality = 0..1
    autoresizescrollarea = bool

    #BUTTON
    ## cardinality = 0..1
    frame = int
    # TODO: gui loc string
    ## cardinality = 0..1
    frame = scalar
    ## cardinality = 0..1
    framesize = single_alias_right[coords]
    ## cardinality = 0..1
    mirror = enum[gui_mirror]
    ## cardinality = 0..1
    #TODO: shader
    effectname = scalar
    alias_name[buttonframe] = alias_match_left[buttonframe]
    ## cardinality = 0..1
    shortcut = scalar

    ## cardinality = 0..inf
    item = {
        alias_name[gui] = alias_match_left[gui]
    }
    alias_name[spriteborder] = alias_match_left[spriteborder]
    alias_name[margin] = alias_match_left[margin]
    alias_name[gui] = alias_match_left[gui]
    alias_name[tooltip] = alias_match_left[tooltip]
    ## cardinality = 0..inf
    clause_single_alias[blockoverride] = single_alias_right[all_gui]
    ## cardinality = 0..inf
    clause_single_alias[block] = single_alias_right[all_gui]

}

alias[gui:enum[gui_hardcoded]] = {
    ## cardinality = 0..1
    name = localisation
    ## cardinality = 0..inf
    using = <gui_template>
    ## cardinality = 0..1
	size = single_alias_right[coords]
    ## cardinality = 0..1
	size = single_alias_right[percent_coords]
    ## cardinality = 0..1
    layoutpolicy_horizontal = enum[gui_layout_policy]
    ## cardinality = 0..1
    layoutpolicy_vertical = enum[gui_layout_policy]
    ## cardinality = 0..1
	parentanchor = enum[gui_direction]
    ## cardinality = 0..1
	widgetanchor = enum[gui_direction]
    ## cardinality = 0..1
	position = single_alias_right[coords]
    ## cardinality = 0..1
    movable = bool
    ## cardinality = 0..1
    spacing = int
    ## cardinality = 0..1
    ignoreinvisible = bool
    ## cardinality = 0..1
    minimumsize = single_alias_right[coords]
    ## cardinality = 0..1
    scissor = yes
    ## cardinality = 0..1
    # TODO: gui loc string
    datamodel = scalar
    ## cardinality = 0..1
    # TODO: gui loc string
    tooltip = scalar
    ## cardinality = 0..inf
    # TODO: gui loc string
    datacontext = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    visible = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    enabled = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    onclick = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    onrightclick = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    down = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    tooltip_enabled = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    text = localisation
    ## cardinality = 0..1
    default_format = enum[gui_text_format]
    ## cardinality = 0..1
    multiline = yes
    ## cardinality = 0..1
    autoresize = yes
    ## cardinality = 0..1
    align = enum[gui_align_direction]
    ## cardinality = 0..1
    max_width = int
    ## cardinality = 0..1
    min_width = int
    ## cardinality = 0..1
    set_parent_size_to_minimum = yes
    ## cardinality = 0..1
    direction = enum[gui_direction]
    ## cardinality = 0..1
    texture = filepath
    # TODO: gui loc string
    ## cardinality = 0..1
    texture = scalar
    ## cardinality = 0..1
    portrait_scale = single_alias_right[coords]
    ## cardinality = 0..1
    portrait_offset = single_alias_right[coords]
    ## cardinality = 0..1
    alwaystransparent = bool
    ## cardinality = 0..1
    resizable = bool
    ## cardinality = 0..1
    alpha = float
    ## cardinality = 0..1
    filter_mouse = enum[gui_mouse_filters]
    ## cardinality = 0..1
    allow_outside = bool
    ## cardinality = 0..1
    shaderfile = filepath
    ## cardinality = 0..1
    #TODO : sound
    oversound = scalar
    ## cardinality = 0..1
    #TODO : sound
    clicksound = scalar
    ## cardinality = 0..1
    gfxtype = enum[gui_gfx_type]
    ## cardinality = 0..1
    ignoreinvisible = bool
    # TODO: gui loc string
    ## cardinality = 0..1
    tintcolor = scalar

    #BACKGROUND
    ## cardinality = 0..1
    spriteType = enum[gui_spriteType]
    ## cardinality = 0..1
    color = {
        ## cardinality = 3..4
        float
    }
    # TODO: gui loc string
    ## cardinality= 0..1
    color = scalar
    ## cardinality = 0..inf
    modify_texture = {
        ## cardinality = 0..1
        texture = filepath
        ## cardinality = 0..1
        blend_mode = enum[gui_blend_mode]
        ## cardinality = 0..1
        name = scalar
        ## cardinality = 0..1
        spriteType = enum[gui_spriteType]
        ## cardinality = 0..1
        alpha = float
        alias_name[spriteborder] = alias_match_left[spriteborder]
    }
    ## cardinality = 0..1
    spriteborder = single_alias_right[coords]

    #TEXT
    ## cardinality = 0..1
    fontsize = int
    # TODO: gui loc string
    ## cardinality = 0..1
    fonttintcolor = scalar
    ## cardinality = 0..1
    font = enum[gui_font]

    #SCROLLAREA
    ## cardinality = 0..1
    scrollbarpolicy_horizontal = enum[gui_scrollbarpolicy]
    ## cardinality = 0..1
    autoresizescrollarea = bool

    #BUTTON
    ## cardinality = 0..1
    frame = int
    # TODO: gui loc string
    ## cardinality = 0..1
    frame = scalar
    ## cardinality = 0..1
    framesize = single_alias_right[coords]
    ## cardinality = 0..1
    mirror = enum[gui_mirror]
    ## cardinality = 0..1
    #TODO: shader
    effectname = scalar
    alias_name[buttonframe] = alias_match_left[buttonframe]
    ## cardinality = 0..1
    shortcut = scalar

    ## cardinality = 0..inf
    state = {
        name = localisation
        ## cardinality = 0..inf
        using = <gui_template>
        ## cardinality = 0..1
        position = single_alias_right[coords]
        # TODO: gui loc string
        ## cardinality = 0..inf
        on_start = scalar
        ## cardinality = 0..1
        position_x = int
    }

    ## cardinality = 0..inf
    item = {
        alias_name[gui] = alias_match_left[gui]
    }
    alias_name[spriteborder] = alias_match_left[spriteborder]
    alias_name[margin] = alias_match_left[margin]
    alias_name[gui] = alias_match_left[gui]
    ## cardinality = 0..inf
    clause_single_alias[blockoverride] = single_alias_right[all_gui]
    ## cardinality = 0..inf
    clause_single_alias[block] = single_alias_right[all_gui]
    alias_name[tooltip] = alias_match_left[tooltip]

}


window = single_alias_right[all_gui]
gui_type = single_alias_right[all_gui]
gui_template = single_alias_right[all_gui]


single_alias[all_gui] = {
    ## cardinality = 0..1
    name = localisation
    ## cardinality = 0..1
    widgetid = scalar
    ## cardinality = 0..1
	size = single_alias_right[coords]
    ## cardinality = 0..1
	size = single_alias_right[percent_coords]
    # datacontext = "[CreateClaimantFactionAgainstWindow.GetCharacterInteractionConfirmationWindow]"
    ## cardinality = 0..inf
	datacontext = scalar
    ## cardinality = 0..1
	parentanchor = enum[gui_direction]
    ## cardinality = 0..1
	widgetanchor = enum[gui_direction]
    ## cardinality = 0..1
	position = single_alias_right[coords]
    ## cardinality = 0..1
    movable = bool
    ## cardinality = 0..1
    allow_outside = bool
    ## cardinality = 0..1
	layer = enum[gui_layer]
    # TODO: gui loc string
    ## cardinality = 0..1
    visible = scalar
    ## cardinality = 0..1
    layoutpolicy_horizontal = enum[gui_layout_policy]
    ## cardinality = 0..1
    layoutpolicy_vertical = enum[gui_layout_policy]

    ## cardinality = 0..inf
    using = <gui_template>
    # TODO: gui loc string
    ## cardinality = 0..1
    enabled = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    onclick = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    onrightclick = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    down = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    tooltip_enabled = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    text = localisation
    ## cardinality = 0..1
    default_format = enum[gui_text_format]
    ## cardinality = 0..1
    multiline = yes
    ## cardinality = 0..1
    autoresize = yes
    ## cardinality = 0..1
    align = enum[gui_align_direction]
    ## cardinality = 0..1
    max_width = int
    ## cardinality = 0..1
    min_width = int
    ## cardinality = 0..1
    set_parent_size_to_minimum = yes
    ## cardinality = 0..1
    direction = enum[gui_direction]
    ## cardinality = 0..1
    texture = filepath
    # TODO: gui loc string
    ## cardinality = 0..1
    texture = scalar
    ## cardinality = 0..1
    portrait_scale = single_alias_right[coords]
    ## cardinality = 0..1
    portrait_offset = single_alias_right[coords]
    ## cardinality = 0..1
    alwaystransparent = bool
    ## cardinality = 0..1
    resizable = bool
    ## cardinality = 0..1
    allow_outside = bool

    ## cardinality = 0..1
    alpha = float
    ## cardinality = 0..1
    filter_mouse = enum[gui_mouse_filters]
    ## cardinality = 0..1
    shaderfile = filepath
    ## cardinality = 0..1
    #TODO : sound
    oversound = scalar
    ## cardinality = 0..1
    #TODO : sound
    clicksound = scalar
    ## cardinality = 0..1
    gfxtype = enum[gui_gfx_type]
    ## cardinality = 0..1
    ignoreinvisible = bool
    # TODO: gui loc string
    ## cardinality = 0..1
    tintcolor = scalar

    #BACKGROUND
    ## cardinality = 0..1
    spriteType = enum[gui_spriteType]
    ## cardinality = 0..1
    color = {
        ## cardinality = 3..4
        float
    }
    # TODO: gui loc string
    ## cardinality= 0..1
    color = scalar
    ## cardinality = 0..inf
    modify_texture = {
        ## cardinality = 0..1
        texture = filepath
        ## cardinality = 0..1
        blend_mode = enum[gui_blend_mode]
        ## cardinality = 0..1
        name = scalar
        ## cardinality = 0..1
        spriteType = enum[gui_spriteType]
        ## cardinality = 0..1
        alpha = float
        alias_name[spriteborder] = alias_match_left[spriteborder]
    }
    ## cardinality = 0..1
    spriteborder = single_alias_right[coords]

    #TEXT
    ## cardinality = 0..1
    fontsize = int
    # TODO: gui loc string
    ## cardinality = 0..1
    frame = scalar
    # TODO: gui loc string
    ## cardinality = 0..1
    fonttintcolor = scalar
    ## cardinality = 0..1
    font = enum[gui_font]

    #SCROLLAREA
    ## cardinality = 0..1
    scrollbarpolicy_horizontal = enum[gui_scrollbarpolicy]
    ## cardinality = 0..1
    autoresizescrollarea = bool

    #BUTTON
    ## cardinality = 0..1
    frame = int
    ## cardinality = 0..1
    framesize = single_alias_right[coords]
    ## cardinality = 0..1
    mirror = enum[gui_mirror]
    ## cardinality = 0..1
    #TODO: shader
    effectname = scalar
    alias_name[buttonframe] = alias_match_left[buttonframe]
    ## cardinality = 0..1
    shortcut = scalar

    ## cardinality = 0..inf
    state = {
        name = localisation
        ## cardinality = 0..inf
        using = <gui_template>
        ## cardinality = 0..1
        position = single_alias_right[coords]
        # TODO: gui loc string
        ## cardinality = 0..inf
        on_start = scalar
        ## cardinality = 0..1
        position_x = int
    }
    ## cardinality = 0..1
    filter_mouse = all
    #window = single_alias_right[window]
    # vbox = single_alias_right[vbox1]
    # hbox = single_alias_right[hbox1]
    alias_name[margin] = alias_match_left[margin]
    alias_name[spriteborder] = alias_match_left[spriteborder]
    alias_name[gui] = alias_match_left[gui]
    alias_name[tooltip] = alias_match_left[tooltip]

}

alias[margin:margin_left] = int
alias[margin:margin_right] = int
alias[margin:margin_top] = int
alias[margin:margin_bottom] = int
alias[margin:margin] = single_alias_right[coords]
alias[spriteborder:spriteborder_left] = int
alias[spriteborder:spriteborder_right] = int
alias[spriteborder:spriteborder_top] = int
alias[spriteborder:spriteborder_bottom] = int
alias[spriteborder:spriteborder] = single_alias_right[coords]
alias[buttonframe:upframe] = int
alias[buttonframe:uphoverframe] = int
alias[buttonframe:uppressedframe] = int
alias[buttonframe:downframe] = int
alias[buttonframe:downhoverframe] = int
alias[buttonframe:downpressedframe] = int
alias[buttonframe:overframe] = int
alias[buttonframe:disableframe] = int
alias[tooltip:tooltip_parentanchor] = enum[gui_direction]
alias[tooltip:tooltip_widgetanchor] = enum[gui_direction]
alias[tooltip:tooltip_type] = widget
alias[tooltip:tooltip_verticalbehavior] = enum[gui_tooltip_behaviour]
alias[tooltip:tooltip_horizontalbehavior] = enum[gui_tooltip_behaviour]