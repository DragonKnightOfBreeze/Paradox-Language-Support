types = {
	type[equipment] = {
		skip_root_key = equipments
		path = "game/common/units/equipment"
		subtype[archetype_equip] = {
			is_archetype = yes
		}
		subtype[regular_equip] = {
			## cardinality = 0..1
			is_archetype = no
		}
		subtype[naval_equip] = {
			## cardinality = 0..1
			type = enum[ship_units]
			## cardinality = 0..1
			type = {
				## cardinality = 1..inf
				enum[ship_units]
			}
			## cardinality = 0..1
			archetype = <equipment.naval_equip>
		}
		subtype[air_equip] = {
			## cardinality = 0..1
			type = enum[air_units]
			## cardinality = 0..1
			type = {
				## cardinality = 1..inf
				enum[air_units]
			}
			## cardinality = 0..1
			archetype = <equipment.air_equip>
		}
	}
	type[upgrade] = {
		skip_root_key = upgrades
		path = "game/common/units/equipment/upgrades"
		subtype[naval_upgrade] = {
			cost = naval
		}
		subtype[air_upgrade] = {
			cost = air
		}
		subtype[land_upgrade] = {
			cost = land
		}
	}
	type[module] = {
		skip_root_key = equipment_modules
		path = "game/common/units/equipment/modules"
	}
	type[critical_part] = {
		skip_root_key = critical_parts
		path = "game/common/units/critical_parts"
	}
}

equipment = {
	## cardinality = 0..1
	### Limits the equipment from appearing before the specified year. Optional.
	year = int

	## cardinality = 0..1
	### Specifies an entry as an archetype entry. All non-archetype entries inherit.
	is_archetype = bool

	## cardinality = 0..1
	### Prevents this equipment from being built.
	is_buildable = bool

	## cardinality = 0..1
	is_convertable = bool

	## cardinality = 0..1
	### Determines if this equipment is available without unlocking from a technology.
	active = bool

	## cardinality = 0..1
	can_license = bool
	## cardinality = 0..1
	sprite = scalar # enum[unit_sprites]
	## cardinality = 0..1
	alias = <unit>

	### Which category the equipment appears in the production screen.
	## cardinality = 0..1
	interface_category = enum[interface_category]

	### Priority for usage over other equipment.
	## cardinality = 0..1
	priority = int
	## cardinality = 0..1
	priority = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	subtype[archetype_equip] = {
		### GFX reference used to define equipment picture in land-lease.
		picture = scalar

		### How the equipment is grouped in the production screen.
		group_by = enum[equip_group_by]

		## cardinality = 0..1
		family = <equipment.archetype_equip>

		interface_category = enum[interface_category]

		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		can_be_produced = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	subtype[air_equip] = {
		## cardinality = 0..1
		carrier_capable = yes
		air_map_icon_frame = int
		interface_overview_category_index = int
	}

	subtype[regular_equip] = {
		### Which archetype equipment this equipment inherits from.
		archetype = <equipment.archetype_equip>

		## cardinality = 0..1
		### Which equipment is parent to this equipment (i.e. which does it supercede).
		parent = <equipment.regular_equip>

		## cardinality = 0..1
		### Image priority in production screen.
		visual_level = int

		## cardinality = 0..1
		one_use_only = bool
		## cardinality = 0..1
		family = <equipment.regular_equip>
		## cardinality = 0..1
		can_convert_from = {
			## cardinality = 1..5
			<equipment.regular_equip>
		}
	}

	subtype[naval_equip] = {
		## cardinality = 0..1
		visual_tech_level_addition = int
		## cardinality = 0..1
		model = scalar

		## cardinality = 0..1
		### List of module slots and their details.
		module_slots = {
			## cardinality = 0..inf
			enum[module_slots] = {
				required = bool
				allowed_module_categories = {
					## cardinality = 1..inf
					enum[module_categories]
				}
				## cardinality = 0..1
				gfx = scalar
			}
			## cardinality = 0..inf
			enum[module_slots] = enum[module_slots]
			## cardinality = 0..inf
			enum[module_slots] = inherit
		}

		## cardinality = 0..1
		### All parent module slots will directly inherited with no modifications.
		module_slots = inherit

		## cardinality = 0..inf
		### Any number of module count limits can be specified. They are automatically inherited by child equipment types. An inherited limit is overridden if the child has a limit with exactly the same match conditions.
		module_count_limit = {
			## cardinality = 0..1
			category = enum[module_categories]
			## cardinality = 0..1
			module = <module>
			count = int
		}

		### List of modules assigned to module slots for the default equipment variant for this type.
		default_modules = {
			## cardinality = 0..inf
			enum[module_slots] = <module>
			## cardinality = 0..inf
			enum[module_slots] = empty
		}
	}

	## cardinality = 0..1
	### Internal type: what kind of unit can use this equipment.
	type = enum[unit_types]

	## cardinality = 0..1
	### Internal type: what kind of unit can use this equipment.
	type = {
		## cardinality = 1..inf
		enum[unit_types]
	}

	alias_name[unit_stat] = alias_match_left[unit_stat]
	alias_name[naval_stat] = alias_match_left[naval_stat]
	alias_name[air_stat] = alias_match_left[air_stat]
	## cardinality = 0..1
	offensive_weapons = bool

	## cardinality = 0..1
	### Resources needed for producing one unit of the equipment..
	resources = {
		## cardinality = ~1..inf
		<resource> = int
	}

	## cardinality = 0..3
	### List of upgrade names.
	upgrades = {
		## cardinality = ~1..4
		<upgrade>
	}
}

upgrade = {
	max_level = int
	alias_name[unit_stat] = alias_match_left[unit_stat]
	subtype[naval_upgrade] = {
		cost = naval
		alias_name[naval_stat] = alias_match_left[naval_stat]
	}
	subtype[air_upgrade] = {
		cost = air
		alias_name[air_stat] = alias_match_left[air_stat]
	}
	subtype[land_upgrade] = {
		cost = land
	}
}

module = {
	category = enum[module_categories]
	## cardinality = 0..1
	gui_category = enum[module_categories]
	## cardinality = 0..1
	parent = <module>
	## cardinality = 0..1
	gfx = scalar
	## cardinality = 0..1
	sfx = scalar
	## cardinality = 0..1
	add_equipment_type = enum[unit_types]
	add_stats = {
		alias_name[unit_stat] = alias_match_left[naval_stat]
		alias_name[naval_stat] = alias_match_left[naval_stat]
		## cardinality = 0..1
		build_cost_ic = int
	}

	## cardinality = 0..1
	### Manpower required to produce one unit of the equipment (naval only).
	manpower = int

	## cardinality = 0..1
	build_cost_resources = {
		## cardinality = 0..10
		<resource> = int
	}
	## cardinality = 0..1
	add_average_stats = {
		alias_name[unit_stat] = alias_match_left[naval_stat]
		alias_name[naval_stat] = alias_match_left[naval_stat]
	}
	## cardinality = 0..10
	multiply_stats = {
		alias_name[unit_stat] = alias_match_left[naval_stat]
		alias_name[naval_stat] = alias_match_left[naval_stat]
	}

	## cardinality = 0..10
	can_convert_from = {
		## cardinality = 0..1
		module_category = enum[module_categories]
		## cardinality = 0..1
		module = <module>
		convert_cost_ic = int
		## cardinality = 0..1
		convert_cost_resources = {
			## cardinality = ~1..10
			<resource> = int
		}
	}
	## cardinality = 0..1
	critical_parts = {
		<critical_part>
	}
	## cardinality = 0..1
	dismantle_cost_ic = int
	## cardinality = 0..1
	dismantle_cost_resources = {
		## cardinality = ~1..10
		<resource> = int
	}
}

critical_part = {
	## severity = warning
	icon = <spriteType>
	frame = int
	## cardinality = 0..1
	stat_penalties = {
		alias_name[naval_stat] = alias_match_left[naval_stat]
	}
	## cardinality = 0..1
	modifier = {
		## cardinality = ~1..inf
		alias_name[naval_stat] = alias_match_left[naval_stat]
	}
	## cardinality = 0..1
	str_damage = float
	## cardinality = 0..1
	org_damage = float
	## cardinality = 0..1
	str_damage_multiplier = float
	## cardinality = 0..1
	org_damage_multiplier = float
	## cardinality = 0..1
	chance = float
	## cardinality = 0..1
	base_damage_instance = float
	## cardinality = 0..1
	damage_instance_per_added_module = float
	## cardinality = 0..1
	max_damage_instance = float
}

enums = {
	enum[equip_group_by] = {
		archetype
		type
	}
	enum[interface_category] = {
		interface_category_land
		interface_category_armor
		interface_category_capital_ships
		interface_category_screen_ships
		interface_category_other_ships
		interface_category_air
	}
	complex_enum[module_slots] = {
		path = "game/common/units/equipment"
		name = {
			scalar = {
				module_slots = {
					enum_name = scalar
					enum_name = {
					}
				}
			}
		}
	}
	complex_enum[module_categories] = {
		path = "game/common/units/equipment/modules"
		name = {
			scalar = {
				category = enum_name
			}
		}
	}
}
