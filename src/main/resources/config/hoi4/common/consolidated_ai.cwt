types = {
	type[ai_area] = {
		path = "game/common/ai_areas"
		skip_root_key = areas
	}
	type[ai_focus] = {
		path = "game/common/ai_focuses"
		subtype[research] = {
			research = {

			}
		}
		subtype[national_focuses] = {
			ai_national_focuses = {
				## cardinality = 0..inf
				<focus>
				## cardinality = 0..inf
				<shared_focus>
			}
		}
	}
	type[ai_peace] = {
		path = "game/common/ai_peace"
	}
	type[ai_template] = {
		path = "game/common/ai_templates"
	}
	type[ai_equipment_design_group] = {
		path = "game/common/ai_equipment"
	}
	type[ai_equipment_design] = {
		path = "game/common/ai_equipment"
		skip_root_key = any
		subtype[design] = {
			target_variant = {

			}
		}
	}
}
	# complex_enum[ai_equipment_design] = {
	# 	path = "game/common/ai_equipment"
	# 	name = {
	# 		enum_name = {
	# 			target_variant = {
	# 			}
	# 		}
	# 	}
	# }

ai_area = {
	## cardinality = 0..1
	continents = {
		## cardinality = 1..inf
		enum[continents]
	}
	## cardinality = 0..1
	strategic_regions = {
		## cardinality = ~1..inf
		<strategic_region>
	}
}

ai_focus = {
	subtype[research] = {
		research = {
			## cardinality = 0..inf
			enum[ai_research_areas] = float
			## cardinality = 0..inf
			enum[tech_category] = float
		}
	}
	subtype[national_focuses] = {
		ai_national_focuses = {
			## cardinality = 0..inf
			<focus>
			## cardinality = 0..inf
			<shared_focus>
		}
	}

}

## replace_scope = { this = country root = country from = country }
ai_peace = {
	enable = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	annex_randomness = int
	liberate_randomness = int
	puppet_randomness = int
	take_states_randomness = int
	force_government_randomness = int

	## cardinality = 0..1
	build_temp_vars = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	# ROOT = Taker, FROM = Giver
	annex = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Liberated
	liberate = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Giver
	puppet = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Giver
	puppet_all = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## replace_scope = { this = state root = state from = country fromfrom = country}
	# ROOT = STATE, FROM = Taker, FROM.FROM = Giver
	puppet_state = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## replace_scope = { this = country root = country from = state }
	# ROOT = Taker, FROM = State
	take_states = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Giver
	force_government = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

ai_template = {
	roles = {
		## cardinality = ~1..inf
		value_set[ai_roles]
	}
	# Restricts the template to only the specified tags. Optional.
	## cardinality = 0..1
	available_for = {
		## cardinality = ~1..inf
		enum[country_tags]
	}

	# Blocks the template for the specified tags. Optional.
	## cardinality = 0..1
	blocked_for = {
		## cardinality = ~1..inf
		enum[country_tags]
	}

	match_to_count = float

	upgrade_prio = {
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 1..10
	scalar = {
		upgrade_prio = {
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		production_prio = {
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		can_upgrade_in_field = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		custom_icon = int
		## cardinality = 0..1
		reinforce_prio = int

		target_width = float
		width_weight = float
		column_swap_factor = float

		### List of triggers that must all be true for the template to be usable; true by default if empty or missing.
		## cardinality = 0..1
		enable = {
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		stat_weights = {
			## cardinality = 33..33
			float

			#<float> #-- default_morale
			#<float> #-- defense
			#<float> #-- breakthrough
			#<float> #-- hardness
			#<float> #-- soft_attack
			#<float> #-- hard_attack
			#<float> #-- recon
			#<float> #-- entrenchment
			#<float> #-- initiative
			#<float> #-- casualty_trickleback
			#<float> #-- supply_consumption_factor
			#<float> #-- supply_consumption
			#<float> #-- suppression
			#<float> #-- suppression_factor
			#<float> #-- experience_loss_factor
			#<float> #-- equipment_capture_factor
			#<float> #-- fuel_capacity

			#-- Air Values
			#<float> #-- air_attack

			#-- Common Values
			#<float> #-- max_organisation
			#<float> #-- max_strength
			#<float> #-- maximum_speed
			#<float> #-- armor_value
			#<float> #-- ap_attack
			#<float> #-- reliability
			#<float> #-- reliability_factor
			#<float> #-- weight
			#<float> #-- fuel_consumption
			#<float> #-- fuel_consumption_factor
			#<float> #-- strat_attack
			#<float> #-- carrier_size
			#<float> #-- acc_hot_gain
			#<float> #-- acc_cold_gain
			#<float> #-- build_cost_ic
		}
		target_template = {
			weight = float
			match_value = float

			regiments = {
				## cardinality = 1..25
				<unit> = int
			}
			## cardinality = 0..1
			support = {
				## cardinality = 0..5
				<unit> = int
			}
		}
		allowed_types = {
			## cardinality = ~1..inf
			<unit>
		}
		## cardinality = 0..1
		replace_at_match = float
		## cardinality = 0..1
		replace_with = enum[ai_templates]
		## cardinality = 0..1
		target_min_match = float
	}
}

ai_equipment_design_group = {
	### Only category = naval is currently supported, starting with version 1.6.0.
	category = enum[equipment_categories]

	### Exclusionary list of countries that will not use this design group.
	## cardinality = 0..1
	blocked_for = {
		## cardinality = ~1..inf
		enum[country_tags]
	}

	### Inclusionary list of countries that will use this design group. If this list is empty, all countries not in the block list will be allowed. If this list is not empty, only countries that are in this list and not in the blocked list will be allowed.
	## cardinality = 0..1
	available_for = {
		## cardinality = ~1..inf
		enum[country_tags]
	}

	### List of roles that this design group can be used for. AI will attempt to design and produce equipment to satisfy all roles that it can. So it will try to actively use one design per role for new production and upgrading/refitting. Roles here are dynamically generated and should work with role_ratio.
	roles = {
		value_set[ai_roles]
	}

	### Base priority for creating a design in this group or for creating or upgrading equipment to use one of these designs. A higher number means higher priority.
	priority = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### One or more specifications of designs belonging to this design group.
	## cardinality = 1..inf
	<ai_equipment_design.design> = {
		### Further priority for creating this design specifically or for creating or upgrading equipment to use this design.
		priority = {
			## cardinality = 0..1
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}

		## cardinality = 0..1
		role_icon_index = int

		### List of triggers that must all be true for the design to be usable; true by default if empty or missing.
		## cardinality = 0..1
		enable = {
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		### Specifications about how a matching equipment variant should be designed.
		target_variant = {
			### An additional weight indicating how much the particular design is worth, if it matches.
			match_value = float

			### The equipment archetype or equipment type that the variant must use to match.
			type = <equipment>

			### The matching requirements on individual module slots.
			modules = {
				### A slot can be assigned a module category. Any other module category fails the match. When designing an equipment variant, the latest available will be favored.
				## cardinality = 0..inf
				enum[module_slots] = enum[module_categories]

				### A slot can be assigned a specific module. Any other module fails the match. Less than and greater than comparisons can be used to force lesser or greater modules within a chain of module upgrades. When designing an equipment variant, the earliest module will be favored for the lesser restriction, and the latest will be favored for the greater restriction.
				## cardinality = 0..inf
				enum[module_slots] = <module>

				### A slot can be assigned empty. Any module of any kind fails the match. A slot can be greater than empty. Only an empty slot fails the match.
				## cardinality = 0..inf
				enum[module_slots] = empty

				### A slot can refer to a nested group of more detailed requirements. If you provide multiple instances of module attributes or any_of attributes, then only one must match for the match to succeed.
				## cardinality = 0..inf
				enum[module_slots] = {
					### You can specify a module category, or an equal, lesser, or greater module, or empty/non-empty.
					## cardinality = 0..inf
					module = enum[module_categories]
					## cardinality = 0..inf
					module = <module>
					## cardinality = 0..inf
					module = empty

					# List of modules or module categories, any of which are sufficient for a match.
					## cardinality = 0..inf
					any_of = {
						## cardinality = 0..inf
						<module>
						## cardinality = 0..inf
						enum[module_categories]
					}

					### Optionally, for upgrading existing equipment to a this design, you can require that this slot must have a better module in order to use this design. Example upgrade > current. Alternatively, you can require that it must use exactly the same module that is already on the existing equipment. Example upgrade = current.
					## cardinality = 0..1
					upgrade = current
				}
			}
		}

		### List of hard requirements that all must match for this design to be usable. These follow the same pattern as a slot entry above within target_variant = { modules = { ... } }, but without being tied to an individual slot.
		## cardinality = 0..1
		requirements = {
			## cardinality = 0..inf
			module = enum[module_categories]
			## cardinality = 0..inf
			module = <module>
		}

		## cardinality = 0..1
		### Additional modules that are allowed in any available slots for any of the above designs, after all requirements are fulfilled. Modules at the top of this list are favored over those at the bottom. Modules not in this list will not be used in any remaining open slots.
		allowed_modules = {
			## cardinality = 0..inf
			<module>
			## cardinality = 0..inf
			enum[module_categories]
		}
	}
}

values = {
    value[ai_roles] = {
        armor
        cavalry
        garrison
        infantry
        marines
        mechanized
        motorized
        mountaineers
        paratroopers
		suppression
		mobile
		artillery
		cas
		anti_tank

        naval_capital
        naval_carrier
        naval_screen
        naval_sub
    }
}

enums = {
	enum[ai_research_areas] = {
		defensive
		offensive
		#unit types?
		carrier
		battleship
		cruiser
	}
	complex_enum[ai_templates] = {
		path = "game/common/ai_templates"
		name = {
			enum_name = {
				target_template = {
				}
			}
		}
	}
	complex_enum[ai_equipment_design] = {
		path = "game/common/ai_equipment"
		name = {
			enum_name = {
				target_variant = {
				}
			}
		}
	}
}
