types = {
    ## unique = yes
    type[occupation_law] = {
        path = "game/common/occupation_laws"
    }
}

occupation_law = {
    ### tooltip description for the law
    ## cardinality = 0..1
	tooltip = localisation
	
	### gfx entry & frame for law entry icon. gfx entry can be omitted, in that case it will default to GFX_occupation_policy_icon_strip
    ## cardinality = 0..1
    icon = scalar # we should have something like <spriteType>:int
    
	### gfx entry & frame for law entry icon. gfx entry can be omitted, in that case it will default to GFX_occupation_policy_icon_strip
    ## cardinality = 0..1
	icon = int
	
    ### plays when the law is selected
    ## cardinality = 0..1
	sound_effect = scalar 
	
	### if a law is not visible, it won't show up in gui at all. scope is occupier country, occupied country is not set (this is only check at country level, not target level)
    ## replace_scope = { this = country root = country }
    ## cardinality = 0..1
    visible = {
        ## cardinality = ~1..inf
        alias_name[trigger] = alias_match_left[trigger]
	}

    ### if a law is not available, it will show up in disable state ingui and won't be selectable. scope is occupier country and from scope is occupied country
    ## replace_scope = { this = country root = country from = country }
    ## cardinality = 0..1
	available = {
        ## cardinality = ~1..inf
        alias_name[trigger] = alias_match_left[trigger]
	}

    ### if a current modifier is no longer active (visible/available is false) it will fallback to this law
    ## cardinality = 0..1
    fallback_law = <occupation_law>
    
    ## cardinality = 0..1
	default_law = bool
    
    ## cardinality = 0..1
	starting_law = bool
	
    ### main fallback modifier will be used when previous modifier is no longer active and there is no fallback_law, there must be exactly one fallback modifier. if you are lacking manpower/equipments for your current laws, fallback modifier bonuses will apply instead (will lerp to fallback and at 0 manpower you will be forced to switch)
    ## cardinality = 0..1
	main_fallback_law = bool
	
    ### applies to states if the law is selected
    ## cardinality = 0..1
    ## push_scope = state
	state_modifier = {
        ## cardinality = ~1..inf
        alias_name[modifier] = alias_match_left[modifier]
	}
	
    ### states with resistance supressed (at 0) will get this modifier instead (if defined)
    ## cardinality = 0..1
    ## push_scope = state
	suppressed_state_modifier = {
        ## cardinality = ~1..inf
        alias_name[modifier] = alias_match_left[modifier]
	}
	
    ## #by default laws are sorted by load order, gui_order can be used to reorder them in gui. by default it is 0
    ## cardinality = 0..1
	gui_order = int

    # score used for selecting a law for state. scope is state, from is occupier, from from is occupied. ai_desire_resource temp variables will be available for the triggers, which is a value in between 0-1 to show desire for a certain resource. uncapped_resistance_target temp variable can be used for getting resistance that that is not capped to 0-100. resistance_target_without_law temp variable can be used for accessing resistance target value that is not modifier by law. garrison_min_support_ratio garrison_equipment_support_ratio garrison_manpower_support_ratio gives what ratio of the garrison factor we can support for current template and buffers
    ## replace_scope = { this = state root = state from = country fromfrom = country }
    ## cardinality = 0..1
	ai_will_do = {
        ## cardinality = 0..1
        enum[base_factor] = float
        alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}