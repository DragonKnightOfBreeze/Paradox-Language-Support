types = {
    type[secret_type] = {
        path = "game/common/secret_types"
    }
}

secret_type = {
    ## cardinality = 0..1
    ### Optional free category string.
    category = scalar
    ### Secrets disappear when they become invalid, e.g. a homosexual secret is no longer valid when the owner gets the sodomite trait. scope:secret_owner -> the one who the secret is about; scope:secret_target -> optional character related to the secret, e.g. the lover in a lover secret.
    is_valid = single_alias_right[trigger_clause]
    ### Whether the secret is shunned by another character. Scopes are the same as for is_valid, plus scope:target -> character to check whether they view the secret as shunned/criminal.
    is_shunned = single_alias_right[trigger_clause]
    ### Whether the secret is criminal by another character. Scopes are the same as for is_valid, plus: scope:target -> character to check whether they view the secret as shunned/criminal.
    is_criminal = single_alias_right[trigger_clause]
    ### Effect executed when a character exposes the secret. Scopes are the same as for is_valid, plus: root -> the secret; scope:secret_exposer -> the character who exposed the secret.
    on_expose = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Effect executed when another character discovers the secret. Scopes are the same as for is_valid, plus: root -> the secret; scope:discoverer -> the character who discovered the secret.
    on_discover = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Effect executed when the owner of the secret dies. Note that the owner is now already set to the next participant of the secret. If there is no alive owner after this effect, the secret will be removed. Scopes are the same as for is_valid, plus: root -> the secret.
    on_owner_death = single_alias_right[effect_clause]

}