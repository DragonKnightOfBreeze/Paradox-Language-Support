enums = {
    enum[character_sex] = {
        male
        female
        all
    }
}

types = {
    type[trait] = {
        path = "game/common/traits"
    }
}

## replace_scope = { this = character }
trait = {
    ## cardinality = 0..1
    ### Trait localization name
    name = localisation
    ## cardinality = 0..1
    name = single_alias_right[complex_desc]
    ## cardinality = 1..1
    ### Trait index. Must be unique.
    index = int
    ## cardinality = 0..1
    icon = single_alias_right[complex_desc]
    ## cardinality = 0..inf
    desc = single_alias_right[complex_desc]

    ###########################
    ######Generic Effects######
    ###########################

    # TODO: It might make sense to move many of these fields into a full alias for character_modifier. They are re-used in many places.
    # TODO: Many of these seem like they're possibly soft-coded.
    # TODO: Can some of these be replaced with keyed templates?

    ### A permanent effect applied to the trait holder
    ## replace_scope = { ROOT = character THIS = character }
    ## cardinality = 0..inf
    alias_name[modifier] = alias_match_left[modifier]
    ## cardinality = 0..1
    same_opinion_if_same_faith = int_value_field
    
    ## cardinality = 0..1
    add_commander_trait = bool
    # Work around for bad expected type on this modifier
    ## cardinality = 0..1
    no_water_crossing_penalty = bool
    # Work around for bad expected type on this modifier
    ## cardinality = 0..1
    ignore_negative_culture_opinion = bool
    ## cardinality = 0..1
    disables_combat_leadership = bool
    ## cardinality = 0..1
    incapacitating = bool
    ## cardinality = 0..1
    can_have_children = bool
    ## cardinality = 0..1
    can_inherit = bool
    ## cardinality = 0..1
    can_inherit_from_dynasty = bool
    #TODO: Make these mutually exclusive
    ## cardinality = 0..1
    illegitimate_bastard = bool
    ## cardinality = 0..1
    legitimate_bastard = bool
    ## cardinality = 0..1
    ### Will stop visual aging, and make the character immune to natural death. Can still be killed by script. Fertility will match visual age. You can use set_immortal_age to change the visual age
    immortal = bool

    ###################################################
    ######Genetics, Inheritance, and Elligabilty#######
    ###################################################

    ## cardinality = 0..1
    ### Chance of being inherited if genetic
    inherit_chance = int[0..100]

    ## cardinality = 0..1
    ### Chance of being inherited if both parents hold trait
    both_parent_has_trait_inherit_chance = int[0..100]

    ## cardinality = 0..1
    ### How many characters out of 100 are born with this trait (when not inherited). Can have decimals
    birth = float[0..100]

    ## cardinality = 0..1
    ### How many characters out of 100 are created with this trait? (As opposed to actually being born; this is for things like generated characters, script characters, etc.)
    random_creation = float[0..100]

    ## cardinality = 0..1
    ### Which parent can the trait be inherited from
    parent_inheritance_sex = enum[character_sex]

    ## cardinality = 0..1
    ### What sex of child can inherit this trait
    child_inheritance_sex = enum[character_sex]

    ## cardinality = 0..1
    ### Whether the trait can be inherited [Default: no]
    genetic = bool

    ## cardinality = 0..1
    ### Whether it is inherited from biological father [Default: yes]
    inherit_from_real_father = bool

    ## cardinality = 0..1
    ### Enables children of this character to be considered for inbred trait [Default: no]
    enables_inbred = bool

    ## cardinality = 0..1
    potential = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### Is this trait considered good [Default: no]
    good = bool

    # TODO: Implement dna_modifiers. Probably as an alias.
    ## cardinality = 0..1
    dna_modifiers = {
        ## cardinality = 0..inf
        morph = {
            ## cardinality = 1..inf
            scalar = scalar
        }
        ## cardinality = 0..inf
        color = {
            ## cardinality = 1..inf
            scalar = scalar
        }
        ## cardinality = 0..inf
        accessory = {
            ## cardinality = 1..inf
            scalar = scalar
        }
    }

    ## cardinality = 0..1
    ### Apply this genetic trait to anyone who gains this trait
    genetic_constraint_all = scalar

    ## cardinality = 0..1
    ### Apply this genetic trait to men who gain this trait
    genetic_constraint_men = scalar

    ## cardinality = 0..1
    ### Apply this genetic trait to women who gain this trait
    genetic_constraint_women = scalar

    ## cardinality = 0..inf
    ### The character will use this portrait age index instead of one of the age sub-genes marked as "generic". You can specify more than one such index if you want to randomize between them. If multiple traits force indexes, it randomizes between all of them
    forced_portrait_age_index = int

    ## cardinality = 0..1
    ### When gaining this trait, every single morph gene will be shifted by this percentage towards 0 or 1; whichever it is closest to. E.G., 0.4 will shift 25% towards 0, resulting in 0.3
    portrait_extremity_shift = float[0..1]
  
    ###########################
    ######Categorization#######
    ###########################

    ## cardinality  = 0..1
    ### Mark as educational trait
    education = bool

    ## cardinality = 0..1
    ### Mark as physical [Default: no]
    physical = bool

    ## cardinality = 0..1
    ### Mark as personality trait [Default: no]
    personality = bool

    ## cardinality = 0..1
    ### Mark as health related [Default: no]
    health_trait = bool

    ## cardinality = 0..1
    ### Mark as fame related [Default: no]
    fame = bool

    ## cardinality = 0..1
    lifestyle = bool

    ## cardinality = 0..1
    commander = bool

    ## cardinality = 0..1
    flag = value_set[trait_flag]

    # TODO: Anything that can refer to a trait can refer to a group. Is there some way we can use this to mark a type name too?
    ## cardinality = 0..1
    group = value_set[trait_group]

    #TODO: Does this require group? Test with error log to confirm.
    ## cardinality = 0..1
    level = int

    ## cardinality = 0..1
    childhood = bool

    ## cardinality = 0..1
    shown_in_encyclopedia = bool


    ##################
    ######Misc.#######
    ##################
    
    ## cardinality = 0..1
    ### A list of terrain types that are taken into consideration when commander traits are randomly assigned to commanders. These traits are only assigned/considered if the commander's culture contains a province that has one of the terrain types specified in the list
    trait_exclusive_if_realm_contains = {
        ## cardinality = 0..inf
        <terrain>
    }

    ## cardinality = 0..1
    ### This is not a Opinion modifier, but can be used by 'compatibility_modifier' and 'trait_compatibility' trigger. Compatibility is checked for the Trait holder vs the listed Traits (of another character.)
    compatibility = {
        ## cardinality = 1..inf
        <trait> = int
    }

    # TODO: Require at least one trait or trait group
    ## cardinality = 0..1
    opposites = {
        ## cardinality = 0..inf
        <trait>
        ## cardinality = 0..inf
        value[trait_group]
    }

    ## cardinality = 0..1
    minimum_age = int
    ## cardinality = 0..1
    maximum_age = int

    ## cardinality = 0..1
    same_opinion = int_value_field

    ## cardinality = 0..1
    opposite_opinion = int_value_field

    ## cardinality = 0..inf
    ### Applied if the associated conditions are fulfilled
    triggered_opinion = {
        ## cardinality = 1..1
        ### What opinion modifier to apply if the conditions are fulfilled
        opinion_modifier = <opinion_modifier>
        opinion_modifier = single_alias_right[opinion_chance_modifier]

        #TODO: These are supposed to be linked to the parameters in doctrines. This means parameters in doctrines should probably be refactored to a type.
        ## cardinality = 0..1
        ##push_scope = faith
        ### What boolean doctrine parameter to check for
        parameter = scalar
        #parameter = <parameter>

        ## cardinality = 0..1
        ### Check that the parameter is *not* set (or set to false), rather than set to true
        check_missing = bool

        ## cardinality = 0..1
        ### Only apply to characters of the same faith
        same_faith = bool

        ## cardinality = 0..1
        ### Only apply to characters of the same dynasty
        same_dynasty = bool

        ## cardinality = 0..1
        ### If both characters have this trait, ignore the opinion effect. Punishment reasons still apply
        ignore_opinion_value_if_same_trait = bool

        ## cardinality = 0..1
        ### Only applied if the trait holder is male
        male_only = bool

        ## cardinality = 0..1
        ### Only applied if the trait holder is female. Mutually exclusive with male_only
        female_only = bool
    }
}
