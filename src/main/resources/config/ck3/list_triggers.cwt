### Iterate through ALL vassals, not just direct vassals any_vassal_or_below = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_vassal_or_below] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all spouses any_spouse = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_spouse] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) any_pool_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pool_guest] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all house members any_house_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_house_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all faction county members any_faction_county_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_faction_county_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all duchies in the game any_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) any_character_to_title_neighboring_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all stewardship-based councillors any_stewardship_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_stewardship_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all children any_child = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_child] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters who are valid electors in an election for a title any_elector = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_elector] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all duchies in sub-realm any_sub_realm_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sub_realm_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all participants in the war any_war_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_war_participant] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all empires in the game any_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### true if any child is false (equivalent to NAND)
alias[trigger:any_false] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all knights any_knight = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_knight] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all titles that can be created by the character. (only for alerts) any_alert_creatable_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_alert_creatable_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all DIRECT vassals any_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_vassal] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all allies any_ally = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_ally] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Independent rulers list with a COUNT tier o above any_independent_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_independent_ruler] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all agents in the scheme any_scheme_agent = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_scheme_agent] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Wars of the scoped character any_character_war = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_war] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) any_character_to_title_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all any_claim = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_claim] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all unspent secrets known by the character any_unspent_known_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_unspent_known_secret] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } any_in_de_jure_hierarchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_de_jure_hierarchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all faction character members any_faction_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_faction_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all counties in the game any_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in global list. list = name or variable = name any_in_global_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_global_list] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all realm provinces of a character any_realm_province = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_realm_province] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all knights any_side_knight = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_side_knight] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all diplomacy-based councillors any_diplomacy_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_diplomacy_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all factions targeting the scope character any_targeting_faction = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_targeting_faction] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character any_traveling_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_traveling_family_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all titles leased to a holy order any_leased_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_leased_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all de jure claims for a character any_de_jure_claim = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_de_jure_claim] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters who know the secret any_secret_knower = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_secret_knower] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all martial-based councillors any_martial_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_martial_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all holy site provinces of a faith any_holy_site = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_holy_site] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all participants in an activity any_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_participant] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all kingdoms in the game any_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all holy orders of the faith any_faith_holy_order = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_faith_holy_order] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters who declined an activity invite to a specific activity any_activity_declined = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_activity_declined] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all titles the scoped character can vote on any_election_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_election_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters directly holding counties within this dejure title any_de_jure_county_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_de_jure_county_holder] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title any_neighboring_top_liege_realm = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_top_liege_realm] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in list. list = name or variable = name any_in_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_list] = {
    list = value[list]
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all holy orders that the scoped character is a patron of any_patroned_holy_order = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_patroned_holy_order] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all neighboring counties. Can only be used in county scope any_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all living characters any_living_character = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_living_character] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters that have a truce on this character any_truce_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_truce_holder] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all secrets known by the character any_known_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_known_secret] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through scripted relations of a given type any_relation = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_relation] = {
    type = <game_concept.relation>
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all secrets that target the specified scope any_targeting_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_targeting_secret] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } any_in_de_facto_hierarchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_de_facto_hierarchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters this character has a hook on any_hooked_character = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_hooked_character] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all held landed titles any_held_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_held_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all lieges above a character (skipping the character themselves) any_liege_or_above = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_liege_or_above] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all provinces (skips non-land and impassable provinces) any_province = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_province] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all pledged attackers within a great holy war any_pledged_attacker = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pledged_attacker] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Heirs of the scoped character any_heir = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_heir] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters who have unanswered invites to a specific activity any_activity_invited = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_activity_invited] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the close family [father, mother, siblings, children, grandparents] any_close_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_close_family_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all intrigue-based councillors any_intrigue_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_intrigue_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all titles that can be usurped by the character. (only for alerts) any_alert_usurpable_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_alert_usurpable_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all schemes targeting the character any_targeting_scheme = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_targeting_scheme] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all casus belli's target titles any_target_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_target_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all landed titles character is heir to any_heir_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_heir_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all siblings any_sibling = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sibling] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) any_foreign_court_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_foreign_court_guest] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all attackers in the war any_war_attacker = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_war_attacker] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all direct war allies any_war_ally = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_war_ally] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the close and extended relatives [father, mother, siblings, children, grandparents, uncles/aunts, nephew/niece, cousins] any_close_or_extended_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_close_or_extended_family_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all schemes owned by the character any_scheme = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_scheme] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all counties in sub-realm any_sub_realm_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sub_realm_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all great holy wars this faith is defending against any_defensive_great_holy_wars = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_defensive_great_holy_wars] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Line of succession for the scoped title any_title_heir = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_heir] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all owned stories for a character any_owned_story = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_owned_story] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all pledged defenders within a great holy war any_pledged_defender = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pledged_defender] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all landed titles character is pretender to any_pretender_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pretender_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all concubines any_concubine = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_concubine] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all hired mercenary companies any_hired_mercenary = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_hired_mercenary] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all potential selectable marriage or betrohed options any_potential_marriage_option = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_potential_marriage_option] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all kingdoms in sub-realm any_sub_realm_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sub_realm_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) any_character_to_title_neighboring_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all secrets of the character any_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_secret] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all courtiers and guests (pool and foreign court guests) any_courtier_or_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_courtier_or_guest] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all baronies in the game any_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_barony] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the ancestors of the scope character up to 5 generations any_ancestor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_ancestor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through this title and all its dejure liege titles any_this_title_or_de_jure_above = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_this_title_or_de_jure_above] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all primary war enemies any_primary_war_enemy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_primary_war_enemy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all empires in sub-realm any_sub_realm_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sub_realm_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all courtiers any_courtier = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_courtier] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all defenders in the war any_war_defender = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_war_defender] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all prisoners any_prisoner = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_prisoner] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters this character has a truce on any_truce_target = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_truce_target] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all direct war enemies any_war_enemy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_war_enemy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through player heirs, capped at the first 10 any_player_heir = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_player_heir] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Rulers list with a COUNT tier o above any_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_ruler] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all top lieges of the counts within this dejure title any_de_jure_top_liege = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_de_jure_top_liege] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all councillors that are not related to a skill any_general_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_general_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all prowess-based councillors any_prowess_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_prowess_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) any_neighboring_realm_same_rank_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_realm_same_rank_owner] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the vassal holders of the title any_dejure_vassal_title_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_dejure_vassal_title_holder] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through participants in a secret any_secret_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_secret_participant] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all councillors any_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all claimants to title any_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_claimant] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm any_neighboring_top_liege_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_top_liege_realm_owner] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all factions joined the scope landed title any_title_joined_faction = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_joined_faction] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all (both) parents any_parent = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_parent] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters who are valid candidates in an election for a title any_election_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_election_candidate] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all courtiers that are away any_courtier_away = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_courtier_away] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in local list. list = name or variable = name any_in_local_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_local_list] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all learning-based councillors any_learning_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_learning_councillor] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all baronies in sub-realm any_sub_realm_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sub_realm_barony] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all faiths within a religion any_faith = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_faith] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters in the pool of the given province any_pool_character = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pool_character] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring barony (looking trough the de Jure lieges) any_character_to_title_neighboring_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all player characters any_player = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_player] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all consorts (concubines and spouses) any_consort = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_consort] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all directly owned provinces any_directly_owned_province = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_directly_owned_province] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all titles in sub-realm any_sub_realm_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_sub_realm_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) any_character_to_title_neighboring_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] any_extended_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_extended_family_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes any_connected_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_connected_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all provinces in a county any_county_province = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_county_province] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) any_title_to_title_neighboring_and_across_water_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) any_title_to_title_neighboring_and_across_water_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) any_title_to_title_neighboring_and_across_water_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) any_title_to_title_neighboring_and_across_water_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) any_title_to_title_neighboring_and_across_water_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) any_title_to_title_neighboring_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) any_title_to_title_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) any_title_to_title_neighboring_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) any_title_to_title_neighboring_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) any_title_to_title_neighboring_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_title_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all armies any_army = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_army] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring barony (incl. across water, looking trough the de Jure lieges) any_character_to_title_neighboring_and_across_water_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) any_character_to_title_neighboring_and_across_water_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) any_character_to_title_neighboring_and_across_water_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) any_character_to_title_neighboring_and_across_water_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) any_character_to_title_neighboring_and_across_water_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_character_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all former concubines. Not persisted past death any_former_concubine = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_former_concubine] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all former concubinists. Not persisted past death any_former_concubinist = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_former_concubinist] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all former spouses any_former_spouse = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_former_spouse] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all titles the scoped character is heir to any_heir_to_title = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_heir_to_title] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided any_hostile_raider = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_hostile_raider] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) any_neighboring_and_across_water_realm_same_rank_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_and_across_water_realm_same_rank_owner] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title any_neighboring_and_across_water_top_liege_realm = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_and_across_water_top_liege_realm] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm any_neighboring_and_across_water_top_liege_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_neighboring_and_across_water_top_liege_realm_owner] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through characters this player has pinned any_pinned_character = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pinned_character] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through characters whose player has this character pinned any_pinning_character = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_pinning_character] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges any_raid_target = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_raid_target] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all counties in the realm. Based on top liege  any_realm_county = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_realm_county] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  any_realm_de_jure_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_realm_de_jure_duchy] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  any_realm_de_jure_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_realm_de_jure_empire] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  any_realm_de_jure_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_realm_de_jure_kingdom] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. any_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_spouse_candidate] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all counties in the region. Put 'region = region_name' inside it any_county_in_region = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_county_in_region] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all religions in the game any_religion_global = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_religion_global] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) any_side_commander = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_side_commander] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all dynasty members any_dynasty_member = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_dynasty_member] = {
    ## cardinality = 0..1
    percent = value_float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

