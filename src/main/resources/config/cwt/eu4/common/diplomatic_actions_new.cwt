
types = {
	type[new_diplomatic_action] = {
		path = "game/common/new_diplomatic_actions"
		
		subtype[actions] = {
			category = influence
		}
		subtype[!actions] = {
			alert_index = int
		}
	}
}		

new_diplomatic_action = {
	## cardinality = 1..1
	subtype[!actions] = {

		royal_marriage = { alert_index = int alert_tooltip = scalar }
		requestpeace = { alert_index = int alert_tooltip = scalar }
		allianceaction = { alert_index = int alert_tooltip = scalar }
		integrationaction = { alert_index = int alert_tooltip = scalar }
		annexationaction = { alert_index = int alert_tooltip = scalar }
		vassalaction = { alert_index = int alert_tooltip = scalar }
		milaccess = { alert_index = int alert_tooltip = scalar }
		fleet_access = { alert_index = int alert_tooltip = scalar }
		offermilaccess = { alert_index = int alert_tooltip = scalar }
		callaction = { alert_index = int alert_tooltip = scalar }
		offerloan = { alert_index = int alert_tooltip = scalar }
		sellprov = { alert_index = int alert_tooltip = scalar }
		request_to_join_federation = { alert_index = int alert_tooltip = scalar }
		invite_to_federation = { alert_index = int alert_tooltip = scalar }
		transfer_trade_power = { alert_index = int alert_tooltip = scalar }
		religious_unity_action = { alert_index = int alert_tooltip = scalar }
		form_coalition = { alert_index = int alert_tooltip = scalar }
		enforce_peace = { alert_index = int alert_tooltip = scalar }
		grant_electorate = { alert_index = int alert_tooltip = scalar }
		demand_unlawful_territory_action = { alert_index = int alert_tooltip = scalar }
		support_independence_action = { alert_index = int alert_tooltip = scalar }
		steer_trade = { alert_index = int alert_tooltip = scalar }
		ask_for_march = { alert_index = int alert_tooltip = scalar }
		sell_ships_action = { alert_index = int alert_tooltip = scalar }
		grant_freecity = { alert_index = int alert_tooltip = scalar }
		invite_to_trade_league = { alert_index = int alert_tooltip = scalar }
		request_to_join_trade_league = { alert_index = int alert_tooltip = scalar }
		sharemap = { alert_index = int alert_tooltip = scalar }											
		condottieri_action = { alert_index = int alert_tooltip = scalar }								
		offer_fleet_access = { alert_index = int alert_tooltip = scalar }							
		break_alliance = { alert_index = int alert_tooltip = scalar }									
		tributary_state_action = { alert_index = int alert_tooltip = scalar }						
		ask_for_tributary_state_action = { alert_index = int alert_tooltip = scalar }				
		knowledge_sharing = { alert_index = int alert_tooltip = scalar }							
		charter_company = { alert_index = int alert_tooltip = scalar } 		
	}

	## cardinality = 0..inf
	subtype[actions] = category = influence

		###Can the other side decline?
		require_acceptance = bool
		
		## cardinality = 0..1
		alert_index = int
		## cardinality = 0..1
		alert_tooltip = localisation
		
		## replace_scope = { this = country root = country from = country }
		is_visible = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = country root = country from = country }
		is_allowed = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = country root = country from = country }
		on_accept = {
			alias_name[effect] = alias_match_left[effect]
		}
		## cardinality = 0..1
		## replace_scope = { this = country root = country from = country }
		on_accept = {
			alias_name[effect] = alias_match_left[effect]
		}
		
		
		## cardinality = 0..1
		###This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
		ai_acceptance = {
			## cardinality = 1..inf
			## replace_scope = { this = country root = country from = country }
			add_entry = {
				name = localisation
				limit = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				
				
				## cardinality = 0..inf
				export_to_variable = {
					enum[which_varname] = ai_value
					value = enum[export_to_variable_data]
					## cardinality = 0..1
					who = scope[country]
					## cardinality = 0..1
					with = scope[country]
				}
				
				## cardinality = 0..inf
				multiply_variable = {
					which = ai_value
					value = float
				}
				
				## cardinality = 0..inf
				subtract_variable = {
					which = ai_value
					value = float
				}

				## cardinality = 0..inf
				change_variable = {
					which = ai_value
					value = float
				}
				
				## cardinality = 0..inf
				check_variable = {
					cardinality = 2..2
					which = ai_value
					cardinality = 2..2
					which = value[variable]
				}
				
				## cardinality = 0..inf
				is_variable_equal = {
					cardinality = 2..2
					which = ai_value
					cardinality = 2..2
					which = value[variable]
				}
			}
		}
		
		## replace_scope = { this = country root = country from = country }
		ai_will_do = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	
}
