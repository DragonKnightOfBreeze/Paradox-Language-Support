types = {
    type[character] = {
        path = "game/history/characters"

        localisation = {
            ## primary
            Name = name
        }
    }
}

# TODO: According to _history.info the possible keys are the same for the base entry and the date fields. But I'm sceptical, I don't believe changing the gender of characters are possible for example.

## replace_scope = { this = character }
character = {
    ### The character's first name.
    name = localisation

    ### The character's dynasty.
    ## cardinality = 0..1
    dynasty = <dynasty>
    ### The character's house.
    ## cardinality = 0..1
    dynasty_house = <house>

    ### The character's faith.
    ## cardinality = 0..1
    religion = <faith>
    ### The character's faith.
    ## cardinality = 0..1
    faith = <faith>

    ### The character's culture.
    culture = <culture>

    ## cardinality = 0..1
    ### If yes, the character will be female. Defaults to "no".
    female = bool

    ## cardinality = 0..1
    ### The character's DNA for their portrait.
    dna = <dna_data>

    ## cardinality = 0..1
    ### Specifies the character's father.
    father = <character>

    # Found no base game example.
    ### Specifies the character's real father.
    #real_father = <character>

    ## cardinality = 0..1
    ### Specifies the character's mother.
    mother = <character>

    ## cardinality = 0..1
    ### The character's base diplomacy value.
    diplomacy = int

    ## cardinality = 0..1
    ### The character's base martial value.
    martial = int

    ## cardinality = 0..1
    ### The character's base stewardship value.
    stewardship = int

    ## cardinality = 0..1
    ### The character's base intrigue value.
    intrigue = int

    ## cardinality = 0..1
    ### The character's base learning value.
    learning = int

    ## cardinality = 0..1
    ### The character's base prowess value.
    prowess = int

    # TODO: Float maybe?
    ## cardinality = 0..1
    ### The character's base health value.
    health = int

    ## cardinality = 0..1
    ### The character's base fertility value.
    fertility = float

    ## cardinality = 0..inf
    ### The character starts with this trait.
    trait = <trait>

    ## cardinality = 0..1
    ### If yes, prevents additional traits from being randomly assigned to a character by the game, except through subsequent events. Defaults to "no".
    disallow_random_traits = bool

    ## cardinality = 0..inf
    ### The character's sexuality.
    sexuality = <game_concept.sexuality>

    ## cardinality = 2..inf
    date_field = {
        ## cardinality = 0..1
        death = yes
        ## cardinality = 0..1
        death = date_field
        ## cardinality = 0..1
        death = {
            death_reason = <death_reason>
            ## cardinality = 0..1
            killer = <character>
        }

        ## cardinality = 0..1
        birth = yes
        ## cardinality = 0..1
        birth = date_field

        ## cardinality = 0..inf
        alias_name[character_history_effect] = alias_match_left[character_history_effect]
    }
}

### Adds a strong claim on the given title.
alias[character_history_effect:add_pressed_claim] = <title>

### Removes the claim on the given title.
alias[character_history_effect:remove_claim] = <title>

### Moves the character to the given character's court. Setting it to 0 makes them their own employer.
alias[character_history_effect:employer] = <character>

### Moves the character to the given character's court. Setting it to 0 makes them their own employer.
alias[character_history_effect:employer] = 0

### Leaves their current court and moves to the pool.
alias[character_history_effect:move_to_pool] = yes

### Adds the given character as a spouse to the character.
alias[character_history_effect:add_spouse] = <character>

### Adds the given character as a spouse in a matrilineal marriage to the character.
alias[character_history_effect:add_matrilineal_spouse] = <character>

### Adds the given character as a consort or concubine to the character.
alias[character_history_effect:add_concubine] = <character>

### Removes the given spouse from the character.
alias[character_history_effect:remove_spouse] = <character>

### Gives the character the given job.
alias[character_history_effect:give_council_position] = <council_position>

### Sets the character's nickname to the given one.
alias[character_history_effect:give_nickname] = <nickname>

### Removes the given trait from the character.
alias[character_history_effect:remove_trait] = <trait>

### Changes the character's capital to the given one.
alias[character_history_effect:capital] = <title>

### Changes the character's primary title to the given one.
alias[character_history_effect:set_primary_title_to] = scope[title]

### Changes the character's dynasty to the given one.
alias[character_history_effect:dynasty] = <dynasty>

### Changes the character's house to the given one.
alias[character_history_effect:dynasty_house] = <house> 

# TODO: Is this the same for CK3? (copied from CK2)
### Effects not covered by the other effects to execute on the character if they're not dead. Note that this is only executed after game start, so might cause some discrepancies in the lobby.
## push_scope = character
alias[character_history_effect:effect] = single_alias_right[effect_clause]

### Adds this trait to the character.
alias[character_history_effect:trait] = <trait>
### Adds this trait to the character.
alias[character_history_effect:add_trait] = <trait>

### Changes the character's faith to this.
alias[character_history_effect:religion] = <faith>
### Changes the character's faith to this.
alias[character_history_effect:faith] = <faith>
### Changes the character's faith to this.
alias[character_history_effect:set_character_faith_history] = <faith>

### Changes the character's culture to this.
alias[character_history_effect:culture] = <culture>

### Changes the character's name to this.
alias[character_history_effect:name] = localisation

##### Custom effects (dynamic ones) ######
### Sets scripted relationship.
alias[character_history_effect:set_relation_<scripted_relation>] = scope[character]
### Removes scripted relationship.
alias[character_history_effect:remove_relation_<scripted_relation>] = scope[character]


# Found no base game example.

### Effects not covered by the other effects to execute on the character. Note that this is only executed after game start, so might cause some discrepancies in the lobby.
#alias[character_history_effect:effect_even_if_dead] = {
#    ## cardinality = 1..inf
#    alias_name[effect] = alias_match_left[effect]
#}

# Floats?
### Changes the character's wealth by the given value.
#alias[character_history_effect:wealth] = int

### Changes the character's piety by the given value.
#alias[character_history_effect:piety] = int

### Changes the character's prestige by the given value.
#alias[character_history_effect:prestige] = int

### If the character has a trait with immortality = yes, this specifies when the character became immortal.
#alias[character_history_effect:immortal_age] = int