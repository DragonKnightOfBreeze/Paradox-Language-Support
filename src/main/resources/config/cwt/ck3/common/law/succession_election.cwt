types = {
    type[succession_election] = {
        path = "game/common/succession_election"
    }
}

succession_election = {
    ### Characters that can be elected. In addition to the scripted limitations, the gender and faith laws are taken into account. Also the current title holder can never be a candidate.
    candidates = {
        ## cardinality = 0..inf
        ### A set of candidates. Can list multiple sets. If a character matches any of them they will be a valid candidate.
        add = enum[candidate_types]
        ## cardinality = 0..inf
        ### A set of candidates. Can list multiple sets. If a character matches any of them they will be a valid candidate.
        add = {
            ### Which hardcoded candidate set type to use.
            type = enum[candidate_types]
            ## push_scope = character
            ### Trigger that must be true for the character in the set; scope: root = candidate character, scope:title = the title under election, scope:holder = current title holder; default: always = yes
            limit = single_alias_right[trigger_clause]
        }
        ## push_scope = character
        ## cardinality = 0..1
        ### Trigger that must be true for the characters in any sets; scope: root = candidate character, scope:title = the title under election, scope:holder = current title holder; default: always = yes
        limit = single_alias_right[trigger_clause]
    }
    ### Characters that can vote in the election. Note that only rulers can be electors.
    electors = {
        ## cardinality = 0..inf
        ### A set of candidates. Can list multiple sets. If a character matches any of them they will be a valid candidate.
        add = enum[candidate_types]
        ## cardinality = 0..inf
        ### A set of candidates. Can list multiple sets. If a character matches any of them they will be a valid candidate.
        add = {
            ### Which hardcoded candidate set type to use.
            type = enum[candidate_types]
            ## push_scope = character
            ### Trigger that must be true for the character in the set; scope: root = candidate character, scope:title = the title under election, scope:holder = current title holder; default: always = yes
            limit = single_alias_right[trigger_clause]
        }
        ## push_scope = character
        ## cardinality = 0..1
        ### Trigger that must be true for the characters in any sets; scope: root = candidate character, scope:title = the title under election, scope:holder = current title holder; default: always = yes
        limit = single_alias_right[trigger_clause]

        ## cardinality = 0..1
        ### Optional maximum number of electors, <0 for no limitation; default: -1.
        max = int
        ## cardinality = 0..1
        ### Optional MTTH to calculate a character's priority; only relevant when there is a max; scope: see "limit"; default: base = 1
        priority = single_alias_right[weight_block]
    }
    ## cardinality = 0..1
    ### Optional MTTH to calculate the score an elector should add with their vote; scope: root = elector, scope:title = the title under election, scope:holder = current title holder; default: base = 1
    elector_vote_strength = single_alias_right[weight_block]

    ### MTTH to calculate the AI voting behavior. AI electors will choose the candidate with the highest score. Scope: root = elector, scope:candidate = the considered candidate, scope:title = the title under election, scope:holder = current title holder, scope:holder_candidate = the title holder's candidate; default: base = 1
    candidate_score = single_alias_right[weight_block]
}

enums = {
    enum[candidate_types] = {
        title_claimants
        title_dejure_vassals
        holder
        holder_direct_vassals
        holder_spouses
        holder_close_family
        holder_close_or_extended_family
        holder_dynasty
    }
}