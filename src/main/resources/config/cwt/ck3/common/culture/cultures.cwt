types = {
    ## type_key_filter <> { mercenary_names graphical_cultures }
    type[culture] = {
        path = "game/common/culture/cultures"
        skip_root_key = any
    }
    type[culture_group] = {
        path = "game/common/culture/cultures"
    }
}
culture_group = {
    # TODO: Make graphical cultures somehow matter.
    ## cardinality = 0..1
    ### List of graphical cultures used for coat of arms, buildings, clothings and units. It's possible to give more than one from each type, then all of them will be used.
    graphical_cultures = single_alias_right[graphical_culture_list]
    ## cardinality = 0..1
    ### List of possible mercenary names and optionally coats of arms.
    mercenary_names = single_alias_right[mercenary_list]
    ## cardinality = 1..inf
    <culture> = {
        ### The color of the culture, used e.g. on the map.
        color = Color

        ## cardinality = 0..1
        ### List of graphical cultures used for coat of arms, buildings, clothings and units. It's possible to give more than one from each type, then all of them will be used.
        graphical_cultures = single_alias_right[graphical_culture_list]
        ## cardinality = 0..1
        ### List of possible mercenary names and optionally coats of arms.
        mercenary_names = single_alias_right[mercenary_list]
        
        ## cardinality = 0..1
        ### List of possible cadet dynasty names.
        cadet_dynasty_names = single_alias_right[dynasty_name_list]
        ## cardinality = 1
        ### List of possible dynasty names.
        dynasty_names = single_alias_right[dynasty_name_list]

        ## cardinality = 0..1
        ### When generating a dynasty name based on a title, add this prefix.
        dynasty_of_location_prefix = localisation
        ## cardinality = 0..1
        ### When generating a dynasty name for a bastard, add this prefix.
        bastard_dynasty_prefix = localisation

        ## cardinality = 0..1
        ### Allows dynasties to be named after the founder. The dynasty name will be <founder's first name> + FOUNDER_BASED_NAME_POSTFIX (localization, "id" by default). Defaults to no.
        founder_named_dynasties = bool
        ## cardinality = 0..1
        ### Primary tiltes will be use the house name instead. Defaults to no.
        dynasty_title_names = bool
        # TODO: Does this actually works?
        ## cardinality = 0..1
        ### Displays the house name first in names. Defaults to no.
        dynasty_name_first = bool

        ### List of possible names for male children and randomly generated characters.
        male_names = single_alias_right[localisation_list]
        ### List of possible names for male children and randomly generated characters.
        male_names = single_alias_right[weighted_localisation_list]

        ### List of possible names for female children and randomly generated characters.
        female_names = single_alias_right[localisation_list]
        ### List of possible names for female children and randomly generated characters.
        female_names = single_alias_right[weighted_localisation_list]

        ## cardinality = 0..1
        ### Chance of male children being named after their paternal grandfather. Sum of these three values must not exceed 100.
		pat_grf_name_chance = int
        ## cardinality = 0..1
        ### Chance of male children being named after their maternal grandfather. Sum of these three values must not exceed 100.
		mat_grf_name_chance = int
        ## cardinality = 0..1
        ### Chance of male children being named after their father. Sum of these three values must not exceed 100.
		father_name_chance = int
		
        ## cardinality = 0..1
        ### Chance of female children being named after their paternal grandmother. Sum of these three values must not exceed 100.
        pat_grm_name_chance = int
        ## cardinality = 0..1
        ### Chance of female children being named after their maternal grandmother. Sum of these three values must not exceed 100.
		mat_grm_name_chance = int
        ## cardinality = 0..1
        ### Chance of female children being named after their mother. Sum of these three values must not exceed 100.
		mother_name_chance = int

        # TODO: How do these work?
        # Patronyms. Names after the primary parent. Can use both prefix and suffix together ("McDavidson"). _vowel is used for when the parent's name starts with a vowel.
        ## cardinality = 0..1
		patronym_prefix_male = localisation
        ## cardinality = 0..1
		patronym_prefix_male_vowel = localisation
        ## cardinality = 0..1
		patronym_prefix_female = localisation
        ## cardinality = 0..1
        patronym_prefix_female_vowel = localisation
        
        ## cardinality = 0..1
        grammar_transform = enum[grammar_transform]
		
        ## cardinality = 0..1
		patronym_suffix_male = localisation
        ## cardinality = 0..1
		patronym_suffix_female = localisation

        ## cardinality = 0..1
        ### Makes characters from this culture use patronyms in their names. It can be also allowed by the government type. Defaults to no.
        always_use_patronym = bool

        ## cardinality = 0..1
        ### Modifier effects on all characters of the culture.
        character_modifier = single_alias_right[character_modifier]

        ## cardinality = 0..1
        ### Allows generating character who should have random culture from this culture. Defaults to true.
        used_for_random = bool

        # TODO: Probably leftovers from CK2
        ## cardinality = 0..1
        ### Probably leftover from CK2
        secondary_event_pictures = <culture>
        ## cardinality = 0..1
        ### Probably leftover from CK2
        prefix = bool
        ## cardinality = 0..1
        ### Probably leftover from CK2
        dukes_called_kings = bool

        ### Weighted list of ethnicities for newly generated characters.
        ethnicities = single_alias_right[ethnicity_list]
    }
}

single_alias[mercenary_list] = {
    ## cardinality = 0..inf
    {
        name = localisation
        ## cardinality = 0..1
        coat_of_arms = <coat_of_arms>
    }
}

single_alias[dynasty_name_list] = {
    ## cardinality = 0..inf
    localisation
    ## cardinality = 0..inf
    {
        ## cardinality = 1..2
        localisation
    }
}

single_alias[graphical_culture_list] = {
    ## cardinality = 1..inf
    value_set[graphical_culture]
}

single_alias[ethnicity_list] = {
    ## cardinality = 0..inf
    int = <ethnicity>
}

enums = {
    # TODO: Is there any other?
    enum[grammar_transform] = {
        french
    }
    complex_enum[male_names] = {
        path = "game/common/culture/cultures"
        name = {
            scalar = {
                male_names = {
                    enum_name
                    scalar = { enum_name }
                }
            }
        }
    }
    complex_enum[female_names] = {
        path = "game/common/culture/cultures"
        name = {
            scalar = {
                female_names = {
                    enum_name
                    scalar = { enum_name }
                }
            }
        }
    }
}