types = {
    type[on_action] = {
        path = "game/common/on_actions"
        start_from_root = yes
        ## type_key_filter = on_startup
        ### Fires on game load (game start and loading from saves) for ALL characters (not only the player). Note: not called for ruler designed characters. Also see on_chronicle_start.
        subtype[on_startup] = { }
        ## type_key_filter = on_yearly_pulse
        ### Fires every year.
        subtype[on_yearly_pulse] = { }
        ## type_key_filter = on_bi_yearly_pulse
        ### Fires every two years.
        subtype[on_bi_yearly_pulse] = { }
        ## type_key_filter = on_five_year_pulse
        ### Fires every five years.
        subtype[on_five_year_pulse] = { }
        ## type_key_filter = on_decade_pulse
        ### Fires every ten years.
        subtype[on_decade_pulse] = { }
        ## type_key_filter = on_yearly_childhood_pulse
        ### Fires every year from 2 to 16 years old. Maybe based on defines?
        subtype[on_yearly_childhood_pulse] = { }
        ## type_key_filter = on_childhood_pulse
        ### Fires at ages 6.5, 8.5, and 10.5.
        subtype[on_childhood_pulse] = { }
        ## type_key_filter = on_adolescence_pulse
        ### Fires at ages 12.5 and 14.5.
        subtype[on_adolescence_pulse] = { }
        ## type_key_filter = on_focus_pulse
        ### Fires every year for characters with a focus.
        subtype[on_focus_pulse] = { }
        ## type_key_filter = on_province_major_modifier
        ### Fires when a province modifier with major = yes is removed.
        subtype[on_province_major_modifier] = { }
        ## type_key_filter = on_outbreak
        ### Fires when a new outbreak starts. ROOT is the province, token_data is the disease name.
        subtype[on_outbreak] = { }
        ## type_key_filter = on_combat_pulse
        ### FROM is the opposing army's commander? FROMFROM is the opposing army's liege?
        subtype[on_combat_pulse] = { }
        ## type_key_filter = on_combat_starting
        ### FROM is the character who is the commander of the opposing side, FROMFROM is the character who is the liege of the commander of the opposing side.
        subtype[on_combat_starting] = { }
        ## type_key_filter = on_siege_pulse
        ### Fires for both the attacking and defending siege leaders roughly every 10 days, attacker first. ROOT is the appropriate siege leader.
        subtype[on_siege_pulse] = { }
        ## type_key_filter = on_battle_won
        ### ROOT is any commander except the leader on winning side, FROM is the opponent army leader.
        subtype[on_battle_won] = { }
        ## type_key_filter = on_major_battle_won
        ### ROOT is any commander except the leader on winning side, FROM is the opponent army leader.
        subtype[on_major_battle_won] = { }
        ## type_key_filter = on_battle_won_leader
        ### ROOT is the leader on winning side, FROM is the opponent army leader.
        subtype[on_battle_won_leader] = { }
        ## type_key_filter = on_major_battle_won_leader
        ### ROOT is the leader on winning side, FROM is the opponent army leader.
        subtype[on_major_battle_won_leader] = { }
        ## type_key_filter = on_battle_won_owner
        ### ROOT is winning army owner, FROM is opponent army owner.
        subtype[on_battle_won_owner] = { }
        ## type_key_filter = on_battle_lost
        ### ROOT is any commander except the leader on losing side, FROM is the opponent army leader.
        subtype[on_battle_lost] = { }
        ## type_key_filter = on_major_battle_lost
        ### ROOT is any commander except the leader on losing side, FROM is the opponent army leader.
        subtype[on_major_battle_lost] = { }
        ## type_key_filter = on_battle_lost_leader
        ### ROOT is the leader on losing side, FROM is the opponent army leader.
        subtype[on_battle_lost_leader] = { }
        ## type_key_filter = on_major_battle_lost_leader
        ### ROOT is the leader on losing side, FROM is the opponent army leader.
        subtype[on_major_battle_lost_leader] = { }
        ## type_key_filter = on_battle_lost_owner
        ### ROOT is losing army owner, FROM is opponent army owner.
        subtype[on_battle_lost_owner] = { }
        ## type_key_filter = on_siege_won_leader
        ### ROOT is the siege attacker, FROM is the barony won.
        subtype[on_siege_won_leader] = { }
        ## type_key_filter = on_siege_won_leader_fort
        ### ROOT is the siege attacker, FROM is the province
        subtype[on_siege_won_leader_fort] = { }
        ## type_key_filter = on_siege_won_leader_trade_post
        ### ROOT is the siege attacker, FROM is the province
        subtype[on_siege_won_leader_trade_post] = { }
        ## type_key_filter = on_siege_lost_leader
        ### ROOT is the siege defender, FROM is the barony lost.
        subtype[on_siege_lost_leader] = { }
        ## type_key_filter = on_siege_lost_leader_fort
        ### ROOT is the siege defender, FROM is the province.
        subtype[on_siege_lost_leader_fort] = { }
        ## type_key_filter = on_siege_lost_leader_trade_post
        ### ROOT is the siege defender, FROM is the province.
        subtype[on_siege_lost_leader_trade_post] = { }
        ## type_key_filter = on_siege_over_winner
        ### ROOT is the owner of the winning unit, FROM is the barony won.
        subtype[on_siege_over_winner] = { }
        ## type_key_filter = on_siege_over_winner_fort
        ### ROOT is the owner of the winning unit, FROM is the province.
        subtype[on_siege_over_winner_fort] = { }
        ## type_key_filter = on_siege_over_winner_trade_post
        ### ROOT is the owner of the winning unit, FROM is the province.
        subtype[on_siege_over_winner_trade_post] = { }
        ## type_key_filter = on_siege_over_loc_chars
        ### Fires for all characters presumed to be in the settlement at the time. ROOT is the local character, FROM is the lost title, new_character is the siege winner unit owner.
        subtype[on_siege_over_loc_chars] = { }
        ## type_key_filter = on_siege_over_loc_chars_fort
        ### Fires for all characters presumed to be in the province at the time. ROOT is the local character, FROM is the province, new_character is the siege winner unit owner.
        subtype[on_siege_over_loc_chars_fort] = { }
        ## type_key_filter = on_siege_over_loc_chars_trade_post
        ### Fires for all characters presumed to be in the province at the time. ROOT is the local character, FROM is the province, new_character is the siege winner unit owner.
        subtype[on_siege_over_loc_chars_trade_post] = { }
        ## type_key_filter = on_failed_assassination
        ### ROOT is the target, FROM is the plotter.
        subtype[on_failed_assassination] = { }
        ## type_key_filter = on_failed_assassination_disc
        ### ROOT is the target, FROM is the plotter.
        subtype[on_failed_assassination_disc] = { }
        ## type_key_filter = on_assassination
        ### ROOT is the target, FROM is the plotter.
        subtype[on_assassination] = { }
        ## type_key_filter = on_assassination_disc
        ### ROOT is the target, FROM is the plotter.
        subtype[on_assassination_disc] = { }
        ## type_key_filter = on_birth
        ### ROOT is the baby. Note that in case of twin this'll fire for both twins.
        subtype[on_birth] = { }
        ## type_key_filter = on_adulthood
        ### ROOT is the new adult.
        subtype[on_adulthood] = { }
        ## type_key_filter = on_post_birth
        ### ROOT is the baby. Note that in case of twin this'll fire only for the second twin.
        subtype[on_post_birth] = { }
        ## type_key_filter = on_pregnancy
        ### Fires at 2 months of pregnancy. ROOT is the pregnant woman.
        subtype[on_pregnancy] = { }
        ## type_key_filter = on_marriage
        ### Fires for lieges of both spouses. ROOT is the liege, FROM is the spouse under ROOT, new_character is the other spouse.
        subtype[on_marriage] = { }
        ## type_key_filter = on_betrothal
        ### Fires for lieges of both betrothed. ROOT is the liege, FROM is the betrothed under ROOT, new_character is the other betrothed.
        subtype[on_betrothal] = { }
        ## type_key_filter = on_become_imprisoned_any_reason
        ### Fires when someone gets imprisoned for any reason. ROOT is the prisoner, FROM is the imprisoner.
        subtype[on_become_imprisoned_any_reason] = { }
        ## type_key_filter = on_avoided_imprison_started_war
        ### Fires if someone tries to imprison a landed character and fails. ROOT is the rebelling character, FROM is the ruler who tried to imprison.
        subtype[on_avoided_imprison_started_war] = { }
        ## type_key_filter = on_became_imprisoned
        ### Fires if someone becomes imprisoned by the diplomatic action. ROOT is the prisoner, FROM is the imprisoner.
        subtype[on_became_imprisoned] = { }
        ## type_key_filter = on_avoided_imprison_fled_country
        ### Fires if someone tries to imprison an unlanded character and fails. ROOT is the fleeing character, FROM is the ruler who tried to imprison.
        subtype[on_avoided_imprison_fled_country] = { }
        ## type_key_filter = on_released_from_prison
        ### Fires if someone is released from prison. ROOT is the prisoner, FROM is the imprisoner.
        subtype[on_released_from_prison] = { }
        ## type_key_filter = on_executed
        ### Fires if someone is executed. Might fire before on_death. ROOT is the executee, FROM is the executioner.
        subtype[on_executed] = { }
        ## type_key_filter = on_exiled
        ### Fires if someone is exiled. ROOT is the character exiled. FROM is undefined? Find that hard to believe.
        subtype[on_exiled] = { }
        ## type_key_filter = on_prepared_invasion_monthly
        ### Fires every month for characters who are preparing an invasion. ROOT is the invader, FROM is the target character.
        subtype[on_prepared_invasion_monthly] = { }
        ## type_key_filter = on_prepared_invasion_aborts
        ### Fires if an invasion becomes invalid. ROOT is the invader, FROM is the target character.
        subtype[on_prepared_invasion_aborts] = { }
        ## type_key_filter = on_prepared_invasion_expires
        ### Fires if an invasion expires. ROOT is the invader, FROM is the target character.
        subtype[on_prepared_invasion_expires] = { }
        ## type_key_filter = on_death
        ### Fires for a dying character, before succession is dealt with (still has flags and titles). ROOT is the dead character.
        subtype[on_death] = { }
        ## type_key_filter = on_merc_rampage
        ### ???
        subtype[on_merc_rampage] = { }
        ## type_key_filter = on_merc_leave
        ### ???
        subtype[on_merc_leave] = { }
        ## type_key_filter = on_merc_turn_coat_from
        ### ???
        subtype[on_merc_turn_coat_from] = { }
        ## type_key_filter = on_merc_turn_coat_to
        ### ???
        subtype[on_merc_turn_coat_to] = { }
        ## type_key_filter = on_holy_order_leave
        ### ???
        subtype[on_holy_order_leave] = { }
        ## type_key_filter = on_loot_settlement
        ### ROOT is the raider, FROM is the looted settlement (title or province?)
        subtype[on_loot_settlement] = { }
        ## type_key_filter = on_loot_province
        ### Fires when someone is looting currently in a province. ROOT is the looter, FROM is the province.
        subtype[on_loot_province] = { }
        ## type_key_filter = on_warleader_death
        ### Never triggered, reserved for CB use.
        subtype[on_warleader_death] = { }
        ## type_key_filter = on_approve_law
        ### Respond to a proposed change of de facto law. ROOT is a ruler in the realm of the title, FROM is the title.
        subtype[on_approve_law] = { }
        ## type_key_filter = on_approve_de_jure_law
        ### Respond to a proposed change of de jure law. ROOT is a ruler in the de jure realm of the title, FROM is the title.
        subtype[on_approve_de_jure_law] = { }
        ## type_key_filter = on_rebel_revolt
        ### When rebels appear. ROOT is the province.
        subtype[on_rebel_revolt] = { }
        ## type_key_filter = on_defect_to_rebels
        ### When province defects to rebels. ROOT is ???, FROM is the province.
        subtype[on_defect_to_rebels] = { }
        ## type_key_filter = on_defect_from_rebels
        ### When rebels disperse. ROOT is ???, FROM is the province previously occupied by the rebels.
        subtype[on_defect_from_rebels] = { }
        ## type_key_filter = on_crusade_creation
        ### ROOT is the religious head, FROM is the attacked kingdom title, new_character is the targeted enemy.
        subtype[on_crusade_creation] = { }
        ## type_key_filter = on_crusade_invalid
        ### ROOT is the religious head, FROM is the attacked kingdom title, new_character is the targeted enemy.
        subtype[on_crusade_invalid] = { }
        ## type_key_filter = on_crusade_success
        ### When the crusade succeeds. ROOT is the target title, FROM is the taker, new_character is the enemy.
        subtype[on_crusade_success] = { }
        ## type_key_filter = on_crusade_failure
        ### When the crusade fails. ROOT is the target title, FROM is the head of religion, new_character is the enemy.
        subtype[on_crusade_failure] = { }
        ## type_key_filter = on_forced_consort
        ### When a pagan ruler forces a prisoner to be his consort. ROOT is the prisoner, FROM is the ruler.
        subtype[on_forced_consort] = { }
        ## type_key_filter = on_reform_religion
        ### When a pagan religion is reformed and the old religion has become a heresy. ROOT is the character triggering the reformation
        subtype[on_reform_religion] = { }
        ## type_key_filter = on_county_religion_change
        ### When the religion changes in a province. ROOT is the province.
        subtype[on_county_religion_change] = { }
        ## type_key_filter = on_vassal_accepts_religious_conversion
        ### When a character accepts religious conversion (the diplomatic action). Fires for the vassal and each of his courtiers and vassals. ROOT is the character, FROM is the vassal, FROMFROM is the demander.
        subtype[on_vassal_accepts_religious_conversion] = { }
        ## type_key_filter = on_heresy_takeover
        ### A heresy has become the new norm, replacing the old orthodoxy. ROOT is the character, FROM is a temporary character with the heresy religion, FROMFROM is a temporary character with the old religion.
        subtype[on_heresy_takeover] = { }
        ## type_key_filter = on_become_doge
        ### Fires for a newly elected doge. ROOT is the new doge, FROM is the previous doge.
        subtype[on_become_doge] = { }
        ## type_key_filter = on_elective_gavelkind_succession
        ### ROOT is the vassal, FROM is the new liege.
        subtype[on_elective_gavelkind_succession] = { }
        ## type_key_filter = on_entering_port
        ### Fires when a navy moves into a port. ROOT is the unit scope, FROM is the owner.
        subtype[on_entering_port] = { }
        ## type_key_filter = on_rel_elector_chosen
        ### Fires when a new cardinal is elected (SoA only). ROOT is the new cardinal, FROM is the religious head.
        subtype[on_rel_elector_chosen] = { }
        ## type_key_filter = on_rel_head_chosen
        ### Fires when a new Pope is elected (SoA only). ROOT is the new Pope, FROM is the previous Pope.
        subtype[on_rel_head_chosen] = { }
        ## type_key_filter = on_settlement_looted
        ### ROOT is the looter, FROM is the settlement title.
        subtype[on_settlement_looted] = { }
        ## type_key_filter = on_navy_returns_with_loot
        ### ROOT is the navy's owner, FROM is the province.
        subtype[on_navy_returns_with_loot] = { }
        ## type_key_filter = on_create_title
        ### ROOT is the creating character, FROM is the title.
        subtype[on_create_title] = { }
        ## type_key_filter = on_new_holder
        ### ROOT is the character, FROM is the title, FROMFROM is the old holder.
        subtype[on_new_holder] = { }
        ## type_key_filter = on_new_holder_inheritance
        ### ROOT is the character, FROM is the title, FROMFROM is the old holder.
        subtype[on_new_holder_inheritance] = { }
        ## type_key_filter = on_new_holder_usurpation
        ### ROOT is the character, FROM is the title, FROMFROM is the old holder.
        subtype[on_new_holder_usurpation] = { }
        ## type_key_filter = on_create_chronicle_if_empty
        ### Fires at the end of each year if the chronicle is empty.
        subtype[on_create_chronicle_if_empty] = { }
        ## type_key_filter = on_chronicle_owner_change
        ### Fires when the player changes character to another of the same dynasty. FROM is the old character, ROOT is the new holder.
        subtype[on_chronicle_owner_change] = { }
        ## type_key_filter = on_chronicle_start
        ### Fires for the player character, when the game starts (but not when loading from saves). Also works when Charlemagne DLC is not active. Note: for ruler designed characters, fires twice (for the historical character and player ruler designed character).
        subtype[on_chronicle_start] = { }
        ## type_key_filter = on_character_convert_religion
        ### Fires when character converts religion for whatever reason. ROOT is the character after conversion, FROM is the old religion.
        subtype[on_character_convert_religion] = { }
        ## type_key_filter = on_character_convert_secret_religion
        ### Fires when character converts to their secret religion. ROOT is the character after conversion, FROM is the old religion.
        subtype[on_character_convert_secret_religion] = { }
        ## type_key_filter = on_character_convert_culture
        ### Fires when character converts culture for whatever reason. ROOT is the character after conversion, FROM is the old culture.
        subtype[on_character_convert_culture] = { }
        ## type_key_filter = on_acquire_nickname
        ### ROOT is the character getting the nickname.
        subtype[on_acquire_nickname] = { }
        ## type_key_filter = on_over_vassal_limit_succession
        ### Fires for vassals that can become independent as a result of liege being over vassal limit.
        subtype[on_over_vassal_limit_succession] = { }
        ## type_key_filter = on_war_started
        ### ROOT is the defender, FROM is the attacker.
        subtype[on_war_started] = { }
        ## type_key_filter = on_war_ended_victory
        ### Offensive war victory. ROOT is the defender, FROM is the attacker.
        subtype[on_war_ended_victory] = { }
        ## type_key_filter = on_war_ended_invalid
        ### ROOT is the defender, FROM is the attacker.
        subtype[on_war_ended_invalid] = { }
        ## type_key_filter = on_war_ended_whitepeace
        ### Offensive war white peace. ROOT is the defender, FROM is the attacker.
        subtype[on_war_ended_whitepeace] = { }
        ## type_key_filter = on_war_ended_defeat
        ### Offensive war defeat. ROOT is the defender, FROM is the attacker.
        subtype[on_war_ended_defeat] = { }
        ## type_key_filter = on_divorce
        ### Fries whenever a character gets divorced regardless of the reason. ROOT is the spouse, FROM is the divorcer, new_character is the religious head if applicable.
        subtype[on_divorce] = { }
        ## type_key_filter = on_holding_building_start
        ### Fires whenever a character builds something in a holding. ROOT is the builder, FROM is the holding title.
        subtype[on_holding_building_start] = { }
        ## type_key_filter = on_settlement_construction_start
        ### Fires whenever the construction of a new settlement/holding starts. ROOT is the builder, FROM is the title.
        subtype[on_settlement_construction_start] = { }
        ## type_key_filter = on_settlement_construction_completed
        ### Fires whenever the construction of a new settlement/holding finishes. ROOT is the builder, FROM is the title.
        subtype[on_settlement_construction_completed] = { }
        ## type_key_filter = on_trade_post_construction_start
        ### Fires whenever the construction of a new trade post starts. ROOT is the builder, FROM is probably the province.
        subtype[on_trade_post_construction_start] = { }
        ## type_key_filter = on_trade_post_construction_completed
        ### Fires whenever the construction of a new trade post finishes. ROOT is the builder, FROM is probably the province.
        subtype[on_trade_post_construction_completed] = { }
        ## type_key_filter = on_fort_construction_start
        ### Fires whenever the construction of a new fort starts. ROOT is the builder, FROM is probably the province.
        subtype[on_fort_construction_start] = { }
        ## type_key_filter = on_fort_construction_completed
        ### Fires whenever the construction of a new fort finishes. ROOT is the builder, FROM is probably the province.
        subtype[on_fort_construction_completed] = { }
        ## type_key_filter = on_feud_started
        ### ROOT is the starter, FROM is the target.
        subtype[on_feud_started] = { }
        ## type_key_filter = on_feud_ended
        ### ROOT is the ender, FROM is the target.
        subtype[on_feud_ended] = { }
        ## type_key_filter = on_blood_brother_death
        ### ???
        subtype[on_blood_brother_death] = { }
        ## type_key_filter = on_ai_end_raid
        ### ROOT is the AI character.
        subtype[on_ai_end_raid] = { }
        ## type_key_filter = on_mercenary_hired
        ### ROOT is the mercenary captain.
        subtype[on_mercenary_hired] = { }
        ## type_key_filter = on_mercenary_dismissed
        ### ROOT is the mercenary captain.
        subtype[on_mercenary_dismissed] = { }
        ## type_key_filter = on_mercenary_captain_replacement
        ### ROOT is the old captain, FROM is the instigator, FROMFROM is the proposed captain,
        subtype[on_mercenary_captain_replacement] = { }
        ## type_key_filter = on_enforce_peace
        ### Conclave "enforce peace" mechanic. ???
        subtype[on_enforce_peace] = { }
        ## type_key_filter = on_enforce_peace_start
        ### Conclave "enforce peace" mechanic. ???
        subtype[on_enforce_peace_start] = { }
        ## type_key_filter = on_enforce_peace_six_vassals
        ### Conclave "enforce peace" mechanic. ???
        subtype[on_enforce_peace_six_vassals] = { }
        ## type_key_filter = on_law_vote_passed
        ### ???
        subtype[on_law_vote_passed] = { }
        ## type_key_filter = on_law_vote_failed
        ### ???
        subtype[on_law_vote_failed] = { }
        ## type_key_filter = on_player_mercenary_income
        ### ???
        subtype[on_player_mercenary_income] = { }
        ## type_key_filter = on_artifact_inheritance
        ### Fired whenever a character receives an artifact (one for each artifact). ROOT is the character, FROM is the artifact, FROMFROM is the old artifact holder.
        subtype[on_artifact_inheritance] = { }
        ## type_key_filter = on_society_bi_yearly_pulse
        ### Fires every two years for characters in a society.
        subtype[on_society_bi_yearly_pulse] = { }
        ## type_key_filter = on_society_created
        ### Fires when someone joins a society with no members. ROOT is the character, FROM is the society.
        subtype[on_society_created] = { }
        ## type_key_filter = on_society_destroyed
        ### Fires when the last member of a society leaves the society and is not replaced. ROOT is the character, FROM is the society.
        subtype[on_society_destroyed] = { }
        ## type_key_filter = on_society_failed_to_find_new_leader
        ### Fires when a indestructible society fails to find a new leader from existing characters. ROOT is the society, FROM is the society's previous leader.
        subtype[on_society_failed_to_find_new_leader] = { }
        ## type_key_filter = on_society_progress_full
        ### Fires when a society's progress reaches 100. ROOT is the society's leader, FROM is the society.
        subtype[on_society_progress_full] = { }
        ## type_key_filter = on_society_progress_zero
        ### Fires when a society's progress reaches 0. ROOT is the society's leader, FROM is the society.
        subtype[on_society_progress_zero] = { }
        ## type_key_filter = on_offmap_policy_changed
        ### Fires for an offmap power's governor when the power changes its policy. ROOT is the governor, FROM is the offmap.
        subtype[on_offmap_policy_changed] = { }
        ## type_key_filter = on_offmap_status_changed
        ### Fires for an offmap power's governor when the power changes its status. ROOT is the governor, FROM is the offmap.
        subtype[on_offmap_status_changed] = { }
        ## type_key_filter = on_offmap_governor_changed
        ### Fires for an offmap power's new governor when the power changes its governor. ROOT is the new guvnah, FROM is the old governor, FROMFROM is the offmap.
        subtype[on_offmap_governor_changed] = { }
        ## type_key_filter = on_offmap_ruler_changed
        ### Fires for an offmap power's new ruler when the power changes its governor. ROOT is the new ruler, FROM is the old ruler, FROMFROM is the offmap.
        subtype[on_offmap_ruler_changed] = { }
        ## type_key_filter = on_offmap_monthly_pulse
        ### Fires for an offmap power's governor once per month on a random day. ROOT is the governor, FROM is the offmap.
        subtype[on_offmap_monthly_pulse] = { }
        ## type_key_filter = on_offmap_yearly_pulse
        ### Fires for an offmap power's governor once per year during a random monthly update. ROOT is the governor, FROM is the offmap.
        subtype[on_offmap_yearly_pulse] = { }
        ## type_key_filter = on_eu4_conversion_start
        ### Fires for the player (or a random character if in observe mode) just prior to the EU4 converter converting the game. Can be used to prepare the gamestate for EU4 conversion, then restore the original state. ROOT is the character.
        subtype[on_eu4_conversion_start] = { }
        ## type_key_filter = on_eu4_conversion_done
        ### Fires for the player (or a random character if in observe mode) just after the EU4 converter is done converting the game. ROOT is the character.
        subtype[on_eu4_conversion_done] = { }
        ## type_key_filter = on_tyranny_gained
        ### Fires for every character that gets the tyrant opinion penalty towards the tyrant when tyranny is caused by the code rather than script. Won't fire if you use add_opinion_modifer to add tyrrany. ROOT is the upset character, FROM is the tyrant.
        subtype[on_tyranny_gained] = { }
        ## type_key_filter = on_tyranny_gained_tyrant_only
        ### Fires once for the tyrant when tyranny is caused by the code rather than script. Won't fire if you use add_opinion_modifer to add tyrrany. ROOT is the tyrant.
        subtype[on_tyranny_gained_tyrant_only] = { }
        ## type_key_filter = on_revoke_attempted_started_war
        ### Fires for the character refusing a revoke title attempt and declaring war over it. ROOT is the character declaring a war, FROM is the revoker, FROMFROM is the title being revoked.
        subtype[on_revoke_attempted_started_war] = { }
        ## type_key_filter = on_retract_vassal_attempted_started_war
        ### Fires for the character refusing a retract vassalage attempt and declaring war over it. ROOT is the character declaring a war, FROM is the revoker, FROMFROM is the vassal title being retracted.
        subtype[on_retract_vassal_attempted_started_war] = { }
        ## type_key_filter = on_absorb_clan_attempted_started_war
        ### Fires for the character refusing an absorb clan attempt and declaring war over it. ROOT is the character declaring the war, FROM is the absorber.
        subtype[on_absorb_clan_attempted_started_war] = { }
        ## type_key_filter = on_split_clan_attempted_started_war
        ### Fires for the character refusing a split clan attempt and declaring war over it. ROOT is the character declaring the war, FROM is the splitter.
        subtype[on_split_clan_attempted_started_war] = { }
        ## type_key_filter = on_unit_entering_province
        ### Fires for all characters in a unit (leading a flank or subunit) when it enters a province. ROOT is the character
        subtype[on_unit_entering_province] = { }
        ## type_key_filter = on_command_unit
        ### Fires for a character when they are put in command of a flank. ROOT is the character.
        subtype[on_command_unit] = { }
        ## type_key_filter = on_command_subunit
        ### Fires for a character when they are put in command of a subunit. ROOT is the character.
        subtype[on_command_subunit] = { }
        ## type_key_filter = on_alternate_start
        ### Fires for the very first character generated in a Random/Shattered World at the end of game setup (just before the Welcome screen is shown). ROOT is the very first character created.
        subtype[on_alternate_start] = { }
        ## type_key_filter = on_crusade_preparation_starts
        ### Fires when a Crusade begins preparation. Fires for all Crusades/Jihads/GHWs regardless if they have a preparation phase - use uses_new_crusade = yes trigger to limit effects. ROOT is the religious head.
        subtype[on_crusade_preparation_starts] = { }
        ## type_key_filter = on_crusade_prepartion_ends
        ### Fires when a Crusade ends preparation. ROOT is the religious head.
        subtype[on_crusade_prepartion_ends] = { }
        ## type_key_filter = on_crusade_canceled
        ### Fires when a Crusade is canceled. ROOT is the religious head.
        subtype[on_crusade_canceled] = { }
        ## type_key_filter = on_crusade_monthly
        ### Fires once a month while a Crusade is preparing or active. ROOT is the religious head.
        subtype[on_crusade_monthly] = { }
        ## type_key_filter = on_crusade_target_changes
        ### Fires when the target of a Crusade chages (either through script or invalidation, or the target's heir inheriting). Happens immediately after the crusade_target_char and crusade_target_title scopes are updated). ROOT is the religious head, FROM is the previous target character, FROMFROM is the previous target title, FROMFROMFROM is the character who made the change if via diplomatic action, otherwise undefined.
        subtype[on_crusade_target_changes] = { }
        ## type_key_filter = on_pledge_crusade_participation
        ### Fires when a character pledges their participation, even if the war has started. Does not fire when the character is auto-pledged due to joining the war. ROOT is the character.
        subtype[on_pledge_crusade_participation] = { }
        ## type_key_filter = on_pledge_crusade_defense
        ### Fires when a character pledges their defense of the crusade target, even if the war has started. Does not fire when the character is auto-pledged due to joining the war. ROOT is the character.
        subtype[on_pledge_crusade_defense] = { }
        ## type_key_filter = on_unpledge_crusade_participation
        ### Fires when a character unpledges their participation, including the automatic unpledging on death and conversion. ROOT is the character.
        subtype[on_unpledge_crusade_participation] = { }
        ## type_key_filter = on_unpledge_crusade_defense
        ### Fires when a character unpledges their defense, including the automatic unpledging on death and conversion. ROOT is the character.
        subtype[on_unpledge_crusade_defense] = { }
        ## type_key_filter = on_excommunicate_interaction
        ### Fires when someone is excommunicated via the hardcoded diplomatic interaction. ROOT is the excommunicated character, FROM is the asker, FROMFROM is the religious head.
        subtype[on_excommunicate_interaction] = { }
        ## type_key_filter = on_character_renamed
        ### Fires when a player renames a character. This includes the "newborn" event. ROOT is the renamed character.
        subtype[on_character_renamed] = { }
        ## type_key_filter = on_title_renamed
        ### Fires when a player renames a title. This includes renaming via the title screen. ROOT is the renamed title.
        subtype[on_title_renamed] = { }
        ## type_key_filter = on_province_renamed
        ### Fires when a player renames a province. This includes renaming via the province view. ROOT is the renamed province.
        subtype[on_province_renamed] = { }
        ## type_key_filter = on_artifact_renamed
        ### Fires when a player renames an artifact. ROOT is the renamed artifact.
        subtype[on_artifact_renamed] = { }
        ## type_key_filter = on_bloodline_renamed
        ### Fires when a player renames an bloodline. ROOT is the renamed bloodline.
        subtype[on_bloodline_renamed] = { }
        ## type_key_filter = on_employer_change
        ### Fires when a change of employer has been detected. ROOT is the character that got a new employer, FROM is the previous employer (undefined if newly created), FROMFROM is the new employer.
        subtype[on_employer_change] = { }
        ## type_key_filter = on_host_change
        ### Fires when a change of host has been detected. ROOT is the character that got a new host, FROM is the previous host (undefined if newly created), FROMFROM is the new host.
        subtype[on_host_change] = { }
        # TODO: Docs
        subtype[on_post_birth_stillbirth] = { }
    }
}
on_action = {

    ## replace_scope = { this = character root = character }
    subtype[on_startup] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_yearly_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_bi_yearly_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_five_year_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_decade_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_yearly_childhood_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_childhood_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_adolescence_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_focus_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = province root = province }
    subtype[on_province_major_modifier] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.province>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.province>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.province>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = province root = province }
    subtype[on_outbreak] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.province>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.province>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.province>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_combat_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_combat_starting] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_siege_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_battle_won] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_major_battle_won] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_battle_won_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_major_battle_won_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_battle_won_owner] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_battle_lost] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_major_battle_lost] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_battle_lost_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_major_battle_lost_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_battle_lost_owner] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_siege_won_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_won_leader_fort] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_won_leader_trade_post] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_siege_lost_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_lost_leader_fort] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_lost_leader_trade_post] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_siege_over_winner] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_over_winner_fort] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_over_winner_trade_post] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_siege_over_loc_chars] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_over_loc_chars_fort] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_siege_over_loc_chars_trade_post] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_failed_assassination] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_failed_assassination_disc] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_assassination] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_assassination_disc] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_birth] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_adulthood] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_post_birth] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_pregnancy] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_marriage] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_betrothal] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_become_imprisoned_any_reason] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_avoided_imprison_started_war] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_became_imprisoned] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_avoided_imprison_fled_country] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_released_from_prison] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_executed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_exiled] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_prepared_invasion_monthly] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_prepared_invasion_aborts] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_prepared_invasion_expires] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_death] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_merc_rampage] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_merc_leave] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_merc_turn_coat_from] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_merc_turn_coat_to] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_holy_order_leave] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_loot_settlement] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_loot_province] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_warleader_death] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_approve_law] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_approve_de_jure_law] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = province root = province }
    subtype[on_rebel_revolt] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.province>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.province>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.province>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_defect_to_rebels] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_defect_from_rebels] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title fromfrom = character }
    subtype[on_crusade_creation] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title fromfrom = character }
    subtype[on_crusade_invalid] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = title root = title from = character fromfrom = character }
    subtype[on_crusade_success] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.title>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.title>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.title>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = title root = title from = character fromfrom = character }
    subtype[on_crusade_failure] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.title>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.title>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.title>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_forced_consort] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_reform_religion] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = province root = province }
    subtype[on_county_religion_change] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.province>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.province>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.province>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_vassal_accepts_religious_conversion] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_heresy_takeover] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_become_doge] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_elective_gavelkind_succession] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = unit root = unit from = character }
    subtype[on_entering_port] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.unit>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.unit>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.unit>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_rel_elector_chosen] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_rel_head_chosen] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_settlement_looted] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_navy_returns_with_loot] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_create_title] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title fromfrom = character }
    subtype[on_new_holder] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title fromfrom = character }
    subtype[on_new_holder_inheritance] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title fromfrom = character }
    subtype[on_new_holder_usurpation] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_create_chronicle_if_empty] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_chronicle_owner_change] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_chronicle_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = religion }
    subtype[on_character_convert_religion] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = religion }
    subtype[on_character_convert_secret_religion] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = culture }
    subtype[on_character_convert_culture] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_acquire_nickname] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_over_vassal_limit_succession] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_war_started] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_war_ended_victory] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_war_ended_invalid] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_war_ended_whitepeace] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_war_ended_defeat] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_divorce] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_holding_building_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_settlement_construction_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = title }
    subtype[on_settlement_construction_completed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_trade_post_construction_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_trade_post_construction_completed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_fort_construction_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = province }
    subtype[on_fort_construction_completed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_feud_started] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_feud_ended] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_blood_brother_death] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_ai_end_raid] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_mercenary_hired] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_mercenary_dismissed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_mercenary_captain_replacement] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_enforce_peace] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_enforce_peace_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_enforce_peace_six_vassals] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_law_vote_passed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_law_vote_failed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_player_mercenary_income] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = artifact fromfrom = character }
    subtype[on_artifact_inheritance] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_society_bi_yearly_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = society }
    subtype[on_society_created] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = society }
    subtype[on_society_destroyed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = society root = society from = character }
    subtype[on_society_failed_to_find_new_leader] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.society>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.society>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.society>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = society }
    subtype[on_society_progress_full] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = society }
    subtype[on_society_progress_zero] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = offmap }
    subtype[on_offmap_policy_changed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = offmap }
    subtype[on_offmap_status_changed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = offmap }
    subtype[on_offmap_governor_changed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = offmap }
    subtype[on_offmap_ruler_changed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = offmap }
    subtype[on_offmap_monthly_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = offmap }
    subtype[on_offmap_yearly_pulse] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_eu4_conversion_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_eu4_conversion_done] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_tyranny_gained] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_tyranny_gained_tyrant_only] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = title }
    subtype[on_revoke_attempted_started_war] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = title }
    subtype[on_retract_vassal_attempted_started_war] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_absorb_clan_attempted_started_war] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character }
    subtype[on_split_clan_attempted_started_war] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_unit_entering_province] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_command_unit] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_command_subunit] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_alternate_start] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_crusade_preparation_starts] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_crusade_prepartion_ends] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_crusade_canceled] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_crusade_monthly] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = title fromfromfrom = character }
    subtype[on_crusade_target_changes] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_pledge_crusade_participation] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_pledge_crusade_defense] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_unpledge_crusade_participation] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_unpledge_crusade_defense] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_excommunicate_interaction] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character }
    subtype[on_character_renamed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = title root = title }
    subtype[on_title_renamed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.title>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.title>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.title>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = province root = province }
    subtype[on_province_renamed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.province>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.province>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.province>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = artifact root = artifact }
    subtype[on_artifact_renamed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.artifact>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.artifact>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.artifact>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = bloodline root = bloodline }
    subtype[on_bloodline_renamed] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.bloodline>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.bloodline>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.bloodline>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_employer_change] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    subtype[on_host_change] = {
        ## cardinality = 0..1
        events = {
            ## cardinality = 0..inf
            <event.character>
        }
        ## cardinality = 0..1
        random_events = {
            ## cardinality = 0..inf
            ### Left hand is weight. Chance of nothing happening.
            int = 0
            ## cardinality = 0..inf
            ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
            int = <event.character>
            ### Each block is evaluated separately and has one (or none if the 0 entry is chosen) event happen.
            scalar = {
                ## cardinality = 0..1
                ### How many days to delay the event. Useful to ensure the player doesn't get spammed with a bunch of events at the same time.
                delay = int

                ## cardinality = 0..inf
                ### Left hand is weight, multiplied by the event's weight_multiplier. Right hand is event.
                int = <event.character>

                ## cardinality = 0..1
                ### Left hand is weight. Chance of nothing happening.
                int = 0
            }

        }

        ## cardinality = 0..1
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }
    }
}
