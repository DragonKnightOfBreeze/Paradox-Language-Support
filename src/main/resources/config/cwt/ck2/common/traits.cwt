types = {
    type[trait] = {
        path_strict = yes
        path = "game/common/traits"

        subtype[education] = {
            education = yes
        }

        subtype[ruler_designer] = {
            ## cardinality = 0..1
            customizer = yes
        }

        subtype[cached] = {
            cached = yes
        }

        subtype[hidden_same_trait] = {
            same_trait_visibility = yes
            ## cardinality = 0..0
            hidden_from_others = bool
            ## cardinality = 0..0
            is_visible = {

            }
        }
        subtype[hidden_self] = {
            ## cardinality = 0..0
            same_trait_visibility = bool
            hidden_from_others = yes
            ## cardinality = 0..0
            is_visible = {

            }
        }
        subtype[hidden_generic] = {
            ## cardinality = 0..0
            same_trait_visibility = bool
            ## cardinality = 0..0
            hidden_from_others = bool
            is_visible = {

            }
        }

        subtype[health_reducing] = {
            health = int[-inf..-1]
        }

        subtype[not_hidden] = {
            ## cardinality = 0..1
            hidden = no
            localisation = {
                name = "$"
                description = "$_desc"

                subtype[health_reducing] = {
                    death_reason = "$_death"
                }
            }
        }

    }
}

# Most info from the wiki
## replace_scope = { this = character root = character }
### Don't forget to add a gfx resource by the name of GFX_trait_<trait>!
trait = {
    ## cardinality = 0..1
    ### Conditions for randomly starting the campaign with the trait, being randomly generated with the trait or being randomly given it when coming of age. add_trait can circumvent it.
    potential = single_alias_right[trigger_clause]

    # TODO: What happens when assigning new opposite trait - old replaced or new not added? What other effects are there?
    ## cardinality = 0..1
    ### This trait is considered opposite to the ones in this block. Opposite traits cannot be held simultaneously with this trait.
    opposites = {
        ## cardinality = 1..inf
        <trait>
    }

    ## cardinality = 0..1
    ### If yes, children of fathers with this trait will always inherit it. Defaults to "no".
    agnatic = bool

    ## cardinality = 0..1
    ### If yes, children of mothers with this trait will always inherit it. Defaults to "no".
    enatic = bool

    ## cardinality = 0..1
    ### If set, [value] children out of 10000 will be born with the trait.
    birth = int[1..10000]

    ## cardinality = 0..1
    ### If yes, the character counts as blind. Defaults to "no".
    blinding = bool

    ## cardinality = 0..1
    ### If yes, characters with this trait are cached for easy access with the <trait> = {} scope. Use with care. Defaults to "no".
    cached = bool

    ## cardinality = 0..1
    ### If no, the character cannot hold titles. Defaults to "yes".
    can_hold_titles = bool

    ## cardinality = 0..1
    ### If yes, the character cannot inherit any titles. Defaults to "no".
    cannot_inherit = bool

    ## cardinality = 0..1
    ### If yes, the character cannot marry. Defaults to "no".
    cannot_marry = bool

    ## cardinality = 0..1
    ### If set, this trait is a caste trait and the number determines its place in the caste hierarchy.
    caste_tier = int

    # TODO: possibly add to that XOR for hidden traits? It's just is_visible = { always = no }, after all.
    ## cardinality = 0..1
    ### If yes, this trait isn't shown in the character view. Defaults to "no".
    hidden = bool

    ## cardinality = 0..1
    ### If yes, the character stops aging once they get the trait and they'll not die of natural causes. Defaults to "no".
    immortal = bool

    ## cardinality = 0..1
    ### If yes, this trait activates the in_hiding status. Defaults to "no".
    in_hiding = bool

    # TODO: What exactly does that affect?
    ## cardinality = 0..1
    ### If yes, the character counts as being inbred. Defaults to "no".
    inbred = bool

    ## cardinality = 0..1
    ### If yes, this trait makes the character incapacitated, requiring a regency for rulers. Defaults to "no".
    incapacitating = bool

    ## cardinality = 0..1
    ### If set, children of parents with this trait have [value]% chance to inherit it.
    inherit_chance = int[1..100]

    ## cardinality = 0..1
    ### If set, children of parents that both have this trait have [value]% chance to inherit it.
    both_parent_has_trait_inherit_chance = int[1..100]

    ## cardinality = 0..1
    ### If yes, this trait counts for the has_epidemic condition. Defaults to "no".
    is_epidemic = bool

    ## cardinality = 0..1
    ### If yes, this trait counts for the health_traits condition. Defaults to "no".
    is_health = bool

    ## cardinality = 0..1
    ### If yes, this trait counts for the is_ill condition and cure_illness effect. Defaults to "no".
    is_illness = bool

    ## cardinality = 0..1
    ### If yes, this trait is a leadership trait and counts for the can_have_more_leadership_traits condition. Defaults to "no".
    leader = bool

    # TODO: Confirm
    ## cardinality = 0..1
    ### UNCONFIRMED Determines the limit on how many leader = yes traits a character with this trait can have for the can_have_more_leadership_traits condition.
    leadership_traits = int

    # TODO: What's that do?
    ## cardinality = 0..1
    ### If yes, this trait is a childhood trait. Defaults to "no".
    childhood = bool

    ## cardinality = 0..1
    ### If yes, this trait counts for the lifestyle_traits condition. Defaults to "no".
    lifestyle = bool

    ## cardinality = 0..1
    ### If yes, this trait counts for the personality_traits condition. Defaults to "no".
    personality = bool

    ## cardinality = 0..1
    ### If yes, for characters that use the decadence mechanic this disables accumulating any. Defaults to "no".
    prevent_decadence = bool

    ## cardinality = 0..1
    ### If yes, this trait counts for the is_priest condition. Defaults to "no".
    priest = bool

    ## cardinality = 0..1
    ### If yes, this trait means the character is on a pilgrimage, requiring a regency for rulers but not removing any wards. Defaults to "no".
    pilgrimage = bool

    # TODO: Specific semantics vary with the general trait type. ????
    ## cardinality = 0..1
    ### If no, this trait will not be randomly given to characters when generating them. It can still be inherited. Defaults to "yes".
    random = bool

    # TODO: Confirm
    ## cardinality = 0..1
    ### If yes, when the character dies without a dynastic heir, the actual heir also gains the trait. Defaults to "no".
    rebel_inherited = bool

    ## cardinality = 0..1
    ### If yes, this trait is automatically removed upon religion change (including reformation). Defaults to "no".
    religious = bool

    ## cardinality = 0..1
    ### If set, this trait denotes belonging to a sect of the given religion. Children will automatically inherit the trait on birth.
    religious_branch = <religion>

    ## cardinality = 0..1
    ### If yes, the character will tolerate members of the given religion group and will be tolerated by them. Defaults to "no".
    tolerates_<religion_group> = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    vice = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    virtue = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    succession_gfx = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    is_symptom = bool

    ## cardinality = 0..1
    ### If no, this trait cannot be chosen in the ruler designer. Defaults to "yes".
    customizer = bool

    subtype[ruler_designer] = {
        ## cardinality = 0..1
        ### If set, this trait will cost [value] in ruler designer instead of the automatically calculated cost.
        ruler_designer_cost = int
    }

    ## cardinality = 0..1
    ### If yes, this trait is an education trait. Defaults to "no".
    education = bool

    subtype[education] = {
        ### What attribute does this education trait belong to.
        attribute = enum[attributes]
    }

    subtype[hidden_same_trait] = {
        ### If yes, this trait is only visible to characters with the same trait. Defaults to "no".
        same_trait_visibility = bool
    }
    subtype[hidden_self] = {
        ### If yes, this trait is only visible its holder. Defaults to "no".
        hidden_from_others = bool
    }
    subtype[hidden_generic] = {
        ## replace_scope = { this = character root = character from = character}
        ### Conditions for the trait to be visible to a character. ROOT is the viewer, FROM is the trait holder.
        is_visible = {
            alias_match_left[trigger] = alias_match_left[trigger]
        }
    }

    ## cardinality = 0..inf
    alias_name[modifier] = alias_match_left[modifier]

    ## cardinality = 0..1
    ### Command modifiers applied to characters with this trait.
    command_modifier = {
        alias_name[command_modifier] = alias_match_left[command_modifier]
    }

    # TODO: figure out rules what requires what
    # TODO: also child stuff is a bit weird

    ## cardinality = 0..1
    ### Noun component of a compliment to males with this trait. Used for GetRootFromCompliment and the like.
    male_compliment = localisation

    ## cardinality = 0..1
    ### Noun component of a compliment to females with this trait. Used for GetRootFromCompliment and the like.
    female_compliment = localisation

    ## cardinality = 0..1
    ### Noun component of a compliment to characters with this trait when the source is a child, used instead of adult versions. Used for GetRootFromCompliment and the like.
    child_compliment = localisation

    ## cardinality = 0..1
    ### Adjective component of a compliment to males with this trait. Used for GetRootFromCompliment and the like.
    male_compliment_adj = localisation

    ## cardinality = 0..1
    ### Adjective component of a compliment to females with this trait. Used for GetRootFromCompliment and the like.
    female_compliment_adj = localisation

    ## cardinality = 0..1
    ### Adjective component of a compliment to characters with this trait when the source is a child, used instead of adult versions. Used for GetRootFromCompliment and the like.
    child_compliment_adj = localisation

    ## cardinality = 0..1
    ### Noun component of an inslut to males with this trait. Used for GetRootFromInsult and the like.
    male_insult = localisation

    ## cardinality = 0..1
    ### Noun component of an inslut to females with this trait. Used for GetRootFromInsult and the like.
    female_insult = localisation

    ## cardinality = 0..1
    ### Noun component of an inslut to characters with this trait when the source is a child, used instead of adult versions. Used for GetRootFromInsult and the like.
    child_insult = localisation

    ## cardinality = 0..1
    ### Adjective component of an inslut to males with this trait. Used for GetRootFromInsult and the like.
    male_insult_adj = localisation

    ## cardinality = 0..1
    ### Adjective component of an inslut to males with this trait. Used for GetRootFromInsult and the like.
    female_insult_adj = localisation

    ## cardinality = 0..1
    ### Adjective component of an inslut to characters with this trait when the source is a child, used instead of adult versions. Used for GetRootFromInsult and the like.
    child_insult_adj = localisation
}