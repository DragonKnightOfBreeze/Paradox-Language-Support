types = {
	## type_key_filter = focus_tree
	type[focus_tree] = {
		path = "game/common/national_focus"
		name_field = "id"
	}

	## type_key_filter = focus
	type[focus] = {
		path = "game/common/national_focus"
		skip_root_key = focus_tree
		name_field = "id"
	}

	## type_key_filter = shared_focus
	type[shared_focus] = {
		path = "game/common/national_focus"
		name_field = "id"
	}
}

## replace_scope = { root = country this = country }
focus_tree = {
	id = localisation

	country = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	default = bool

	## cardinality = 0..1
	reset_on_civilwar = bool

	## cardinality = 0..inf
	shared_focus = <shared_focus>

	## cardinality = ~1..1
	continuous_focus_position = {
		x = int
		y = int
	}

	## cardinality = 0..1
	initial_show_position = {
		## cardinality = 0..1
		focus = <focus>

		## cardinality = 0..1
		focus = <shared_focus>

		## cardinality = 0..1
		x = int

		## cardinality = 0..1
		y = int

		## cardinality = 0..inf
		offset = {
			## cardinality = 0..1
			x = int
			## cardinality = 0..1
			y = int

			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}

	## cardinality = 0..inf
	focus = {
		id = localisation

		## cardinality = 0..1
		text = localisation

		## cardinality = ~1..1
		## severity = warning
		icon = <spriteType>

		cost = float
		x = int
		y = int

		## cardinality = 0..inf
		offset = {
			## cardinality = 0..1
			x = int
			## cardinality = 0..1
			y = int
			## cardinality = 0..1
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}

		## cardinality = 0..1
		relative_position_id = <focus>

		## cardinality = 0..1
		relative_position_id = <shared_focus>

		### Used for focuses that can change title/desc.
		## cardinality = 0..1
		dynamic = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		dynamic = no

		## cardinality = 0..1
		available_if_capitulated = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		available_if_capitulated = no

		## cardinality = 0..1
		cancel_if_invalid = no
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		cancel_if_invalid = yes

		## cardinality = 0..1
		continue_if_invalid = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		continue_if_invalid = no

		## cardinality = 0..1
		cancelable = no
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		cancelable = yes

		## cardinality = 0..1
		bypass_if_unavailable = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		bypass_if_unavailable = no

		## cardinality = 0..inf
		will_lead_to_war_with = scope[country]

		## cardinality = 0..inf
		will_lead_to_war_with = enum[country_tags]

		## cardinality = 0..inf
		prerequisite = {
			## cardinality = 0..inf
			focus = <focus>

			## cardinality = 0..inf
			focus = <shared_focus>
		}

		## cardinality = 0..inf
		mutually_exclusive = {
			## cardinality = 0..inf
			focus = <focus>

			## cardinality = 0..inf
			focus = <shared_focus>
		}

		## cardinality = 0..1
		bypass = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		allow_branch = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		available = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		cancel = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		historical_ai = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		select_effect = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		## push_scope = any
		complete_tooltip = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = ~1..1
		completion_reward = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		ai_will_do = {
			## cardinality = 0..1
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}

		## cardinality = 0..1
		search_filters = {
			## cardinality = ~1..inf
			value_set[focus_filter]
		}
	}
}

## replace_scope = { root = country this = country }
shared_focus = {
	id = localisation

	## cardinality = 0..1
	text = localisation

	## cardinality = ~1..1
	## severity = warning
	icon = <spriteType>
	cost = float
	x = int
	y = int

	## cardinality = 0..inf
	offset = {
		## cardinality = 0..1
		x = int
		## cardinality = 0..1
		y = int

		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	## cardinality = 0..1
	relative_position_id = <shared_focus>

	## cardinality = 0..1
	relative_position_id = <focus>

	### Used for focuses that can change title/desc.
	## cardinality = 0..1
	dynamic = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	dynamic = no

	## cardinality = 0..1
	available_if_capitulated = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	available_if_capitulated = no

	## cardinality = 0..1
	cancel_if_invalid = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	cancel_if_invalid = no

	## cardinality = 0..1
	continue_if_invalid = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	continue_if_invalid = no

	## cardinality = 0..1
	cancelable = no
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	cancelable = yes

	## cardinality = 0..1
	bypass_if_unavailable = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	bypass_if_unavailable = no

	## cardinality = 0..inf
	will_lead_to_war_with = scope[country]

	## cardinality = 0..inf
	will_lead_to_war_with = enum[country_tags]

	## cardinality = 0..inf
	prerequisite = {
		## cardinality = 0..inf
		focus = <shared_focus>

		## cardinality = 0..inf
		focus = <focus>
	}

	## cardinality = 0..inf
	mutually_exclusive = {
		## cardinality = 0..inf
		focus = <shared_focus>
		## cardinality = 0..inf
		focus = <focus>
	}

	## cardinality = 0..1
	bypass = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	allow_branch = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	available = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	cancel = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	historical_ai = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	select_effect = {
		## cardinality = ~1..inf
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	## push_scope = any
	complete_tooltip = {
		## cardinality = ~1..inf
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = ~1..1
	completion_reward = {
		## cardinality = ~1..inf
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	ai_will_do = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	search_filters = {
		## cardinality = ~1..inf
		value_set[focus_filter]
	}
}
