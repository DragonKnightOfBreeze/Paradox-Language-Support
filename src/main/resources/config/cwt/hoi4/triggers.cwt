## scope = any
alias[trigger:<scripted_trigger>] = bool

### Check state id.
## scope = state
alias[trigger:state] = scope[state]

### Check state id.
## scope = state
alias[trigger:state] = <state>

### A conditional trigger.
## scope = any
alias[trigger:if] = {
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[trigger] = alias_match_left[trigger]
}

### A conditional trigger.
## scope = any
alias[trigger:else_if] = {
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[trigger] = alias_match_left[trigger]
}

### A conditional trigger.
## scope = any
alias[trigger:else] = {
	alias_name[trigger] = alias_match_left[trigger]
}

### Compare leader skill levels.
## scope = { unit_leader combat }
alias[trigger:skill] = int

### Check if we are in this combat phase.
## scope = combat
alias[trigger:phase] = enum[phases]

### Check if the current country exist. The country of the scope you are in. Example: DEN = { exists = yes }.
## scope = country
alias[trigger:exists] = bool

### Check if the difficulty is above or below specified value 0-2 (difficulty enum). Example: difficulty > 0 (above easy).
## scope = any
alias[trigger:difficulty] = int

### Check if any neighbor country meets the trigger.
## scope = country
## push_scope = country
alias[trigger:any_neighbor_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check amount of resource country has.
alias[trigger:<resource>] = int

### Has country flag been set. Check flag val date set and days since set. Example: has_country_flag = test_flag.
## scope = country
## severity = warning
alias[trigger:has_country_flag] = value[country_flag]

### Has country flag been set. Check flag val date set and days since set. Example: has_country_flag = test_flag.
## scope = country
## severity = warning
alias[trigger:has_country_flag] = {
	flag = value[country_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	date = date_field
	## cardinality = 0..1
	days = int
}

### Check amount of reserves.
alias[trigger:reserves] = int

### Country tag trigger.
## scope = { country combat }
alias[trigger:tag] = scope[country]

### Country tag trigger.
## scope = { country combat }
alias[trigger:tag] = enum[country_tags]

### Check if any country meets the trigger.
## scope = any
## push_scope = country
alias[trigger:any_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Compares a variable to a number or variable.
## scope = any
alias[trigger:check_variable] = {
	value[variable] = variable_field_32
}

### Compares a variable to a number or variable.
## scope = any
alias[trigger:check_variable] = {
	variable_field_32 = variable_field_32
}

### Compares a variable to a number or variable.
## scope = any
alias[trigger:check_variable] = {
	variable_field_32 = value[variable]
}

### Compares a variable to a number or variable.
## scope = any
alias[trigger:check_variable] = {
	variable_field_32 = enum[country_tags]
}

### Compares a variable to a number or variable.
## scope = any
alias[trigger:check_variable] = {
	variable_field_32 = scope[country]
}

### Compares a variable to a number or variable.
## scope = any
alias[trigger:check_variable] = {
	var = variable_field_32
	value = variable_field_32
	## cardinality = 0..1
	### Defaults to greater_than_or_equals.
	compare = enum[var_compares]
}

enums = {
	enum[var_compares] = {
		less_than
		less_than_or_equals
		greater_than
		greater_than_or_equals
		equals
		not_equals
	}
}

### Check state's strategic area id.
## scope = state
alias[trigger:region] = <strategic_region>

### Checks if the country is subject of any other country.
## scope = country
alias[trigger:is_subject] = bool

### Check state's supply area id.
## scope = state
alias[trigger:area] = <supply_area>

### Check the global threat value. 0-1 value.
## scope = any
alias[trigger:threat] = float[0..1]

### Check the global threat value. 0-100 value.
## scope = any
alias[trigger:threat] = float[0..100]

### Always returns specified value.
## scope = any
alias[trigger:always] = bool

### Is scope state a capital. 169 = { is_capital = yes }.
## scope = state
alias[trigger:is_capital] = bool

### Has global flag been set. Check flag val date set and days since set. Example: has_global_flag = test_flag.
## scope = any
## severity = warning
alias[trigger:has_global_flag] = value[global_flag]

### Has global flag been set. Check flag val date set and days since set. Example: has_global_flag = test_flag.
## scope = any
## severity = warning
alias[trigger:has_global_flag] = {
	flag = value[global_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	date = date_field
	## cardinality = 0..1
	days = int
}

### Check if attacker side in combat.
## scope = combat
alias[trigger:is_attacker] = bool

### Checks if player has a DLC. Example: has_dlc = "name of the dlc".
## scope = any
alias[trigger:has_dlc] = enum[dlc]

### Check if country has idea.
## scope = country
alias[trigger:has_idea] = enum[idea_name]

### Check if any enemy country meets the trigger.
## scope = country
## push_scope = country
alias[trigger:any_enemy_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if neighbor ( controlled territory ) with specified country.
## scope = country
alias[trigger:is_neighbor_of] = scope[country]

### Check if neighbor ( controlled territory ) with specified country.
## scope = country
alias[trigger:is_neighbor_of] = enum[country_tags]

### Check what opinion the country has towards a specified country.
## scope = country
alias[trigger:has_opinion] = {
	target = scope[country]
	target = enum[country_tags]
	value = int
}

### Check if a country has the opinion modifier.
## scope = country
alias[trigger:has_opinion_modifier] = <opinion>

### Checks if the country is subject of specified country.
## scope = country
alias[trigger:is_subject_of] = scope[country]

### Checks if the country is subject of specified country.
## scope = country
alias[trigger:is_subject_of] = enum[country_tags]

### Check if all neighbor countries meet the trigger.
## scope = country
## push_scope = country
alias[trigger:all_neighbor_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all countries meets the trigger.
## scope = any
## push_scope = country
alias[trigger:all_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all enemy countries meet the trigger.
## scope = country
## push_scope = country
alias[trigger:all_enemy_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if combat is at night.
## scope = combat
alias[trigger:night] = bool

### Check if we have digin level (lowest).
## scope = combat
alias[trigger:dig_in] = float

### Check combat province temperature.
## scope = combat
alias[trigger:temperature] = int

### Check that average armor level of combatant is over a certain level.
## scope = combat
alias[trigger:armor] = float

### Is country at war.
## scope = country
alias[trigger:has_war] = bool

### Check if state is controlled by.
## scope = state
alias[trigger:is_controlled_by] = scope[country]

### Check if state is controlled by.
## scope = state
alias[trigger:is_controlled_by] = enum[country_tags]

### Check if state is owned by.
## scope = state
alias[trigger:is_owned_by] = scope[country]

### Check if state is owned by.
## scope = state
alias[trigger:is_owned_by] = enum[country_tags]

### Compare leader skill levels.
## scope = { unit_leader combat }
alias[trigger:skill_advantage] = int

### Check owner for state(s).
## scope = country
alias[trigger:owns_state] = scope[state]

### Check owner for state(s).
## scope = country
alias[trigger:owns_state] = <state>

### Check controller for state(s).
## scope = country
alias[trigger:controls_state] = scope[state]

### Check controller for state(s).
## scope = country
alias[trigger:controls_state] = <state>

### Does country government (ruling party) belong to ideology group.
## scope = country
alias[trigger:has_government] = <ideology>

### Does country government (ruling party) belong to ideology group.
## scope = country
alias[trigger:has_government] = scope[country]

### Has state flag been setCheck flag val date set and days since set.
## scope = state
## severity = warning
alias[trigger:has_state_flag] = value[state_flag]

### Has state flag been setCheck flag val date set and days since set.
## scope = state
## severity = warning
alias[trigger:has_state_flag] = {
	flag = value[state_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	date = date_field
	## cardinality = 0..1
	days = int
}

### Is countries at war.
## scope = country
alias[trigger:has_war_with] = scope[country]

### Is countries at war.
## scope = country
alias[trigger:has_war_with] = enum[country_tags]

### Checks for amount of divisions in specified state owned by current country.
## scope = country
alias[trigger:divisions_in_state] = {
	size = float
	state = scope[state]
	state = <state>
	## cardinality = 0..1
	type = enum[land_units]
}

### Check if the specified country exist.
## scope = any
alias[trigger:country_exists] = scope[country]

### Check if the specified country exist.
## scope = any
alias[trigger:country_exists] = enum[country_tags]

### Checks for amount of ships in specified area.
## scope = country
alias[trigger:ships_in_area] = {
	type = <unit.ship_unit>
	area = <strategic_region>
	size = int
}

### Checks for amount of divisions, additionally of a specified type.
## scope = country
alias[trigger:has_army_size] = {
	size = float
	## cardinality = 0..1
	type = enum[land_units]
}

### Checks for amount of ships, additionally of a specified type, archetype, or sub unit definition. Example: has_navy_size = { size > 10 type = convoy }; has_navy_size = { size < 1 archetype = ship_hull_light }; has_navy_size = { size > 39 unit = heavy_cruiser };	has_navy_size = { size < 100 }.
## scope = country
alias[trigger:has_navy_size] = {
	size = float
	## cardinality = 0..1
	type = enum[ship_units]
	## cardinality = 0..1
	unit = <unit.ship_unit>
	## cardinality = 0..1
	archetype = <equipment.archetype_equip>
}

### Check amount of military factories.
## scope = country
alias[trigger:num_of_military_factories] = variable_field

### Check amount of civilian factories.
## scope = country
alias[trigger:num_of_civilian_factories] = variable_field

### Check amount of naval factories.
## scope = country
alias[trigger:num_of_naval_factories] = variable_field

### Check amount of nukes.
## scope = country
alias[trigger:num_of_nukes] = variable_field

### Check amount of manpower.
## scope = country
alias[trigger:has_manpower] = variable_field

### Check amount of political power.
## scope = country
alias[trigger:has_political_power] = variable_field

### Check amount of available military factories.
## scope = country
alias[trigger:num_of_available_military_factories] = variable_field

### Check amount of available naval factories.
## scope = country
alias[trigger:num_of_available_naval_factories] = variable_field

### Check amount of available civilian factories.
## scope = country
alias[trigger:num_of_available_civilian_factories] = variable_field

### Check if member of same faction as specified country.
## scope = country
alias[trigger:is_in_faction_with] = scope[country]

### Check if member of same faction as specified country.
## scope = country
alias[trigger:is_in_faction_with] = enum[country_tags]

### Check if member of any faction.
## scope = country
alias[trigger:is_in_faction] = bool

### Check if country leads a faction.
## scope = country
alias[trigger:is_faction_leader] = bool

### Check if guaranteed by specified country.
## scope = country
alias[trigger:is_guaranteed_by] = scope[country]

### Check if guaranteed by specified country.
## scope = country
alias[trigger:is_guaranteed_by] = enum[country_tags]

### Check if country has guaranteed specified country.
## scope = country
alias[trigger:has_guaranteed] = scope[country]

### Check if country has guaranteed specified country.
## scope = country
alias[trigger:has_guaranteed] = enum[country_tags]

### Check country has military access to specified country.
## scope = country
alias[trigger:has_military_access_to] = scope[country]

### Check country has military access to specified country.
## scope = country
alias[trigger:has_military_access_to] = enum[country_tags]

### Check if country gives military access to specified country.
## scope = country
alias[trigger:gives_military_access_to] = scope[country]

### Check if country gives military access to specified country.
## scope = country
alias[trigger:gives_military_access_to] = enum[country_tags]

### Check if any state meets the trigger.
## scope = any
## push_scope = state
alias[trigger:any_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any owned state meets the trigger.
## scope = country
## push_scope = state
alias[trigger:any_owned_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any neighbor state meets the trigger.
## scope = state
## push_scope = state
alias[trigger:any_neighbor_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any allied country meets the trigger. Does not include the country itself.
## scope = country
## push_scope = country
alias[trigger:any_allied_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all states meets the trigger.
## scope = any
## push_scope = state
alias[trigger:all_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all owned states meets the trigger.
## scope = country
## push_scope = state
alias[trigger:all_owned_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all neighbor states meets the trigger.
## scope = state
## push_scope = state
alias[trigger:all_neighbor_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all allied countries meet the trigger. Does not include the country itself.
## scope = country
## push_scope = country
alias[trigger:all_allied_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if a country is close to surrendering.
## scope = country
alias[trigger:surrender_progress] = variable_field

### Checks if daily political power increase is more or less that specified value. Example: political_power_daily > 1.5.
## scope = country
alias[trigger:political_power_daily] = variable_field

### Compares the ratio of total industrial capacity between the scope country and the one set with 'tag'.
## scope = country
alias[trigger:ic_ratio] = {
	tag = scope[country]
	tag = enum[country_tags]
	ratio = float
}

### Compares the warscore of all wars in a country to see if any fullfills the comparison condition 0-100 - Example any_war_score > 40.
## scope = country
alias[trigger:any_war_score] =  variable_field

### Check if country has idea with specified trait.
## scope = country
alias[trigger:has_idea_with_trait] = <country_leader_trait>

### Checks for amount of aircrafts, additionally of a specified type.
## scope = country
alias[trigger:has_deployed_air_force_size] = {
	size = float
	## cardinality = 0..1
	type = enum[air_units]
}

### Check what terrain is in combat.
## scope = combat
alias[trigger:is_fighting_in_terrain] = <terrain>

### Check if defender side in combat.
## scope = combat
alias[trigger:is_defender] = bool

### Check if combatant has modifier.
## scope = combat
alias[trigger:has_combat_modifier] = enum[combat_modifiers]

### Check if defender side in combat.
## scope = combat
alias[trigger:is_winning] = bool

### Check if fastest unit of combatant is over this limit.
## scope = combat
alias[trigger:fastest_unit] = float

### Checks if side has an advantage in recon level.
## scope = combat
alias[trigger:recon_advantage] = bool

### Check if country has technology.
## scope = country
alias[trigger:has_tech] = <technology>

### Checks researched land doctrine level.
## scope = country
alias[trigger:land_doctrine_level] = int

### Check if current game is ironman.
## scope = any
alias[trigger:is_ironman] = bool

### Compare the initial start date of current game.
## scope = any
alias[trigger:has_start_date] = date_field

### Checks for a specific date.
## scope = any
alias[trigger:date] = date_field

### Checks country has built a set number (at least) of a certain type of building since taking goal.
## scope = country
alias[trigger:has_built] = {
	type = <building>
	value = int
}

### Checks if country has available ideas with specific traits more than limit.
## scope = country
alias[trigger:has_available_idea_with_traits] = {
	idea = <country_leader_trait>
	idea = {
		## cardinality = 1..inf
		<country_leader_trait>
	}
	limit = int
	## cardinality = 0..1
	### # if specified, these ideas will be ignored.
	ignore = {
		enum[idea_name]
	}

	## cardinality = 0..1
	### # if specified, these ideas will be ignored.
	ignore = enum[idea_name]
}

### Checks if state is claimed by country.
## scope = state
alias[trigger:is_claimed_by] = scope[country]

### Checks if state is claimed by country.
## scope = state
alias[trigger:is_claimed_by] = enum[country_tags]

### Checks if state is core of country.
## scope = state
alias[trigger:is_core_of] = scope[country]

### Checks if state is core of country.
## scope = state
alias[trigger:is_core_of] = enum[country_tags]

### Checks if country is AI controlled.
## scope = country
alias[trigger:is_ai] = bool

### Check if sides leader has trait.
## scope = { unit_leader combat }
alias[trigger:has_trait] = <unit_leader_trait>

### Check if side has reserves waiting.
## scope = combat
alias[trigger:has_reserves] = bool

### Check if sides front is full or can get more reinforcements.
## scope = combat
alias[trigger:frontage_full] = bool

### Is lend-leasing country.
## scope = country
alias[trigger:is_lend_leasing] = scope[country]

### Is lend-leasing country.
## scope = country
alias[trigger:is_lend_leasing] = enum[country_tags]

### Checks building for available construction levels.
## scope = state
alias[trigger:free_building_slots] = {
	building = <building>
	size = int
	## cardinality = 0..1
	include_locked = bool
	## cardinality = 0..1
	province = enum[provinces]
}

### Checks if a state is a demilitarized zone.
## scope = state
alias[trigger:is_demilitarized_zone] = bool

### Checks if a state is in border conflict.
## scope = state
alias[trigger:is_border_conflict] = bool

### Has country completed focus.
## scope = country
alias[trigger:has_completed_focus] = <focus>

### Has country completed focus.
## scope = country
alias[trigger:has_completed_focus] = <shared_focus>

### One country has offensive war against other country.
## scope = country
alias[trigger:has_offensive_war_with] = scope[country]

### One country has offensive war against other country.
## scope = country
alias[trigger:has_offensive_war_with] = enum[country_tags]

### One country has defensive war against other country.
## scope = country
alias[trigger:has_defensive_war_with] = scope[country]

### One country has defensive war against other country.
## scope = country
alias[trigger:has_defensive_war_with] = enum[country_tags]

### Is country at offensive war.
## scope = country
alias[trigger:has_offensive_war] = bool

### Is country at defensive war.
## scope = country
alias[trigger:has_defensive_war] = bool

### Check if state is coastal.
## scope = state
alias[trigger:is_coastal] = bool

### Check the amount of casualties a country has suffered in all of it's wars.
## scope = country
alias[trigger:casualties] = int

### Works as an and-trigger with a custom tooltip.
## scope = any
alias[trigger:custom_trigger_tooltip] = {
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Checks for amount of equipment stored.
## scope = country
alias[trigger:has_equipment] = { <equipment> = int_variable_field }

### Check amount of total factories.
## scope = country
alias[trigger:num_of_factories] = int

###  = { focus = id progress = 0.5 }.
## scope = country
alias[trigger:focus_progress] = {
	focus = <focus>
	focus = <shared_focus>
	progress = float[0..1.0]
}

### Checks if the country is puppet of any other country.
## scope = country
alias[trigger:is_puppet] = bool

### Checks if the country is puppet of specified country.
## scope = country
alias[trigger:is_puppet_of] = scope[country]

### Checks if the country is puppet of specified country.
## scope = country
alias[trigger:is_puppet_of] = enum[country_tags]

### Checks for amount of ships in specified state's ports.
## scope = country
alias[trigger:ships_in_state_ports] = {
	state = scope[state]
	state = <state>
	size = float
	## cardinality = 0..1
	type = <unit.ship_unit>
}

### Check if country is a major.
## scope = country
alias[trigger:is_major] = bool

### Is state located on continent.
## scope = state
alias[trigger:is_on_continent] = enum[continents]

### Is state located on same continent and the capital of right hand side.
## scope = state
alias[trigger:is_on_continent] = scope[country]

### Checks if the current scope is performing an amphibious invasion.
## scope = combat
alias[trigger:is_amphibious_invasion] = bool

### Compares the estimated army strength between the scope country and the one set with 'tag'.
## scope = country
alias[trigger:strength_ratio] = {
	tag = scope[country]
	tag = enum[country_tags]
	ratio = float
}

### Check if side has maximal planning bonus.
## scope = combat
alias[trigger:has_max_planning] = bool

### Check if participant in civil war as revolter or target.
## scope = country
alias[trigger:has_civil_war] = bool

### Check if side has more combat width than their opponent.
## scope = combat
alias[trigger:less_combat_width_than_opponent] = bool

### Check if side is fighting air units.
## scope = combat
alias[trigger:is_fighting_air_units] = bool

### Check if side has a career with air wings on a mission.
## scope = combat
alias[trigger:has_carrier_airwings_on_mission] = bool

### Check if side has flanked their opponent.
## scope = combat
alias[trigger:has_flanked_opponent] = bool

### Check if there is a claim between a country and all others.
## scope = country
alias[trigger:any_claim] = bool

### Compares number of volunteers from the country. Example: has_volunteers_amount_from = { tag = ITA count > 1 }.
## scope = country
alias[trigger:has_volunteers_amount_from] = {
	tag = scope[country]
	tag = enum[country_tags]
	count = int
}

### Check amount of controlled stats.
## scope = country
alias[trigger:num_of_controlled_states] = int

### Checks if the current scope was ever the specified country.
## scope = { country combat }
alias[trigger:original_tag] = scope[country]

### Checks if the current scope was ever the specified country.
## scope = { country combat }
alias[trigger:original_tag] = enum[country_tags]

### Compare if the country has added above or below the specified ammount of tension.
## scope = country
alias[trigger:has_added_tension_amount] = float

### Check if manpower is enough to switch recruitment laws not to be negative.
## scope = country
alias[trigger:has_manpower_for_recruit_change_to] = {
	value = float
	group = value[idea_slot]
}

### Check what liberation desire the country has towards a specified country.
## scope = country
alias[trigger:ai_liberate_desire] = {
	target = scope[country]
	target = enum[country_tags]
	value = float
}

### Check distance between two states.
## scope = state
alias[trigger:distance_to] = {
	value = float
	target = scope[state]
	target = <state>
}

### Check if country can research technology.
## scope = country
alias[trigger:can_research] = <technology>

### Checks a country has annex war goal on another country.
## scope = country
alias[trigger:has_annex_war_goal] = scope[country]

### Checks a country has annex war goal on another country.
## scope = country
alias[trigger:has_annex_war_goal] = enum[country_tags]

### Check lowest/highest hardness level on combatant.
## scope = combat
alias[trigger:hardness] = float

### Check if country has a division template that contains a specific unit.
## scope = country
alias[trigger:has_template_containing_unit] = <unit>

### Checks if the first province in the state is connected to the capital of its owner.
## scope = state
alias[trigger:is_in_home_area] = bool

### Check the population in the state.
## scope = state
alias[trigger:state_population] = float

### Check the ai irrationality value.
## scope = country
alias[trigger:ai_irrationality] = int

### Are the countries fighting on the same side of a war.
## scope = country
alias[trigger:has_war_together_with] = scope[country]

### Are the countries fighting on the same side of a war.
## scope = country
alias[trigger:has_war_together_with] = enum[country_tags]

### Checks if the country has capitulated.
## scope = country
alias[trigger:has_capitulated] = bool

### Checks for amount of manpower of selected type, additionally of a specified type.
## scope = country
alias[trigger:has_army_manpower] = {
	size = int
}

### Check if state is owned by.
## scope = state
alias[trigger:is_owned_and_controlled_by] = scope[country]

### Check if state is owned by.
## scope = state
alias[trigger:is_owned_and_controlled_by] = enum[country_tags]

### Check if the tutorial is active.
## scope = any
alias[trigger:is_tutorial] = bool

### Check if the historical focus is active.
## scope = any
alias[trigger:is_historical_focus_on] = bool

### Check number of research slots at start of game.
## scope = country
alias[trigger:original_research_slots] = int

### Checks if country has a wargoal against the target. Example: ENG = { has_wargoal_against = GER }.
## scope = country
alias[trigger:has_wargoal_against] = scope[country]

### Checks if country has a wargoal against the target. Example: ENG = { has_wargoal_against = GER }.
## scope = country
alias[trigger:has_wargoal_against] = enum[country_tags]

### Checks if country has a wargoal against the target. Example: ENG = { has_wargoal_against = GER }.
## scope = country
alias[trigger:has_wargoal_against] = {
	target = scope[country]
	target = enum[country_tags]
	type = <wargoal>
}

### Checks if country is justifying a wargoal against the target.
## scope = country
alias[trigger:is_justifying_wargoal_against] = scope[country]

### Checks if country is justifying a wargoal against the target.
## scope = country
alias[trigger:is_justifying_wargoal_against] = enum[country_tags]

### Check if neighbor ( owned territory ) with specified country.
## scope = country
alias[trigger:is_owner_neighbor_of] = scope[country]

### Check if neighbor ( owned territory ) with specified country.
## scope = country
alias[trigger:is_owner_neighbor_of] = enum[country_tags]

### Will compare towards the amount of divisions an ai wants to have.
## scope = country
alias[trigger:ai_wants_divisions] = int

### Checks if a state has been claimed by target country in an ongoing peace conference.
## scope = state
alias[trigger:has_claimed_state_in_peace_conference] = scope[country]

### Checks if a state has been claimed by target country in an ongoing peace conference.
## scope = state
alias[trigger:has_claimed_state_in_peace_conference] = enum[country_tags]

### Checks if a country owns the amount of states neighbouring the scoped state.
## scope = state
alias[trigger:num_owned_neighbour_states] = {
	owner = scope[country]
	owner = enum[country_tags]
	count = int
}

### Checks if a country owns the amount of states neighbouring the scoped state.
## scope = state
alias[trigger:num_claimed_peace_conference_neighbour_states] = {
	owner = scope[country]
	owner = enum[country_tags]
	count = int
}

### Always returns specified value.
## scope = state
alias[trigger:is_island_state] = bool

### Checks the country's politics on allowing elections. has_elections = yes.
## scope = country
alias[trigger:has_elections] = bool

### Compares the estimated army strength between the scope country, his allies and his enemies.
## scope = country
alias[trigger:alliance_strength_ratio] = float

### Civilwar target is ( for civil wars checks ).
## scope = country
alias[trigger:civilwar_target] = scope[country]

### Civilwar target is ( for civil wars checks ).
## scope = country
alias[trigger:civilwar_target] = enum[country_tags]

### Checks if the country is currently in a peaceconference.
## scope = country
alias[trigger:is_in_peace_conference] = bool

### Check if country has unit leader with specified ID. Don't localize this. Tooltip only for debug.
## scope = country
alias[trigger:has_unit_leader] = value[unit_leader_ids]

### Check if any neighbor country in the home area meets the trigger.
## scope = country
## push_scope = country
alias[trigger:any_home_area_neighbor_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any other country meets the trigger. Excludes current country.
## scope = any
## push_scope = country
alias[trigger:any_other_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all other countries meets the trigger. Excludes current country.
## scope = country
## push_scope = country
alias[trigger:all_other_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if country has non aggression pact with the specified country.
## scope = country
alias[trigger:has_non_aggression_pact_with] = scope[country]

### Check if country has non aggression pact with the specified country.
## scope = country
alias[trigger:has_non_aggression_pact_with] = enum[country_tags]

### Compares the number of members in the faction for the current country.
## scope = country
alias[trigger:num_faction_members] = int

### Compares the estimated army strength between the scope country and all its enemies.
## scope = country
alias[trigger:enemies_strength_ratio] = float

### Returns true if the game has the specified custom difficulty on.
## scope = any
alias[trigger:has_custom_difficulty_setting] = enum[difficulty_settings]

### Returns true if the game has any custom difficulty on.
## scope = any
alias[trigger:has_any_custom_difficulty_setting] = bool

### Returns true if the game has any custom difficulty on the scope nation.
## scope = country
alias[trigger:has_country_custom_difficulty_setting] = bool

### Checks if the country is currently researching a specific technology.
## scope = country
alias[trigger:is_researching_technology] = <technology>

### Checks if country is member specified technology sharing group.
## scope = country
alias[trigger:is_in_tech_sharing_group] = <tech_sharing_group>

### Check if country currently has an autonomy state, example.
## scope = country
alias[trigger:has_autonomy_state] = <autonomy>

### Check if autonomy progress ratio is higher than value, example.
## scope = country
alias[trigger:compare_autonomy_progress_ratio] = float

### Check if autonomy state is higher than other one, example.
## scope = country
alias[trigger:compare_autonomy_state] = <autonomy>

### Checks if country has specific cosmetic tag set.
## scope = country
#enum[cosmetic_tag]?
alias[trigger:has_cosmetic_tag] = value[cosmetic_tag]

### Check the number of subjects of nation.
## scope = country
alias[trigger:num_subjects] = int

### Checks how many groups a nation is a member of.
## scope = country
alias[trigger:num_tech_sharing_groups] = int

### Check if country has a division template of specific name.
## scope = country
alias[trigger:has_template] = scalar

### Check if state has a specific state category.
## scope = state
alias[trigger:has_state_category] = <state_category>

### Check that ratio of cavalry brigades in the composition of a side of combating troops are over a certain level.
## scope = combat
alias[trigger:has_cavalry_ratio] = float

### Check the number of states occupied by nation.
## scope = country
alias[trigger:num_occupied_states] = int

### Check for damaged buildings of nation.
## scope = country
alias[trigger:has_damaged_buildings] = bool

### Checks for amount of resources in specified state.
## scope = country
alias[trigger:has_resources_amount] = {
	resource = <resource>
	amount = int
	state = scope[state]
	state = <state>
	## cardinality = 0..1
	delivered = bool
}

### Checks for amount of resources in specified state.
## scope = state
alias[trigger:has_resources_amount] = {
	resource = <resource>
	amount = int
	## cardinality = 0..1
	delivered = bool
}

### Checks if the country has a bonus for the specified technology or category.
## scope = country
alias[trigger:has_tech_bonus] = {
	technology = <technology>
}

### Checks if the country has a bonus for the specified technology or category.
## scope = country
alias[trigger:has_tech_bonus] = {
	category = enum[tech_category]
}

### Check if country has a division template that is majority of specific unit.
## scope = country
alias[trigger:has_template_majority_unit] = <unit>

### Check if side has maximal planning bonus.
## scope = combat
alias[trigger:min_planning] = float

### Check if country has leader with specified ID. Don't localize this. Tooltip only for debug.
## scope = country
alias[trigger:has_country_leader] = {
	## cardinality = 0..1
	id = int
	## cardinality = 0..1
	ruling_only = bool

	## cardinality = 0..1
	name = scalar
}

### Check if country has leader with specified ID. Don't localize this. Tooltip only for debug.
## scope = country
alias[trigger:has_country_leader] = {
	name = scalar
	## cardinality = 0..1
	ruling_only = bool
}

### Check if country has leader with specified ID. Don't localize this. Tooltip only for debug.
## scope = country
alias[trigger:has_country_leader] = {
	id = int
	name = scalar
	## cardinality = 0..1
	ruling_only = bool
}

### Compares current country's army experience with right side value.
## scope = country
alias[trigger:has_army_experience] = variable_field

### Compares current country's air experience with right side value.
## scope = country
alias[trigger:has_air_experience] = variable_field

### Compares current country's navy experience with right side value.
## scope = country
alias[trigger:has_navy_experience] = variable_field

### Check controller for state(s).
## scope = country
alias[trigger:has_full_control_of_state] = scope[state]

### Check controller for state(s).
## scope = country
alias[trigger:has_full_control_of_state] = <state>

### Will compare towards the amount of divisions a country has control over, if strength matters use has_army_size.
## scope = country
alias[trigger:num_divisions] = int_variable_field

### Returns true if the specified number of sub-triggers return true.
## scope = any
alias[trigger:count_triggers] = {
	amount = int
	alias_name[trigger] = alias_match_left[trigger]
}

### Is_target_of_coup = yes - Returns true if current country is being targeted by a coup from any country.
## scope = country
alias[trigger:is_target_of_coup] = bool

### Is_staging_coup = yes - Returns true if current country is staging a coup in another any country.
## scope = country
alias[trigger:is_staging_coup] = bool

### Does current country have the specified focus tree.
## scope = country
alias[trigger:has_focus_tree] = <focus_tree>

### Check if country has a division template that is majority of specific unit using AI's priorities rather than visual.
## scope = country
alias[trigger:has_template_ai_majority_unit] = <unit>

### Country has any active licenses.
## scope = country
alias[trigger:has_any_license] = bool

### Country has specific active license.
## scope = country
alias[trigger:has_license] = {
	from = scope[country]
	from = enum[country_tags]
	archetype = <equipment.archetype_equip>
}

### Country has specific active license.
## scope = country
alias[trigger:has_license] = {
	from = scope[country]
	from = enum[country_tags]
	equipment = {
		type = <equipment.regular_equip>
		version = int
	}
}

### Country is licensing specific equipment to target. License is active.
## scope = country
alias[trigger:is_licensing_to]  = {
	target = scope[country]
	target = enum[country_tags]
	archetype = <equipment.archetype_equip>
}

### Country is licensing specific equipment to target. License is active.
## scope = country
alias[trigger:is_licensing_to]  = {
	target = scope[country]
	target = enum[country_tags]
	equipment = {
		type = <equipment.regular_equip>
		version = int
	}
}

### Current country is licensing something to target country.
## scope = country
alias[trigger:is_licensing_any_to] = scope[country]

### Current country is licensing something to target country.
## scope = country
alias[trigger:is_licensing_any_to] = enum[country_tags]

### Check if the ai controlled country has any template for a specific role.
## scope = country
alias[trigger:ai_has_role_template] = value[ai_roles]

### Check if the ai controlled country has any fielded divisions for a specific role.
## scope = country
alias[trigger:ai_has_role_division] = value[ai_roles]

### Country has specified relation modifier when dealing with _target_ county.
## scope = country
alias[trigger:has_relation_modifier] = {
	target = scope[country]
	target = enum[country_tags]
	modifier = <static_modifier.relation_modifier>
}

### In the current state, checks if any province within the specified limit has a building of the specified level.
## scope = state
alias[trigger:any_province_building_level] = {
	province = {
		all_provinces = yes
		## cardinality = 0..1
		limit_to_border = yes
	}
	province = {
		## cardinality = 1..inf
		id = enum[provinces]
		## cardinality = 0..1
		limit_to_border = yes
	}
	building = <building.provincial>
	level = int
}

### Compares estimated max armor based on intel. Example: estimated_intel_max_armor = { tag = ITA value > 1 }.
## scope = country
alias[trigger:estimated_intel_max_armor] = {
	tag = scope[country]
	tag = enum[country_tags]
	value = float
}

### Compares estimated max armor based on intel. Example: estimated_intel_max_piercing = { tag = ITA value > 1 }.
## scope = country
alias[trigger:estimated_intel_max_piercing] = {
	tag = scope[country]
	tag = enum[country_tags]
	value = float
}

### Check number of research current research slots.
## scope = country
alias[trigger:amount_research_slots] = int

### Number of available manpower per factory the country has. Excluding dockyards.
## scope = country
alias[trigger:manpower_per_military_factory] = float

### Has current country picked specified amount of ideas. Category and slots is optional.
## scope = country
alias[trigger:amount_taken_ideas] = {
	amount = int
	## cardinality = 0..1
	slots = {
		value[idea_slot]
	}
}

### Check if carrier has airplanes that are part of the current combat.
## scope = combat
alias[trigger:has_carrier_airwings_in_own_combat] = bool

### Compares the estimated navy strength between the scope country and the one set with 'tag'.
## scope = country
alias[trigger:naval_strength_ratio] = {
	tag = scope[country]
	tag = enum[country_tags]
	ratio = float
}

### Compares the estimated navy strength between the scope country and all its enemies.
## scope = country
alias[trigger:enemies_naval_strength_ratio] = float

### Compares the estimated naval strength between the scope country, his allies and his enemies.
## scope = country
alias[trigger:alliance_naval_strength_ratio] = float

### Check value of stability 0-1. Example has_stability < 0.6.
## scope = country
alias[trigger:has_stability] = float

### Check value of war_support 0-1. Example has_war_support < 0.6.
## scope = country
alias[trigger:has_war_support] = float

### Check if all unit leaders meets the trigger.
## scope = country
## push_scope = unit_leader
alias[trigger:all_unit_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any unit leader meets the trigger.
## scope = country
## push_scope = unit_leader
alias[trigger:any_unit_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all unit leaders meets the trigger.
## scope = country
## push_scope = any
alias[trigger:all_army_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any unit leader meets the trigger.
## scope = country
## push_scope = any
alias[trigger:any_army_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if all unit leaders meets the trigger.
## scope = country
## push_scope = any
alias[trigger:all_navy_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if any unit leader meets the trigger.
## scope = country
## push_scope = any
alias[trigger:any_navy_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

### Is_assigned = yes/no - Checks if the current unit leader is assigned to command an army/navy.
## scope = { unit_leader combat }
alias[trigger:is_assigned] = bool

### Check number of units commanded by the unit leader.
## scope = { unit_leader combat }
alias[trigger:num_units] = int

### Is_field_marshal = yes/no - Checks if the current unit leader is a field marshall.
## scope = { unit_leader combat }
alias[trigger:is_field_marshal] = bool

### Has unit leader flag been setCheck flag val date set and days since set.
## scope = { unit_leader combat }
## severity = warning
alias[trigger:has_unit_leader_flag] = value[leader_flag]

### Has unit leader flag been setCheck flag val date set and days since set.
## scope = { unit_leader combat }
## severity = warning
alias[trigger:has_unit_leader_flag] = {
	flag = value[leader_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	date = date_field
	## cardinality = 0..1
	days = int
}

### Check if country has active selected decision.
## scope = country
alias[trigger:has_decision] = <decision>

### Checks if available command power is more or less that specified value.
## scope = country
alias[trigger:command_power] = float

### Checks if daily command power increase is more or less that specified value.
## scope = country
alias[trigger:command_power_daily] = float

### Checks if state is fully controlled by specified tag.
## scope = state
alias[trigger:is_fully_controlled_by] = scope[country]

### Checks if state is fully controlled by specified tag.
## scope = state
alias[trigger:is_fully_controlled_by] = enum[country_tags]

### Does unit leader have the abilityCheck if a unit leader has the ability.
## scope = { unit_leader combat }
alias[trigger:has_ability] = <ability>

### Checks if a variable exists in a scope.
## scope = any
alias[trigger:has_variable] = value[variable]

### Checks if a variable exists in a scope.
## scope = any
alias[trigger:has_variable] = variable_field

### Check unit leader has specified ID. Don't localize this. Tooltip only for debug.
## scope = { unit_leader combat }
alias[trigger:has_id] = int

### Check if leader can select a trait.
## scope = { unit_leader combat }
alias[trigger:can_select_trait] = <unit_leader_trait>

### Adds a value or a variable to a temporary variable.
## scope = any
alias[trigger:add_to_temp_variable] = {
	value_set[variable] = variable_field_32
}

### Adds a value or a variable to a temporary variable.
## scope = any
alias[trigger:add_to_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

### Subtracts a value or a variable to a temporary variable.
## scope = any
alias[trigger:subtract_from_temp_variable] = {
	value_set[variable] = variable_field_32
}

### Subtracts a value or a variable to a temporary variable.
## scope = any
alias[trigger:subtract_from_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

### Multiplies a temporary variable by a value or another variable.
## scope = any
alias[trigger:multiply_temp_variable] = {
	value_set[variable] = variable_field_32
}

### Multiplies a temporary variable by a value or another variable.
## scope = any
alias[trigger:multiply_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

### Divies a temporary variable by a value or another variable.
## scope = any
alias[trigger:divide_temp_variable] = {
	value_set[variable] = variable_field_32
}

### Divies a temporary variable by a value or another variable.
## scope = any
alias[trigger:divide_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

### Sets a temporary variable to a value or another variable.
## scope = any
alias[trigger:set_temp_variable] = {
	value_set[variable] = variable_field_32
	value_set[variable] = scope_field
	value_set[variable] = enum[country_tags]
	value_set[variable] = value_set[token]
}

### Sets a temporary variable to a value or another variable.
## scope = any
alias[trigger:set_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
	value = scope_field
	value = enum[country_tags]
	value = value_set[token]
}

### Clamps a temp variable between two a values or another variables.
## scope = any
alias[trigger:clamp_temp_variable] = {
	var = value_set[variable]
	min = variable_field_32
	max = variable_field_32
}

### Clamps a temp variable between two a values or another variables.
## scope = any
alias[trigger:clamp_temp_variable] = {
	var = value_set[variable]
	max = variable_field_32
}

### Clamps a temp variable between two a values or another variables.
## scope = any
alias[trigger:clamp_temp_variable] = {
	var = value_set[variable]
	min = variable_field_32
}

### Check amount of civilian factories available for a new project to use.
## scope = country
alias[trigger:num_of_civilian_factories_available_for_projects] = int

### Checks if current scope or global scope has the specified event target saved.
## scope = any
alias[trigger:has_event_target] = value[event_target]

### Checks if current scope or global scope has the specified event target saved.
## scope = any
alias[trigger:has_event_target] = value[global_event_target]

### Check the value of political power daily growth.Exacmple: political_power_growth > 0.
## scope = country
alias[trigger:political_power_growth] = float

### Checks if a there is any border wars for country/state.
## scope = { state country }
alias[trigger:has_border_war] = bool

### Checks if a the combatant or leader has a border war.
## scope = any
alias[trigger:is_border_war] = bool

### Checks if a there is a border war between two states.
## scope = { state country }
alias[trigger:has_border_war_between] = {
	attacker = scope[state]
	attacker = <state>
	defender = scope[state]
	defender = <state>
}

### Checks if a there is a border against a state/country.
## scope = { state country }
alias[trigger:has_border_war_with] = scope[country]

### Checks if a there is a border against a state/country.
## scope = { state country }
alias[trigger:has_border_war_with] = enum[country_tags]

### Compares the average stats for a unit leader.
## scope = { unit_leader combat }
alias[trigger:average_stats] = int

### Compares attack skill level of a unit leader.
## scope = { unit_leader combat }
alias[trigger:attack_skill_level] = int

### Compares defense skill level of a unit leader.
## scope = { unit_leader combat }
alias[trigger:defense_skill_level] = int

### Compares logistics skill level of a unit leader.
## scope = { unit_leader combat }
alias[trigger:logistics_skill_level] = int

### Compares planning skill level of a unit leader.
## scope = { unit_leader combat }
alias[trigger:planning_skill_level] = int

### Is_leading_army_group = yes/no - Checks if the current unit leader is leading an army group (not single army).
## scope = { unit_leader combat }
alias[trigger:is_leading_army_group] = bool

### Is_leading_army = yes/no - Checks if the current unit leader is leading a single army (not army group).
## scope = { unit_leader combat }
alias[trigger:is_leading_army] = bool

### Prints all variables in scope and temp variables to a file.
## scope = any
alias[trigger:print_variables] = {
	file = scalar
	## cardinality = 0..1
	text = scalar
	## cardinality = 0..1
	append = bool
	## cardinality = 0..1
	print_global = bool
	## cardinality = 0..1
	var_list = {
		## cardinality = 1..inf
		value[variable]
	}
}

### Check if country has an active mission with specified ID. has_active_mission = my_test_mission.
## scope = country
alias[trigger:has_active_mission] = <decision.mission>

### Has attache from any other country.
## scope = country
alias[trigger:has_attache] = yes

### Has attache from specified country.
## scope = country
alias[trigger:has_attache_from] = scope[country]

### Has attache from specified country.
## scope = country
alias[trigger:has_attache_from] = enum[country_tags]

### Checks for amount manpower currently in deploymentview. amount_manpower_in_training > 10.
## scope = country
alias[trigger:amount_manpower_in_deployment_queue] = float

### Checks for amount manpower currently the target state with option to specify a type.
## scope = country
alias[trigger:army_manpower_in_state] = {
	state = <state>
	state = int_variable_field
	amount = int_variable_field
	## cardinality = 0..1
	type = enum[unit_types]
}

### Checks if scope leader is from an exiled government. is_exiled_leader = yes.
alias[trigger:is_exiled_leader] = yes

### Checks if scope country is a government in exile in target tag. is_exiled_in = ENG.
## scope = country
alias[trigger:is_exiled_in] = scope[country]

### Checks if scope country is a government in exile in target tag. is_exiled_in = ENG.
## scope = country
alias[trigger:is_exiled_in] = enum[country_tags]

### Checks if scope country is hosting target tag as an exile. is_hosting_exile = FRA.
## scope = country
alias[trigger:is_hosting_exile] = scope[country]

### Checks if scope country is hosting target tag as an exile. is_hosting_exile = FRA.
## scope = country
alias[trigger:is_hosting_exile] = enum[country_tags]

### Checks if scope leader is from specified exiled government. is_exiled_leader_from = FRA.
alias[trigger:is_exiled_leader_from] = scope[country]

### Checks if scope leader is from specified exiled government. is_exiled_leader_from = FRA.
alias[trigger:is_exiled_leader_from] = enum[country_tags]

### Checks if scope country is hosting an exile.
## scope = country
alias[trigger:is_exile_host] = bool

### Checks if scope country an exiled government.
## scope = country
alias[trigger:is_government_in_exile] = bool

### Checks for amount of divisions in specified state owned by current country.
## scope = country
alias[trigger:divisions_in_border_state] = {
	## cardinality = 0..1
	type = enum[land_units]
	size = int
	state = scope[state]
	state = <state>
	border_state = scope[state]
	border_state = <state>
}

### Compares the ratio of equipment archetype in stockpile vs used. a value of 2 means we have double in stockpile of what is fielded or in training.
## scope = country
alias[trigger:stockpile_ratio] = {
	archetype = <equipment.archetype_equip>
	ratio = float
}

### Checks for state strategic value.
## scope = state
alias[trigger:state_strategic_value] = int

### Checks for state strategic value.
## scope = state
alias[trigger:state_and_terrain_strategic_value] = int

### Rounds a temporary variable.
## scope = any
alias[trigger:round_temp_variable] = value[variable]

### Rounds a temporary variable.
## scope = any
alias[trigger:round_temp_variable] = variable_field_32

### Checks if the country has for subject the given country.
## scope = country
alias[trigger:has_subject] = scope[country]

### Checks if the country has for subject the given country.
## scope = country
alias[trigger:has_subject] = enum[country_tags]

### Checks if a game rule is set to a particular option.
## scope = any
alias[trigger:has_game_rule] = {
	rule = <game_rule>
	option = value[game_rule_options]
}

### Returns true if all of the active game rule options allow achievements.
## scope = any
alias[trigger:game_rules_allow_achievements] = yes

### Checks if an element is in array.
## scope = any
alias[trigger:is_in_array] = {
	array = value[array]
	array = variable_field_32
	value = scalar
}

### Checks if an element is in array.
## scope = any
alias[trigger:is_in_array] = {
	value[array] = scalar
}

### Checks if an element is in array.
## scope = any
alias[trigger:is_in_array] = {
	variable_field_32 = scalar
}

### Adds an element to a temporary array.
## scope = any
alias[trigger:add_to_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	## cardinality = 0..1
	### Optional, if not defined adds scope.
	value = variable_field_32
	## cardinality = 0..1
	### Optional, if not defined adds scope.
	value = scope_field
	## cardinality = 0..1
	### Optional, if not defined adds scope.
	value = enum[country_tags]
	## cardinality = 0..1
	### Optional, default is end. Otherwise elements are shifted.
    index = int_variable_field_32
}

### Adds an element to a temporary array.
## scope = any
alias[trigger:add_to_temp_array] = {
	value_set[array] = variable_field_32
	value_set[variable] = variable_field_32
	value_set[array] = scope_field
	value_set[variable] = scope_field
	value_set[array] = enum[country_tags]
	value_set[variable] = enum[country_tags]
}

### Removes an element from a temporary array using value or index.
## scope = any
alias[trigger:remove_from_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	### Optional, use index or this. If neither it removes last element.
	value = variable_field_32
	### Optional, use index or this. If neither it removes last element.
	value = scope_field
	### Optional, use index or this. If neither it removes last element.
	value = enum[country_tags]
}

### Removes an element from a temporary array using value or index.
## scope = any
alias[trigger:remove_from_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	### Optional, use value or this. If neither it removes last element.
    index = int_variable_field_32
}

### Removes an element from a temporary array using value or index.
## scope = any
alias[trigger:remove_from_temp_array] = {
	value_set[array] = variable_field_32
	value_set[variable] = variable_field_32
	value_set[array] = scope_field
	value_set[variable] = scope_field
	value_set[array] = enum[country_tags]
	value_set[variable] = enum[country_tags]
}

### Clears the contents of a temporary array.
## scope = any
alias[trigger:clear_temp_array] = value[array]
### Clears the contents of a temporary array.
## scope = any
alias[trigger:clear_temp_array] = variable_field_32

### Resizes a temp array.
## scope = any
alias[trigger:resize_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	## cardinality = 0..1
	### Optional, if not specified and array grows the new elements are set to this (default 0).
	value = variable_field_32
	### If higher than old size, new elements are added to end. Otherwise last elements are removed to match to new size.
    size = int_variable_field_32
}

### Resizes a temp array.
## scope = any
alias[trigger:resize_temp_array] = {
	value_set[array] = int_variable_field_32
	value_set[variable] = int_variable_field_32
}

### Runs a loop on an array and check a trigger for each value, if any true returns true. Otherwise returns false.
## scope = any
alias[trigger:any_of] = {
	## cardinality = 0..1
	tooltip = localisation
	array = value[array]
	array = variable_field_32
	## cardinality = 0..1
	### Optional (default 'v') current value in array will be stored in this temp variable.
	value = value_set[variable]
	## cardinality = 0..1
	### Optional (default 'i') current index in array will be stored in this temp variable.
	index = value_set[variable]

	alias_name[trigger] = alias_match_left[trigger]
}

### Runs a loop on an array and check a trigger for each value, if any false returns false. Otherwise returns true.
## scope = any
alias[trigger:all_of] = {
	## cardinality = 0..1
	tooltip = localisation
	array = value[array]
	array = variable_field_32
	## cardinality = 0..1
	### Optional (default 'v') current value in array will be stored in this temp variable.
	value = value_set[variable]
	## cardinality = 0..1
	### Optional (default 'i') current index in array will be stored in this temp variable.
	index = value_set[variable]

	alias_name[trigger] = alias_match_left[trigger]
}

### Check amount of fuel.
## scope = country
alias[trigger:has_fuel] = int_variable_field

### Runs a loop on an array and check a trigger for each scope in it, if any true returns true. Otherwise returns false.
## scope = any
## push_scope = any
alias[trigger:any_of_scopes] = {
	## cardinality = 0..1
	tooltip = localisation
	array = value[array]
	array = variable_field_32
	alias_name[trigger] = alias_match_left[trigger]
}

### Runs a loop on an array and check a trigger for each scope in it, if any false returns false. Otherwise returns true.
## scope = any
## push_scope = any
alias[trigger:all_of_scopes] = {
	## cardinality = 0..1
	tooltip = localisation
	array = value[array]
	array = variable_field_32
	alias_name[trigger] = alias_match_left[trigger]
}

### Check if current country has specified trait.
## scope = country
alias[trigger:has_country_leader_with_trait] = <country_leader_trait>

### Check scope country legitimacy 0-100. Example: has_legitimacy < 60.
## scope = country
alias[trigger:has_legitimacy] = int

### Checks if a rule set for a country. Example: has_rule = can_puppet.
## scope = country
alias[trigger:has_rule] = enum[game_rules]

### Check the population in the state in thousands (use to avoid variable overflows).
## scope = { state }
alias[trigger:state_population_k] = int

### Check the amount of casualties in thousands a country has suffered in all of it's wars.
## scope = country
alias[trigger:casualties_k] = int

### Meta triggers can be used for building triggers from strings and running them. following example will test if Germany has 42 pp.
## scope = any
alias[trigger:meta_trigger] = {
	text = ignore_field
	## cardinality = 1..inf
	scalar = scalar
}

### Checks if scope has a dynamic modifier.
## scope = { state country }
alias[trigger:has_dynamic_modifier] = {
	modifier = <dynamic_modifier>

	## cardinality = 0..1
	### Optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope.
	scope = enum[country_tags]

	## cardinality = 0..1
	### Optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope.
	scope = scope[country]
}

### Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables.
## scope = any
alias[trigger:find_lowest_in_array] = {
	array = value[array]
	array = variable_field_32

	## cardinality = 0..1
	### Optional (default 'v') lowest value in array will be stored in this temp variable.
	value = value_set[variable]

	## cardinality = 0..1
	### Optional (default 'i') index of the lowest value in array will be stored in this temp variable.
	index = value_set[variable]
}

### Runs a loop on for each element of an array, finds the highest value and stores result in temp variables.
## scope = any
alias[trigger:find_highest_in_array] = {
	array = value[array]
	array = variable_field_32

	## cardinality = 0..1
	### Optional (default 'v') highest value in array will be stored in this temp variable.
	value = value_set[variable]

	## cardinality = 0..1
	### Optional (default 'i') index of the highest value in array will be stored in this temp variable.
	index = value_set[variable]
}

### Checks if a region has amount of mines.
## scope = country
alias[trigger:has_mines] = {
    region = <strategic_region>
    amount = int_variable_field
}

### Compares navies of two sides.
## scope = country
alias[trigger:naval_strength_comparison] = {
	### By default compares to the from scope.
	## cardinality = 0..1
	other = scope[country]
	### By default compares to the from scope.
	## cardinality = 0..1
	other = enum[country_tags]
	### Default is 'navy strength', the key can be overridden if wanted.
	## cardinality = 0..1
	tooltip = localisation
	### Default is 1.
	## cardinality = 0..1
	ratio = float
	### If not specified, it will weigh all ships as 1. Otherwise only specified sub unit types will be counted.
	## cardinality = 0..1
	sub_unit_def_weights = {
		## cardinality = 0..inf
		<unit.ship_unit> = float
	}
}

### Compares the fuel ratio to a variable.
## scope = country
alias[trigger:fuel_ratio] = float

### Checks the days since last strategic bombing.
## scope = { state }
alias[trigger:days_since_last_strategic_bombing] = int

### A trigger to check how dangerous enemy mines are for a country. Controlled by NAVAL_MINE_DANGER defines. Returns a value between 0 and 1. Example: mine_threat > 0.5.
## scope = country
alias[trigger:mine_threat] = float

### A trigger to check convoy threat for a country. Controlled by NAVAL_CONVOY_DANGER defines. Returns a value between 0 and 1. Example: convoy_threat > 0.5.
## scope = country
alias[trigger:convoy_threat] = float

### Checks the casualties infliced by the speficied country to the scopped country.
## scope = country
alias[trigger:casualties_inflicted_by] = {
	opponent = scope[country]
	opponent = enum[country_tags]
	thousands = variable_field
}

### Checks the mines planted by the country of the parent scope on the coastline of the target country.
## scope = country
alias[trigger:has_mined] = {
	target = scope[country]
	target = enum[country_tags]
	value = variable_field
}

### Checks that the country in scope has received the specified amount of expeditionary forces from the specified country.
## scope = country
alias[trigger:received_expeditionary_forces] = {
	sender = scope[country]
	sender = enum[country_tags]
	value = variable_field
}

### Checks the weather on a combat.
## scope = combat
alias[trigger:is_fighting_in_weather] = scalar

### Checks building level in a state or country.
## scope = { state country }
alias[trigger:<building>] = int_variable_field

### Checks ideology popularity.
## scope = country
alias[trigger:<ideology>] = float

### Changes scope to opposing army/navy.
## scope = { unit_leader combat }
alias[trigger:opponent] = { alias_name[trigger] = alias_match_left[trigger] }

### Check ratio of this type of unit for commander.
## scope = { unit_leader combat }
alias[trigger:enum[unit_types]] = variable_field

### Trigger not shown in tooltips.
## scope = any
alias[trigger:hidden_trigger] = {
	alias_name[trigger] = alias_match_left[trigger]
}

### Check controller for province.
## scope = country
alias[trigger:controls_province] = enum[provinces]

### Has an occupation modifier that applies to average resistance/compliance.
## scope = country
alias[trigger:has_core_occupation_modifier] = {
	occupied_country_tag = scope[country]
	occupied_country_tag = enum[country_tags]
	modifier = <resistance_compliance_modifier>
}

### Has country created an Intelligence Agency.
## scope = country
alias[trigger:has_intelligence_agency] = bool

### Is impassable state
## scope = state
alias[trigger:impassable] = bool
