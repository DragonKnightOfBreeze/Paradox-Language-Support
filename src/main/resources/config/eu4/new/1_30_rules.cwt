
#Triggers

## scope = country
###Returns true when the scope country is supporting the independence of the target country.
alias[trigger:is_supporting_independence_of] = scope[any]

## scope = country
###Returns true when the scope country is supporting the independence of the target country.
alias[trigger:is_supporting_independence_of] = enum[country_tags]

## scope = province
###Checks whether the province has at least as many buildings as specified.
alias[trigger:num_of_buildings_in_province] = int

## scope = country
###Checks whether the country is gaining at least the specified amount of ADM power each month.
alias[trigger:monthly_adm] = int

## scope = country
###Checks whether the country is gaining at least the specified amount of DIP power each month.
alias[trigger:monthly_dip] = int

## scope = country
###Checks whether the country is gaining at least the specified amount of MIL power each month.
alias[trigger:monthly_mil] = int

## scope = country
###Checks whether the country has at least X power projection.
alias[trigger:power_projection] = int

## scope = province
###Returns the number of times the province has been improved by its current owner.
alias[trigger:num_of_times_improved_by_owner] = int

## scope = country
###Checks whether the country is renting out condottieri to the target country.
alias[trigger:is_renting_condottieri_to] = scope[any]

## scope = country
###Checks whether the country is renting out condottieri to the target country.
alias[trigger:is_renting_condottieri_to] = enum[country_tags]

## scope = country
###Returns true if the ratio of the mercenary fraction to the army size of the country is at least X.
alias[trigger:mercenary_fraction] = float[0.0..1.0]

## scope = province
###Checks whether the province has a higher total development value than a specified other province.
alias[trigger:higher_development_than] = scope[province]

## scope = province
###Checks whether the province has a higher total development value than a specified other province.
alias[trigger:higher_development_than] = <province_id>

## scope = country
###Checks whether the country is has had a golden age.
alias[trigger:has_had_golden_age] = bool

## scope = country
###Returns the amount of a specific trade good the country is producing.
alias[trigger:trade_goods_produced_amount] = {
	trade_goods = <trade_good>
	amount = int
}

## scope = country
###Returns true if the country has government type X. Includes "dictatorship", which checks whether the country has a government reform with the label "is_dictatorship = yes"
alias[trigger:government] = scope[any]

## scope = country
###Returns true if the country has government type X. Includes "dictatorship", which checks whether the country has a government reform with the label "is_dictatorship = yes"
alias[trigger:government] = enum[country_tags]

## scope = country
###Returns true if the country is giving the specified estate privilege.
alias[trigger:has_estate_privilege] = <estate_privilege>

## scope = country
###Returns the % of the country's development that is held by the Crown Land.
alias[trigger:crown_land_share] = int[1..100]
## scope = country
###Returns the % of the country's development that is held by the Crown Land.
alias[trigger:crown_land_share] = 0.1

## scope = country
###Returns if the country has been force converted by a specified other country.
alias[trigger:force_converted_by] = scope[country]

## scope = country
###Checks whether the country has any loans with the tag "estate_loan = yes".
alias[trigger:has_estate_loan] = int

## scope = mercenary_company
###Checks whether the mercenary company is a foreign mercenary company.
alias[trigger:is_foreign_company] = bool

## scope = mercenary_company
###Checks whether the mercenary company uses a certain template.
alias[trigger:template] = <mercenary_company>

## scope = { country province }
###Checks what the current amount of ducats in the Curia Treasury is.
alias[trigger:curia_treasury_size] = int

## scope = { country province }
###Checks what the Curia Treasury's current monthly income is.
alias[trigger:curia_treasury_income] = int

## scope = country
###Checks how much the currently scoped country contributes to the Curia Treasury each month.
alias[trigger:curia_treasury_contribution] = int

## scope = country
###Checks whether the country is lacking institutions.
alias[trigger:is_lacking_institutions] = bool

## scope = country
###Checks how many privileges a country has given to a specified estate.
alias[trigger:num_of_estate_privileges] = {
	estate = <estate>
	value = int
}

## scope = country
###Checks how many agendas a country has completed for a specified estate.
alias[trigger:num_of_estate_agendas_completed] = {
	estate = <estate>
	value = int
}

## scope = country
###Checks whether the country currently has an active estate agenda.
alias[trigger:has_active_estate_agenda] = <estate_agenda>

## scope = province
###Returns the missionary strength the country would have if it tried to convert the province.
alias[trigger:missionary_strength] = float[0.0..0.09]

## scope = any
###Returns true if the specified imperial reform has been enacted.
alias[trigger:hre_reform_passed] = <imperial_reform.hre>

## scope = any
###Returns true if the specified Chinese imperial reform has been enacted.
alias[trigger:empire_of_china_reform_passed] = <imperial_reform.china>

## scope = any
###Checks whether a given (or any) imperial incident is currently active.
alias[trigger:active_imperial_incident] = <imperial_incident>

## scope = any
###Checks whether a given (or any) imperial incident is currently active.
alias[trigger:active_imperial_incident] = any

## scope = mercenary_company
###Checks whether the mercenary company has X% of its manpower.
alias[trigger:has_company_manpower] = float[0.0..1.0]

## scope = country
###Checks whether the country is a defender of faith of the specified tier.
alias[trigger:is_defender_of_faith_of_tier] = int

## scope = country
###Checks how many mercenary companies the country is currently hiring.
alias[trigger:num_of_hired_mercenary_companies] = int

## scope = province
###Checks the supply limit of a province.
alias[trigger:supply_limit] = float

## scope = province
###Checks the supply limit of a province.
alias[trigger:supply_limit] = scope[province]

## scope = province
###Checks the supply limit of a province.
alias[trigger:supply_limit] = <province_id>

## scope = province
###Checks whether the province is a Center of the Revolution.
alias[trigger:is_center_of_revolution] = bool

## scope = province
###Checks whether the province is has the Revolution in it.
alias[trigger:has_revolution_in_province] = bool

## scope = country
###Checks how much of the country has the Revolution in it.
alias[trigger:revolution_spread] = float[0.0..1.0]

## scope = country
###Checks whether the country can embrace the Revolution.
alias[trigger:can_embrace_revolution] = bool

## scope = country
###Checks the country's current maximum revolutionary zeal
alias[trigger:max_revolutionary_zeal] = int

## scope = country
###Checks whether the country uses revolutionary zeal
alias[trigger:uses_revolutionary_zeal] = bool

## scope = country
###Checks the country's current revolutionary zeal
alias[trigger:revolutionary_zeal] = int

## scope = country
###Checks whether the country has defeated the other country in a war (as main attacker vs main defender or vice versa)
alias[trigger:has_won_war_against] = {
	who = scope[country]
	who = enum[country_tags]
	## cardinality = 0..1
	###Default = infinity
	max_years_since = int
}

## scope = country
###Checks the country is revolutionary (according to its government)
alias[trigger:is_revolutionary] = bool

## scope = country
###Checks whether the country is a rebel faction of the specified type. Use with caution - may not work in all circumstances (e.g. controller scope breaks it, apparently)
alias[trigger:is_rebel_type] = <rebel_type>

## scope = country
###Checks the number of owned areas (i.e. states and territories) a country has.
alias[trigger:num_of_owned_areas] = int

## scope = country
###Checks the number of years since there has been a Revolution Target without anyone taking it up. Returns false if there has never been a Revolution Target.
alias[trigger:years_since_dismantle_revolution] = int


## scope = country
###Checks whether the country is hiring condottieri from the specified country
alias[trigger:is_hiring_condottiere_from] = enum[country_tags]
## scope = country
###Checks whether the country is hiring condottieri from the specified country
alias[trigger:is_hiring_condottiere_from] = scope[country]

## scope = country
###Checks whether the country has been humiliated by the specified country
alias[trigger:support_independence_of] = enum[country_tags]
## scope = country
###Checks whether the country has been humiliated by the specified country
alias[trigger:support_independence_of] = scope[country]

###Checks whether the country is a hegemon or not
alias[trigger:is_hegemon] = bool

###Checks whether the country has any active estate agenda
alias[trigger:has_any_active_estate_agenda] = bool



#Effects

## scope = country
###Adds a certain amount of power projection to the country
alias[effect:add_power_projection] = {
	type = <power_projection_modifier>
	amount = float
}

## scope = country
###Makes the current country support the independence of the specified country
alias[effect:support_independence_of] = enum[country_tags]
## scope = country
###Makes the current country support the independence of the specified country
alias[effect:support_independence_of] = scope[country]

## scope = country
###Adds or removes X amount of land from the Estate's base land share. 
alias[effect:change_estate_land_share] = {
	estate = <estate>
	estate = all
	share = float[-100.0..100.0]
	## cardinality = 0..1
	###This will set it to change estate land share by the development of the province / development of the country X share
	province = scope[province]
	## cardinality = 0..1
	###This will set it to change estate land share by the development of the province / development of the country X share
	province = <province_id>
}

## scope = country
###Adds the specified estate privilege to the country.
alias[effect:set_estate_privilege] = <estate_privilege>

## scope = country
###Removes the specified estate privilege from the country.
alias[effect:remove_estate_privilege] = <estate_privilege>

## scope = country
###Gives you a lump sum equivalent to x years of production income by y provinces (based on how much they currently produce).
alias[effect:add_years_of_owned_provinces_production_income] = {
	years = int
	## push_scope = province
	trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	custom_tooltip = localisation
}

## scope = mercenary_company
###Disbands the scoped mercenary company
alias[effect:disband_mercenary_company] = yes

## scope = mercenary_company
###Disbands the scoped mercenary company
alias[effect:disband_mercenary_company] = this

## scope = mercenary_company
###Kills the leader of the scoped mercenary company
alias[effect:kill_mercenary_leader] = this

## scope = mercenary_company
###Adds or subtracts X% of the mercenary company's manpower.
alias[effect:add_company_manpower] = float[-1.0..1.0]

## scope = { province country }
###Adds the specified amount of ducats to the Curia Treasury
alias[effect:add_curia_treasury] = int

## scope = province
###Adds unrest to a province with a specified name
alias[effect:add_named_unrest] = {
	name = value_set[named_unrest]
	value = int
}

## scope = province
###Adds unrest to a province with a specified name
alias[effect:remove_named_unrest] = value[named_unrest]

## scope = country
###Starts an agenda for a certain or a random estate
alias[effect:start_estate_agenda] = random

## scope = country
###Starts an agenda for a certain or a random estate
alias[effect:start_estate_agenda] = <estate>

## scope = country
###Applies a specified sprite pack (found in gfx/sprite_packs, often in DLC files) to the country. Not great verifying in DLC files for mods.
alias[effect:apply_sprite_pack] = scalar #actually <sprite_pack>, but they're in DLC files


## scope = any
###Starts a given imperial incident, or ends it if <none> is used. Do not attempt to start an incident without checking that there isn't already one active.
alias[effect:set_imperial_incident] = <imperial_incident>

## scope = any
###Starts a given imperial incident, or ends it if <none> is used. Do not attempt to start an incident without checking that there isn't already one active.
alias[effect:set_imperial_incident] = none

## scope = province
###Adds or removes the Revolution to/from the province.
alias[effect:set_revolution_in_province] = bool

## scope = country
###Adds X revolutionary zeal to the country
alias[effect:add_revolutionary_zeal] = int

## scope = province
###Sets a province as the Center of Revolution
alias[effect:spawn_center_of_revolution] = scope[province]

## scope = province
###Sets a province as the Center of Revolution
alias[effect:spawn_center_of_revolution] = <province_id>

## scope = { country }
###Removes the Center of Revolution from a province
alias[effect:remove_center_of_revolution] = yes

## scope = country
###Changes the name of the country to another specified localisation key. Needs <key>_ADJ for the adjectives.
alias[effect:override_country_name] = localisation

## scope = country
###Restores the country name to its original if it has been changed via override_country_name
alias[effect:restore_country_name] = yes



## scope = country
###Adds yearly income x (1 - crown land share) x years
alias[effect:add_years_of_estate_land_income] = float

## scope = country
###Removes a hired advisor of a monarch power type for the current scope. Does not fire on_action for advisor being fired.
alias[effect:remove_advisor_by_category_no_action] = enum[power_categories]





#Modifiers


## scope = country
alias[modifier:<estate_modifier>] = float[-1.0..1.0]

## scope = country
alias[modifier:country_admin_power] = int

## scope = country
alias[modifier:country_diplomatic_power] = int

## scope = country
alias[modifier:country_military_power] = int

## scope = country
alias[modifier:yearly_patriarch_authority] = float

## scope = country
alias[modifier:yearly_karma_decay] = float

## scope = country
alias[modifier:special_unit_forcelimit_fraction] = float

## scope = country
alias[modifier:available_province_loot] = float

## scope = country
alias[modifier:stability_cost_to_declare_war] = float

## scope = country
alias[modifier:appoint_cardinal_cost] = float

## scope = country
alias[modifier:curia_treasury_contribution] = float

## scope = country
alias[modifier:curia_powers_cost] = float

## scope = country
alias[modifier:imperial_reform_catholic_approval] = int

## scope = country
alias[modifier:unrest_catholic_provinces] = float

## scope = country
alias[modifier:infantry_fire] = float

## scope = country
alias[modifier:infantry_shock] = float

## scope = country
alias[modifier:cavalry_fire] = float

## scope = country
alias[modifier:cavalry_shock] = float

## scope = country
alias[modifier:artillery_fire] = float

## scope = country
alias[modifier:artillery_shock] = float

## scope = country
alias[modifier:max_revolutionary_zeal] = int

## scope = country
alias[modifier:yearly_revolutionary_zeal] = float

## scope = country
alias[modifier:mercenary_manpower] = float

## scope = country
alias[modifier:flagship_cost] = float

## scope = country
alias[modifier:hegemon_strength] = float[0.0..100.0]

## scope = province
alias[modifier:blockade_force_required] = float
## scope = province
alias[modifier:hostile_disembark_speed] = float
## scope = province
alias[modifier:local_governing_cost] = float
## scope = province
alias[modifier:hostile_fleet_attrition] = float
## scope = country
alias[modifier:governing_capacity] = float
## scope = country
alias[modifier:allowed_marine_fraction] = float

## scope = country
alias[modifier:local_heir_adm] = int
alias[modifier:local_heir_dip] = int
alias[modifier:local_heir_mil] = int
alias[modifier:cb_on_religious_enemies] = bool
alias[modifier:may_perform_slave_raid_on_same_religion] = bool
alias[modifier:state_governing_cost] = float
alias[modifier:disengagement_chance] = float
alias[modifier:block_introduce_heir] = bool
alias[modifier:may_recruit_female_generals] = bool
alias[modifier:is_revolutionary_guard_modifier] = bool
alias[modifier:special_unit_forcelimit] = float
alias[modifier:global_religious_conversion_resistance] = float
alias[modifier:local_religious_conversion_resistance] = float
alias[modifier:legitimate_subject_elector] = int
alias[modifier:mercantilism_cost] = float
alias[modifier:secondary_religion] = bool
alias[modifier:monarch_lifespan] = float
alias[modifier:accept_vassalization_reasons] = int
alias[modifier:institution_growth] = int
alias[modifier:trade_company_governing_cost] = float
alias[modifier:expand_administration_cost] = float
alias[modifier:transfer_trade_power_reasons] = int
alias[modifier:relation_with_heretics] = int


#Scopes

## scope = country
## push_scope = mercenary_company
alias[effect:random_hired_mercenary_company] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = mercenary_company
alias[trigger:any_hired_mercenary_company] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = mercenary_company
## push_scope = province
alias[trigger:home_province] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = mercenary_company
## push_scope = province
alias[effect:home_province] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = mercenary_company
## push_scope = province
alias[trigger:location] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = country
alias[trigger:any_great_power] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = country
## push_scope = country
alias[trigger:any_other_great_power] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = mercenary_company
## push_scope = province
alias[effect:location] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[effect:feudalism_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:feudalism_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:renaissance_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:renaissance_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:new_world_i_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:new_world_i_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:printing_press_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:printing_press_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:global_trade_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:global_trade_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:manufactories_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:manufactories_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:enlightenment_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:enlightenment_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
## push_scope = province
alias[effect:industrialization_origin] = {
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
alias[trigger:industrialization_origin] = {
	alias_name[trigger] = alias_match_left[trigger]
}
