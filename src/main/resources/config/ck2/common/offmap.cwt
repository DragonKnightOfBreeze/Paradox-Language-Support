types = {
    type[offmap] = {
        path_strict = yes
        path = "game/common/offmap_powers"

        localisation = {
            name = name
            currency = currency_name
        }
    }
    type[offmap_button] = {
        path_strict = yes
        path = "game/common/offmap_powers"
        skip_root_key = { any buttons }
    }
    type[offmap_monthly_currency_gain] = {
        path_strict = yes
        path = "game/common/offmap_powers"
        skip_root_key = { any monthly_currency_gain }

        localisation = {
            ## required
            name = "$"
        }
    }
    type[offmap_icon_trigger] = {
        path_strict = yes
        path = "game/common/offmap_powers"
        skip_root_key = { any icon_triggers }

        localisation = {
            ## required
            name = "$"
            ## required
            description = "$_desc"
        }
    }
    type[offmap_policy] = {
        path_strict = yes
        path = "game/common/offmap_powers/policies"

        localisation = {
            name = "$"
            description = "$_desc"
            effect = "$_effect_desc"
        }
    }
    type[offmap_status] = {
        path_strict = yes
        path = "game/common/offmap_powers/statuses"

        localisation = {
            name = "$"
            description = "$_desc"
            effect = "$_effect_desc"
        }
    }
}

offmap = {
    ### The offmap power's name.
    name = localisation

    ### The window used for the offmap power's interface.
    window_name = <gui_window>

    ### The window used to enter the offmap power's interface from the main UI.
    button_name = <gui_button>

    ### The name of the offmap power's currency.
    currency_name = localisation

    ### The name of the modifier that gives currency each month.
    currency_gain = <dynamic_modifier>

    ## cardinality = 0..1
    ### If yes, a character's currency with the offmap can go below zero. Defaults to "no".
    currency_below_zero = bool

    ## cardinality = 0..1
    ### If yes, all characters lose their current currency with the offmap if the dynasty of its holder changes. Defaults to "no".
    currency_reset_on_dynasty_change = bool

    ### The minor title used for the offmap holder. Characters with that minor title will be considered "offmap" and will not be accessible to interactions, events (outside of those with offmap = only/allow), etc. Shouldn't be accessible to players.
    holder_title = <minor_title.offmap>

    ### The landed title used for the offmap's governor. Shouldn't be accessible to players.
    governor_title = <title.landless>

    ### What tier the offmap should be considered. Mostly used for localisation, but the various "tier" triggers also work on offmaps. Also used for their portrait frame outside the offmap screen.
    tier = enum[title_tiers]

    ### Name of the temporary modifier used to denote "peace deals" with the offmap power. Only used for display purposes, other than what you do with it in script.
    non_aggression_modifier = <event_modifier>

    ## cardinality = 0..1
    ### What religion's CoA type to use on the offmap screen. If not specified, whatever religion the holder's dynasty has will be used.
    coa_religion = <religion>

    ### What government type to use for the holder.
    government = <government>

    ### What date to start generating holders for if the offmap isn't present in a save, or no history is defined.
    beginning_of_history = date_field

    ### What sound to use as the background SFX for the offmap screen.
    sound = <sound>

    ## replace_scope = { this = offmap root = offmap from = character }
    ### Conditions for showing the button to open the offmap screen. The trigger is evaluated once a month. ROOT is the offmap power, FROM is the player.
    display_trigger = single_alias_right[trigger_clause]

    ### List of offmap policies valid for this offmap.
    policies = {
        ## cardinality = 1..inf
        <offmap_policy>
    }

    ### List of offmap statuses valid for this offmap.
    statuses = {
        ## cardinality = 1..inf
        <offmap_status>
    }

    ### List of interaction buttons the offmap's interface has. They also need to be defined with a matching name in the main window gui of the offmap.
    buttons = {
        ## cardinality = 0..inf
        <offmap_button> = {
            ## cardinality = 0..1
            ## replace_scope = { this = character root = character from = character }
            ### Conditions for a button to show as active. Has no actual gameplay effect. ROOT is the offmap's governor, FROM is the player.
            is_active_trigger = single_alias_right[trigger_clause]

            ## replace_scope = { this = character root = character from = character }
            ### Conditions for a button to be displayed in the first place. Has no actual gameplay effect. ROOT is the offmap's governor, FROM is the player.
            display_trigger = single_alias_right[trigger_clause]
        }
    }

    ### Triggered monthly gains of offmap currency. Evaluated only for characters that are playable for performance reasons. Everything apart from value inside a definition is a trigger. ROOT is the offmap's governor, FROM is the person gaining currency.
    monthly_currency_gain = {
        ## cardinality = 0..inf
        ## replace_scope = { this = character root = character from = character }
        <offmap_monthly_currency_gain> = {
            # TODO: Not sure if actually float and not int
            ### Amount of currency to gain (lose).
            value = float

            ## cardinality = 1..inf
            alias_name[trigger] = alias_match_left[trigger]
        }
    }

    ### Icons that can show in the boxes status_icons_left and status_icons_right on the offmap screen.
    icon_triggers = {
        ## cardinality = 0..inf
        <offmap_icon_trigger> = {
            ### What frame of the GFX defined in its window to use. Frames is recommended over separate windows for each icon, as it uses less memory. Note that this can only change the frame of the icon "offmap_triggered_icon".
            frame = int

            ## cardinality = 0..1
            ### If yes, the icon is put in status_icons_right. If no, the icon is put in status_icons_left. Defaults to "no."
            right = bool

            ## replace_scope = { this = character root = character from = offmap }
            ### Conditions for the icon should show up. ROOT is the player, FROM is the offmap power.
            trigger = single_alias_right[trigger_clause]

            ## cardinality = 0..1
            ### The name of the window to use for the icon. Will use offmap_triggered_icon if not set.
            window_name = <gui_window>
        }
    }

    ## replace_scope = { this = character root = character from = character }
    ### Trigger for who is in range of China. Extends the governor's normal diplomatic range. Note that the governor title must have a capital defined, as this is used if it has no land. If none is defined, everything will be considered in range. ROOT is the character potentially in range, FROM is the governor.
    diplomatic_range = single_alias_right[trigger_clause]

    # TODO: see about additive/multiplicative modifiers
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    ### Weighted lists and effects to create a new character to hold the title. ROOT is the offmap, FROM is the old holder (if there is one), new_character is the new holder with what's been filled out so far. Order goes: gender, religion, culture, graphical culture, dynasty. UNCONFIRMED FROMFROM is used in some places and seems to also be the new holder.
    holder_succession = {
        is_female = {
            ### Percentile chance of getting a female ruler. 0 or less resulting value is guaranteed male, 100 or more is guaranteed female.
            value = int

            ## cardinality = 0..inf
            alias_name[additive_modifier] = alias_match_left[additive_modifier]
        }

        ### The culture of the new offmap holder. Highest resulting value is picked.
        culture = {
            ## cardinality = 1..inf
            scope[culture] = {
                value = int

                ## cardinality = 0..inf
                alias_name[additive_modifier] = alias_match_left[additive_modifier]
            }
        }

        ### The graphical culture of the new offmap holder. Highest resulting value is picked.
        graphical_culture = {
            # TODO: scope[graphical_culture]? I don't think so
            ## cardinality = 1..inf
            scope[culture] = {
                value = int

                ## cardinality = 0..inf
                alias_name[additive_modifier] = alias_match_left[additive_modifier]
            }
        }

        ### The religion of the new offmap holder. Highest resulting value is picked.
        religion = {
            ## cardinality = 1..inf
            scope[religion] = {
                value = int

                ## cardinality = 0..inf
                alias_name[additive_modifier] = alias_match_left[additive_modifier]
            }
        }

        ### The dynasty of the new offmap holder. Highest resulting value is picked.
        dynasty = {
            # Culture can work because dynasties can be randomly generated from the culture; and because culture can promote to character using that is more convenient than having wonky cardinality if I had two different blocks here
            ## cardinality = 1..inf
            scope[culture] = {
                value = int

                ## cardinality = 0..inf
                alias_name[additive_modifier] = alias_match_left[additive_modifier]
            }
        }

        ### The like of the new offmap holder. Highest resulting value is picked.
        likes = {
            ## cardinality = 1..inf
            <scripted_trigger.offmap_like> = {
                value = int

                ## cardinality = 0..inf
                alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
            }
        }

        ### The dislike of the new offmap holder. Highest resulting value is picked.
        dislikes = {
            ## cardinality = 1..inf
            <scripted_trigger.offmap_like> = {
                value = int

                ## cardinality = 0..inf
                alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
            }
        }
    }

    ## cardinality = 0..1
    ### What names to give the offmap rulers. Leave the section out entirely, or blank, to use normal naming instead
    temple_names = {
        ## cardinality = 0..inf
        ### The first block contains "founder names". The first person of a dynasty will use this block. Leave the block empty to not use founder names. The blocks after will be used in order by non-founders, with a random order within each block.
        {
            ## cardinality = 0..inf
            scalar
        }
    }
}

offmap_policy = {
    ### Which frame of the graphics resource used for the policy picture in the offmap's window to use.
    frame = int

    ## cardinality = 0..1
    ### Flags to set/remove when the offmap receives/loses this policy.
    flags = {
        ## cardinality = 1..inf
        value_set[offmap_policy_flag]
    }
}

offmap_status = {
    ### Which frame of the graphics resource used for the status picture in the offmap's window to use.
    frame = int

    ## cardinality = 0..1
    ### Flags to set/remove when the offmap receives/loses this status.
    flags = {
        ## cardinality = 1..inf
        value_set[offmap_status_flag]
    }
}