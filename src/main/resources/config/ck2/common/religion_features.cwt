types = {
    type[religion_feature_category] = {
        path_strict = yes
        path = "game/common/religion_features"
    }
    ## type_key_filter <> buttons
    type[religion_feature] = {
        path_strict = yes
        path = "game/common/religion_features"
        # Ideally skip_root_key = <religion_feature_category>
        skip_root_key = any

        localisation = {
            name = "$"
            description = "$_desc"
            ## optional
            feature_description = "$_feature"
            ## optional
            reformation_event_description = "string_reformed_$"
        }
    }
}

religion_feature_category = {
    # TODO: actual button links; need to be defined as windows within the religion_reformation_view window. The window need the elements "label", "picture", and "feature_label"
    buttons = {
        ## cardinality = 1..inf
        scalar
    }

    ## cardinality = 1..inf
    <religion_feature> = {
        ### What image to use for the picture.
        picture = <sprite>

        ## cardinality = 0..1
        ## replace_scope = { this = religion root = religion from = character }
        ### Conditions for the feature to appear in the UI. ROOT is the religion, FROM is the reformer (empty if this is a randomised religion).
        potential = single_alias_right[trigger_clause]

        ## cardinality = 0..1
        ## replace_scope = { this = religion root = religion from = character }
        ### Conditions for the feature to be able to be picked. ROOT is the religion, FROM is the reformer (empty if this is a randomised religion).
        trigger = single_alias_right[trigger_clause]

        ## replace_scope = { this = religion root = religion from = character }
        ### The effects of the feature. ROOT is the religion, FROM is the reformer (empty if this is a randomised religion).
        effect = {
            alias_name[effect] = alias_match_left[effect]
        }

        # TODO: see if additive modifier works.
        ## cardinality = 0..1
        ## replace_scope = { this = religion root = religion from = character }
        ### The chance the AI will pick a given option when reforming its religion and is used in the UI for generating the starting choices for the player. Default is "1". ROOT is the religion, FROM is the reformer (empty if this is a randomised religion).
        ai_will_do = {
            ### Base chance.
            factor = int[1..100]

            ## cardinality = 0..inf
            alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
        }
    }
}