types = {
    type[government] = {
        path_strict = yes
        path = "game/common/governments"
        skip_root_key = any

        localisation = {
            name = "$"
            description = "$_desc"
        }
    }
}

government = {
    ## cardinality = 0..1
    ### What offmap power to use for culture and religion when using succ_offmap_succession.
    offmap_power = <offmap>

    # TODO: Figure out
    ### UNKNOWN but probably the order in which the government assigns holdings as province capitals.
    preferred_holdings = {
        ## cardinality = 1..inf
        enum[holding_types_barony_only]
    }

    ## cardinality = 0..1
    ### Rulers of this government build these holdings with piety instead of gold.
    builds_with_piety = {
        ## cardinality = 1..inf
        enum[holding_types]
    }

    ## cardinality = 0..1
    ### Rulers of this government build these holdings with prestige instead of gold.
    builds_with_prestige = {
        ## cardinality = 1..inf
        enum[holding_types]
    }

    # allowed_holdings

    ### Will not get a penalty for holding holdings of these types.
    allowed_holdings = {
        ## cardinality = 1..inf
        enum[holding_types]
    }

    ## cardinality = 0..1
    ### Will not get a penalty for holding holdings of these types in provinces of the same culture.
    allowed_holdings_culture = {
        ## cardinality = 1..inf
        enum[holding_types]
    }

    ## cardinality = 0..1
    ### Will not get a penalty for holding holdings of these types in provinces of the same religion.
    allowed_holdings_religion = {
        ## cardinality = 1..inf
        enum[holding_types]
    }

    ## cardinality = 0..1
    ### Will not get a penalty for holding holdings of these types in provinces of the same culture and religion.
    allowed_holdings_culture_and_religion = {
        ## cardinality = 1..inf
        enum[holding_types]
    }

    # accepts_liege_governments

    ## cardinality = 0..1
    ### Will not get an opinion penalty towards their liege for belonging to a different government of these types.
    accepts_liege_governments = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Will not get an opinion penalty towards their liege for belonging to a different government of these types if they have the same culture.
    accepts_liege_governments_culture = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Will not get an opinion penalty towards their liege for belonging to a different government of these types if they have the same religion.
    accepts_liege_governments_religion = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Will not get an opinion penalty towards their liege for belonging to a different government of these types if they have the same culture and religion.
    accepts_liege_governments_culture_and_religion = {
        ## cardinality = 1..inf
        <government>
    }

    # free_revoke_on_governments

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals with governments of these types.
    free_revoke_on_governments = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals with governments of these types and a different culture.
    free_revoke_on_governments_culture = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals with governments of these types and a different religion.
    free_revoke_on_governments_religion = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals with governments of these types and a different culture and religion.
    free_revoke_on_governments_culture_and_religion = {
        ## cardinality = 1..inf
        <government>
    }

    # free_revoke_on_tiers

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals of these ranks.
    free_revoke_on_tiers = {
        ## cardinality = 1..inf
        enum[title_tiers]
    }

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals of these ranks that have a different culture.
    free_revoke_on_tiers_culture = {
        ## cardinality = 1..inf
        enum[title_tiers]
    }

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals of these ranks that have a different religion.
    free_revoke_on_tiers_religion = {
        ## cardinality = 1..inf
        enum[title_tiers]
    }

    ## cardinality = 0..1
    ### Liege gets free revocation on vassals of these ranks that have a different culture and religion.
    free_revoke_on_tiers_culture_and_religion = {
        ## cardinality = 1..inf
        enum[title_tiers]
    }

    ## cardinality = 0..1
    ### lieges of this government can call vassals of these governments as allies in a war.
    vassal_call_to_arms = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Vassals of these governments do not count towards the liege's vassal limit if the liege has this government.
    ignore_in_vassal_limit_calculation = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### lieges of this government do not tax vassals of these governments.
    no_vassal_tax = {
        ## cardinality = 1..inf
        <government>
    }

    ## cardinality = 0..1
    ### Vassals of these governments will give max taxes and max liege levies regardless of opinion. Tyranny actions against these vassals can be made without objections from vassals of other governments.
    forced_contract = {
        ## cardinality = 1..inf
        <government>
    }

    ### The government type's colour on the governments map mode.
    alias_name[color] = alias_match_left[color]

    ## cardinality = 0..1
    ### Prefix to be appended to title localisation (so it ends up being <title_prefix><tier>).
    title_prefix = scalar

    ## cardinality = 0..1
    ### Suffix for the sprite gfx name of the character frame borders to use (so it ends up being <sprite><frame_suffix>).
    frame_suffix = scalar

    ## replace_scope = { this = character root = character }
    ### Conditions for a character to select this government type. At game start, in case multiple governments are eligible, the first eligible one will be taken. feudal seem to be evaluated first.
    potential = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### If yes, enables merchant republic mechanics: generating family palaces and patricians. It will also unlock the possibility to build coastal trade posts. Defaults to "no".
    merchant_republic = bool

    ## cardinality = 0..1
    ### If yes, characters of this government have to pay a bride price to marry people who don't use bride prices. Defaults to "no".
    uses_bride_price = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### If no, UNKNOWN. Defaults to "yes".
    landed_inheritance = bool

    ## cardinality = 0..1
    ### If yes, characters of this government use decadence mechanics. Defaults to "no".
    uses_decadence = bool

    # TODO: Confirm
    ## cardinality = 0..1
    ### If yes, lieges of this government collect extra tax from vassals of different religions. Defaults to "no".
    uses_jizya_tax = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    uses_piety_for_law_change = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    uses_prestige_for_law_change = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot matrilineally marry. Defaults to "yes".
    allows_matrilineal_marriage = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Seems to default to "no" based on vanilla usage.
    allow_title_revokation = bool

    ## cardinality = 0..1
    ### If yes, characters of this government can raid. Defaults to "no".
    allow_looting = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    can_imprison_without_reason = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    can_revoke_without_reason = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    ignores_de_jure_laws = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    dukes_called_kings = bool

    ## cardinality = 0..1
    ### If yes, barons of this government will get a random dynasty whenever they get landed. Defaults to "no".
    barons_need_dynasty = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot create kingdoms via the create de jure title mechanic. Defaults to "yes".
    can_create_kingdoms = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot create empires via the create de jure title mechanic. Defaults to "yes".
    can_create_empires = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot usurp kingdoms or empires via the usurp de jure title mechanic. Defaults to "yes".
    can_usurp_kingdoms_and_empires = bool

    # TODO: Word better
    ## cardinality = 0..1
    ### If no, affects the interface and also government tooltips. Set for governments that only have one allowed gender laws in the gender laws script. Defaults to "yes".
    have_gender_laws = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build holdings. Defaults to "yes".
    can_build_holdings = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build fort holdings. Defaults to "yes".
    can_build_forts = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build hospital holdings. Defaults to "yes".
    can_build_hospitals = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build castle holdings. Defaults to "yes".
    can_build_castle = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build city holdings. Defaults to "yes".
    can_build_city = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build temple holdings. Defaults to "yes".
    can_build_temple = bool

    ## cardinality = 0..1
    ### If no, rulers of this government cannot build tribal holdings. Defaults to "yes".
    can_build_tribal = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot grant kingdoms and empires to characters of other governments. Defaults to "yes".
    can_grant_kingdoms_and_empires_to_other_government = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot grant kingdoms and empires to characters of other government groups. Defaults to "no".
    can_grant_kingdoms_and_empires_to_other_government_group = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot be granted kingdoms and empires by characters of other governments. Defaults to "yes".
    can_be_granted_kingdoms_and_empires_by_other_government = bool

    ## cardinality = 0..1
    ### If no, characters of this government cannot be granted kingdoms and empires by characters of other government groups. Defaults to "yes".
    can_be_granted_kingdoms_and_empires_by_other_government_group = bool

    # TODO: Figure out
    ## cardinality = 0..1
    ### Details UNKNOWN. Defaults to "no".
    free_retract_vassalage = bool

    ## cardinality = 0..1
    ### If yes, vassals will not get a ticking opinion penalty for having raised their levies for too long in an offensive war. Defaults to "no".
    free_levies_in_offensive_war = bool

    ## cardinality = 0..1
    ### If yes, rulers of this government under a nomadic liege (of the same culture) will become nomadic rulers, unless something else is specified for that character or the titles of that character. It is only for evaluating governments before the game has started. Defaults to "no".
    can_change_to_nomad_on_start = bool

    ## cardinality = 0..1
    ### If yes, characters of this government care that others have a different religion. Defaults to "yes".
    gets_religion_opinion_penalties = bool

    ## cardinality = 0..1
    ### If yes, other people care if the character of this government has a different religion. Defaults to "yes".
    gives_religion_opinion_penalties = bool

    ## cardinality = 0..1
    ### If yes, gets opinion penalties due to "accepts_liege_governments" and similar. Defaults to "yes".
    vassal_government_opinion_penalties = bool

    ## cardinality = 0..1
    ### If no, characters with this government cannot use the demand religious conversion diplomatic action. Defaults to "yes".
    can_demand_religious_conversion = bool

    ## cardinality = 0..1
    ### If no, characters with this government cannot inherit titles. Defaults to "yes".
    can_inherit = bool

    ## cardinality = 0..1
    ### If no, men of this government cannot take concubines. Defaults to "yes".
    men_can_take_consorts = bool

    ## cardinality = 0..1
    ### If yes, women of this government can take consorts. Defaults to "no".
    women_can_take_consorts = bool

    ## cardinality = 0..1
    ### If yes, the AI will ignore religion when considering marriage offers or taking consorts. Defaults to "no".
    marriage_ignore_religion = bool

    ## cardinality = 0..1
    ### The max amount of consorts characters of this government can have.
    max_consorts = int

    # TODO: Test and elaborate.
    ## cardinality = 0..1
    ### Used instead of crown laws.
    max_liege_levy = int # Float?

    # TODO: Test and elaborate.
    ## cardinality = 0..1
    ### Used instead of crown laws.
    max_liege_tax = int # Float?

    ## cardinality = 0..1
    ### Changes the opinion threshold for being willing to declare war by 20 per point, and how quickly the AI is likely to declare war. Anything below 1 makes the AI less likely to declare war. A value of 0 will make the AI never declare war except via script. Defaults to 1.0.
    aggression = float[0.0..inf]

    ## cardinality = 0..1
    ### Modifies the maximum demesne size for rulers of this government by this amount.
    demesne_size = int

    ## cardinality = 0..1
    ### Modifies the commander limit for rulers of this government by this amount.
    commander_limit = int

    ## cardinality = 0..1
    ### Modifies the vassal limit for rulers of this government by this amount.
    vassal_limit = int

    ## cardinality = 0..1
    ### Delay before rulers of this government can move their capital again, in months.
    capital_move_delay = int

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character }
    ### Character modifiers applied to all characters of this government.
    character_modifier = {
        alias_name[modifier] = alias_match_left[modifier]
    }

    ## cardinality = 0..1
    ## scope = { this = unit root = unit }
    ### A modifier applied to all realms and subrealms ruled by characters of this government.
    unit_modifier = {
        alias_name[modifier] = alias_match_left[modifier]
    }

    ## cardinality = 0..1
    ## scope = { this = unit root = unit }
    ### A modifier applied to all realms and subrealms ruled by characters of this government; only applied inside the realm/subrealm.
    unit_home_modifier = {
        alias_name[modifier] = alias_match_left[modifier]
    }
}