
types = {
    type[culture_group] = {
        path_strict = yes
        path = "game/common/cultures"

        localisation = {
            name = "$"
            desc = "$_FEATURES"
        }
    }
    ## type_key_filter <> { alternate_start graphical_cultures }
    type[culture] = {
        path_strict = yes
        path = "game/common/cultures"
        skip_root_key = any

        localisation = {
            name = "$"
        }
    }
}

culture_group = {
    # WTF that inf cardinality; see - mesoamerican/israelite culture groups in vanilla
    ## cardinality = 0..inf
    ## replace_scope = { this = no_scope root = no_scope }
    ### Conditions for the culture group to appear when generating a random world.
    alternate_start = single_alias_right[trigger_clause]

    # TODO: Confirm. I don't remember where I found the info about the going down the list, but I distinctly remember finding it.
    ### Graphical cultures the culture group will use. It will go down the list until it finds a graphical culture it can use (might be limited by access to DLC, for example).
    graphical_cultures = {
        ## cardinality = 1..inf
        <graphical_culture>
    }

    ## cardinality = 0..inf
    <culture> = {
        ### Graphical cultures the culture will try to use before trying to use the culture group ones.
        graphical_cultures = {
            ## cardinality = 1..inf
            <graphical_culture>
        }

        # TODO: Confirm
        ## cardinality = 0..1
        ### Graphical cultures for armies of rulers of this culture.
        unit_graphical_cultures = {
            ## cardinality = 1..inf
            <graphical_culture>
        }

        # TODO: Confirm
        ## cardinality = 0..1
        ### UNCONFIRMED For the purposes of event pictures, count as this culture.
        secondary_event_pictures = <culture>

        # I assume here it's inf cardinality as well.
        ## cardinality = 0..inf
        ## replace_scope = { this = no_scope root = no_scope }
        ### Conditions for the culture to appear when generating a random world, if its culture group is used at all.
        alternate_start = single_alias_right[trigger_clause]

        ### The culture's colour on the culture map mode.
        alias_name[color] = alias_match_left[color]

        ### Names for males of this culture.
        male_names = {
            ## cardinality = 1..inf
            scalar
        }

        ### Names for females of this culture.
        female_names = {
            ## cardinality = 1..inf
            scalar
        }

        ## cardinality = 0..1
        ### If yes, characters of that culture are treated as a Horde. Defaults to "no".
        horde = bool

        ## cardinality = 0..1
        ### If no, this culture will not be eligible for assignment when creating characters with a random culture. Defaults to "yes".
        used_for_random = bool
    
        ## cardinality = 0..1
        ### If no, this culture cannot be selected in the ruler designer. Defaults to "yes".
        allow_in_ruler_designer = bool

        ## cardinality = 0..1
        ### If yes, independent dukes of this culture are called petty kings. Defaults to "no".
        dukes_called_kings = bool

        ## cardinality = 0..1
        ### If yes, barons of this culture will not have their titles displayed in front of their name. Defaults to "no".        
        baron_titles_hidden = bool

        ## cardinality = 0..1
        ### If yes, counts of this culture will not have their titles displayed in front of their name. Defaults to "no".      
        count_titles_hidden = bool

        ## cardinality = 0..1
        ### Parent and children cultures do not get opinion penalties toward each other.
        parent = <culture>

        # TODO: Confirm; static modifier? It's not clear from the docs and vanilla doesn't use anything apart from it
        ## cardinality = 0..1
        ### This is something vanilla uses in almost every culture.
        modifier = default_culture_modifier

        # TODO: Confirm how exactly that works.
        ## cardinality = 0..1
        ## replace_scope = { this = character root = character}
        ### Modifiers applied to every character of that culture.
        character_modifier = {
            alias_name[modifier] = alias_match_left[modifier]
        }

        ## cardinality = 0..1
        ### If yes, dynasties of this culture will be named after their founder. Defaults to "no".
        founder_named_dynasties = bool

        ## cardinality = 0..1
        ### If yes, primary titles of rulers of this culture will display a name based on the dynasty. Defaults to "no".
        dynasty_title_names = bool

        # TODO: Confirm if it's this and not "blinded characters cannot inherit from characters of this culture"
        ## cardinality = 0..1
        ### If yes, blinded characters of this culture cannot inherit. Defaults to "no".
        disinherit_from_blinding = bool

        ## cardinality = 0..1
        ### If yes, armies of rulers of this culture can raid. Defaults to "no".        
        allow_looting = bool

        # This is from the wiki. TODO: check if it also affects sailing through rivers.
        ## cardinality = 0..1
        ### If yes, rulers of this culture will prefer looting coastal provinces. Defaults to "no".
        seafarer = bool

        ## cardinality = 0..1
        ### If yes, the dynasty name will be put before the personal name for characters of this culture. Defaults to "no".
        dynasty_name_first = bool

        # TODO: Confirm if it's this and not "vassals will be okay with female ruler of this culture"
        ## cardinality = 0..1
        ### If yes, vassals of this culture will not get the normal negative opinion modifiers towards female rulers or rulers with female heirs. Defaults to "no".
        feminist = bool

        # TODO: Check how this works
        ## cardinality = 0..1
        ### UNCONFIRMED If yes, characters of this culture will use the caste system. Defaults to "no".
        castes = bool

        # TODO: Check how this works
        ## cardinality = 0..1
        ### UNCONFIRMED If yes, characters of this culture will use the nomadic government in alternate start worlds. Defaults to "no".
        nomadic_in_alt_start = bool

        ## cardinality = 0..1
        ### Adds the father's name with this prefix/suffix to the names of males of this culture as a patronym.
        male_patronym = scalar

        ## cardinality = 0..1
        ### Adds the father's name with this prefix/suffix to the names of females of this culture as a patronym.
        female_patronym = scalar

        ## cardinality = 0..1
        ### If yes, the patronym will be a prefix; if no, a suffix. Defaults to "no".
        prefix = bool

        ## cardinality = 0..1
        ### Apply a special transformation to generate a patronymic (e.g.: "Rodrigo" + "ez" => "Rodriguez"); either french or spanish rules.
        grammar_transform = enum[grammar_transforms]

        ## cardinality = 0..1
        ### This prefix is added before the dynasty name for characters of this culture.
        from_dynasty_prefix = scalar

        ## cardinality = 0..1
        ### This suffix is added after the dynasty name for characters of this culture.
        from_dynasty_suffix = scalar

        ## cardinality = 0..1
        ### If set, replaces from_dynasty_prefix for bastards.
        bastard_dynasty_prefix = scalar

        ## cardinality = 0..1
        ### Chance for a newborn boy to get his paternal grandfather's name. Total of pat_grf_name_chance + mat_grf_name_chance + father_name_chance cannot exceed 100.
        pat_grf_name_chance = int[0..100]

        ## cardinality = 0..1
        ### Chance for a newborn boy to get his maternal grandfather's name. Total of pat_grf_name_chance + mat_grf_name_chance + father_name_chance cannot exceed 100.
        mat_grf_name_chance = int[0..100]

        ## cardinality = 0..1
        ### Chance for a newborn boy to get his father's name. Total of pat_grf_name_chance + mat_grf_name_chance + father_name_chance cannot exceed 100.
        father_name_chance = int[0..100]

        ## cardinality = 0..1
        ### Chance for a newborn girl to get her paternal grandmother's name. Total of pat_grm_name_chance + mat_grm_name_chance + mother_name_chance cannot exceed 100.
        pat_grm_name_chance = int[0..100]

        ## cardinality = 0..1
        ### Chance for a newborn girl to get her maternal grandmother's name. Total of pat_grm_name_chance + mat_grm_name_chance + mother_name_chance cannot exceed 100.
        mat_grm_name_chance = int[0..100]

        ## cardinality = 0..1
        ### Chance for a newborn girl to get her mother's name. Total of pat_grm_name_chance + mat_grm_name_chance + mother_name_chance cannot exceed 100.
        mother_name_chance = int[0..100]

        # TODO: figure out what this means
        ## cardinality = 0..1
        tribal_name = localisation
    }
}