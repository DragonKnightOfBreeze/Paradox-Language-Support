# There are subtypes based on a bunch of stuff like whether third party is involved
# But I'm not gonna bother atm. TODO: Bother.

types = {
    type[casus_belli] = {
        path_strict = yes
        path = "game/common/cb_types"

        subtype[hostile_against_others] = {
            hostile_against_others = yes
        }
        subtype[is_permanent] = {
            ## cardinality = 0..1
            is_permanent = yes
        }

        localisation = {
            name = name
            description = "$_desc"
            war_name = war_name
        }
    }
}

# Most info from wiki, some from docs. Lots of it missing, so TODO: find out what it is.
casus_belli = {
    ### Localised name to use for this Casus Belli. If a title is involved "Title" is available as a localization scope.
    name = localisation

    ### Localised name to use for the resulting war. If a title is involved you can use the variable "$OTHER_TITLE$" in your localized text to display the title name.
    war_name = localisation

    # TODO: What sprite?
    ### Frame index to use in the UI when declaring war.
    sprite = int

    ### How long of a truce is enforced after war ends.
    truce_days = int

    ## cardinality = 0..1
    ### Used to decide the order in which CBs show up in the UI, higher going first. Ties are broken by definition order. Default is 0.
    sort_priority = int

    ## cardinality = 0..1
    ### If no, this CB can not be declared via the the regular CB interface; it's instead declared via events, decisions, etc. Defaults to "yes"?
    is_permanent = bool

    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    is_independence = bool

    ## cardinality = 0..1
    ### If yes, others attacking the same target will be considered enemies. Defaults to "no".
    hostile_against_others = bool

    subtype[hostile_against_others] = {
        ## cardinality = 0..1
        ### If yes, use the defender's primary title rather than the 3rd party title to determine hostility to other targets. Anyone else targeting them with a CB with this flag will be hostile, as will anyone targeting the primary title. Defaults to "no".
        full_hostility = bool
    }

    ## cardinality = 0..1
    ### If yes, other rulers can ask to join the war.
    can_ask_to_join_war = bool

    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "yes"?
    reflect_titleholder_change = bool

    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    is_claim_all = bool

    ## cardinality = 0..1
    ### If yes, this CB is considered a revolt against the liege. Defaults to "no".
    is_revolt_cb = bool

    ## cardinality = 0..1
    ### If yes, this CB is considered a major (faction-based) revolt against the liege. Defaults to "no".
    major_revolt = bool

    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    press_claim = bool

    ## cardinality = 0..1
    ### If no, white peace cannot be declared in wars with this CB. Defaults to "yes".
    allow_whitepeace = bool

    ## cardinality = 0..1
    ### If no, a tributary can't target their suzerain with this CB. UNCONFIRMED Defaults to "yes"? Never used in vanilla.
    allowed_to_target_suzerains = bool

    ## cardinality = 0..1
    ### If no, a suzerain can't target their tributary with this CB.
    allowed_to_target_tributaries = bool

    ## cardinality = 0..1
    ### If no, neither side can call allies to help with a war with this CB. Defaults to "yes". Seems to be obsoleted by attacker_can_call_allies and defender_can_call_allies, but is used in vanilla.
    can_call_allies = bool

    ## cardinality = 0..1
    ### If no, the attacker cannot call allies to help with a war with this CB. Defaults to "yes".
    attacker_can_call_allies = bool

    ## cardinality = 0..1
    ### If no, the defender cannot call allies to help with a war with this CB. Defaults to "yes".
    defender_can_call_allies = bool

    ## cardinality = 0..1
    ### UNCONFIRMED If yes, vassals can be called to assist in wars with this CB. Defaults to ???
    can_call_vassals = bool

    ## cardinality = 0..1
    ### UNCONFIRMED If yes, vassals can be called to assist in wars with this CB. Defaults to ???
    can_attack_vassals = bool

    ## cardinality = 0..1
    ### UNCONFIRMED If yes, a liege can attack their vassal using this CB. Defaults to "no".
    attacker_alliance_occ_warscore = bool

    subtype[is_permanent] = {
        ## cardinality = 0..1
        ### Scans all de jure [value]s for the counties which are held by or vassals (or below) of selected character. What the hell does that mean?
        check_de_jure_tier = enum[title_tiers]

        ## cardinality = 0..1
        ### If yes, checks against all of a character's titles, including vassal held titles.
        check_all_titles = bool

        ## cardinality = 0..1
        ### UNKNOWN but I think I categorized it for the subtype correctly. Defaults to "no".
        check_all_trade_posts = bool

        ## cardinality = 0..1
        ### UNKNOWN
        check_actor_direct_vassals = bool
    }

    ## cardinality = 0..0
    ## severity = information
    ### Seems to be obsoleted by check_de_jure_tier.
    check_dejure_duchies = bool

    ## cardinality = 0..1
    ### "Optimization for de jure claims of vassals", whatever that means.
    other_de_jure_claim = bool

    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    is_holy_war = bool

    ## cardinality = 0..1
    ### If yes, do not apply the "recently_conquered" modifier to holdings. Defaults to "no".
    apply_short_occ_mod = bool

    ## cardinality = 0..1
    ### If set, war with the CB costs that much piety to declare.
    piety_cost = float

    ## cardinality = 0..1
    ### If set, war with the CB costs that much prestige to declare.
    prestige_cost = float

    ## cardinality = 0..1
    ### "AI parameter". Yeah, real helpful, wiki.
    allow_distant = bool

    ## cardinality = 0..1
    ### Warscore from battles is multiplied by this value.
    battle_warscore_mult = float

    ## cardinality = 0..1
    ### If yes, the attacker can call his religious head into the war. Defaults to "no".
    attacker_rel_head_is_ally = bool

    ## cardinality = 0..1
    ### If no, the CB isn't displayed in the diplomatic map mode. Defaults to "yes".
    display_on_map = bool

    ## cardinality = 0..0
    ## severity = information
    ### Obsoleted by infamy_modifier.
    coalition_threat = bool

    ## cardinality = 0..1
    ### The resulting threat from the war is multiplied by this value.
    infamy_modifier = float

    ## cardinality = 0..1
    ### UNKNOWN. Defaults to "no".
    is_tyrrany_cb = bool

    ## cardinality = 0..0
    ## severity = information
    ### Obsoleted by att/def_ticking_war_score_multiplier.
    ticking_war_score_multiplier = float

    ## cardinality = 0..1
    ### The speed of the ticking warscore is multiplied by this value for the attacker.
    att_ticking_war_score_multiplier = float

    ## cardinality = 0..1
    ### The speed of the ticking warscore is multiplied by this value for the defender.
    def_ticking_war_score_multiplier = float

    # TODO: Subtype material?
    ## cardinality = 0..1
    ### Defines how much warscore it is possible for the attacker to gain by occupying provinces. Defaults to 100. Make sure the CB has ticking warscore if using this or you could end up with never-ending wars.
    max_attacker_occupation_score = float

    # TODO: Ditto
    ## cardinality = 0..1
    ### Defines how much warscore it is possible for the defender to gain by occupying provinces. Defaults to 100. Make sure the CB has ticking warscore if using this or you could end up with never-ending wars.
    max_defender_occupation_score = float

    ## cardinality = 0..1
    ### Defines how much warscore it is possible for the attacker to gain by fighting battles. Defaults to the define MAX_WARSCORE_FROM_BATTLE_DEFENDERS.
    max_attacker_battle_score = float

    ## cardinality = 0..1
    ### Defines how much warscore it is possible for the defender to gain by fighting battles. Defaults to the define MAX_WARSCORE_FROM_BATTLE_DEFENDERS.
    max_defender_battle_score = float

    ## cardinality = 0..1
    ### If no, the defender having close relatives of the attacker's imprisoned does not prevent the attacker from declaring war. Defaults to "yes".
    hostages_block_cb = bool

    # TODO: Subtype material
    ## cardinality = 0..1
    ### If yes, the attacker will get ticking warscore while completely unoccupied. Only works if no title is targeted. Defaults to "no"?
    attacker_unoccupied_warscore = bool

    # TODO: Subtype material
    ## cardinality = 0..1
    ### If yes, the defender will get ticking warscore while completely unoccupied. Only works if no title is targeted. Defaults to "no"?
    defender_unoccupied_warscore = bool

    ## cardinality = 0..1
    ### If no, capturing the attacker as a prisoner gives CAPTURED_HEIR_WAR_SCORE warscore instead of automatically raising it to 100%. Defaults to "yes".
    capturing_attacker_is_complete_victory = bool

    ## cardinality = 0..1
    ### If no, capturing the defender as a prisoner gives CAPTURED_HEIR_WAR_SCORE warscore instead of automatically raising it to 100%. Defaults to "yes".
    capturing_defender_is_complete_victory = bool

    ## cardinality = 0..1
    ### Overrides what'd normally show as the third party on the war overview. ROOT is attacker, FROM is defender.
    third_party_portrait = scope[character]

    ## cardinality = 0..1
    ### Overrides which provinces are highlighted when the CB is selected in the diplomacy view.
    diplo_view_region = <region>

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### Conditions for the CB to show up in the declare war interaction. ROOT is the attacker, FROM is the defender.
    can_use = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ## replace_scope = { this = title root = character from = character }
    ### Conditions for the CB to show up in the declare war interaction with a target title. THIS is the target title, ROOT is the attacker, FROM is the defender.
    can_use_title = single_alias_right[trigger_clause]

    ## replace_scope = { this = character root = character from = character }
    ### Additional conditions for the CB to be used even if can_use/can_use_title passed and the CB is shown. ROOT is the attacker, FROM is the defender.
    can_use_gui = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### Conditions for the CB to continue being used after the war has started. ROOT is the attacker, FROM is the defender.
    is_valid = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ## replace_scope = { this = title root = character from = character }
    ### Conditions for the CB to continue being used after the war has started. THIS is the target title, ROOT is the attacker, FROM is the defender.
    is_valid_title = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ## replace_scope = { this = title root = character from = character }
    ### Modifies value AI places on the CB compared to other CBs. Default is 1. THIS is the target title, ROOT is the attacker, FROM is the defender.
    ai_will_do = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = war root = character from = character }
    ### The immediate effect of declaring war using this CB. ROOT is the attacker, FROM is the defender.
    on_add = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = title root = character from = character }
    ### The immediate effect of declaring war using this CB, after on_add. THIS is the target title, ROOT is the attacker, FROM is the defender.
    on_add_title = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### The immediate effect of declaring war using this CB, after on_add_title. ROOT is the attacker, FROM is the defender.
    on_add_posttitle = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### The effect of the attacker winning the war. ROOT is the attacker, FROM is the defender.
    on_success = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = title root = character from = character }
    ### The effect of the attacker winning the war, after on_success. THIS is the target title, ROOT is the attacker, FROM is the defender.
    on_success_title = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### The effect of the attacker winning the war, after on_success_title. ROOT is the attacker, FROM is the defender.
    on_success_posttitle = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = war root = character from = character }
    ### The effect of a white peace. ROOT is the attacker, FROM is the defender.
    on_fail = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = war root = character from = character }
    ### The effect of a white peace, after on_fail. THIS is the target title, ROOT is the attacker, FROM is the defender.
    on_fail_title = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### The effect of a white peace, after on_fail_title. ROOT is the attacker, FROM is the defender.
    on_fail_posttitle = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## replace_scope = { this = war root = character from = character }
    ### The effect of the attacker losing the war. ROOT is the attacker, FROM is the defender.
    on_reverse_demand = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = title root = character from = character }
    ### The effect of the attacker losing the war, after on_reverse_demand. THIS is the target title, ROOT is the attacker, FROM is the defender.
    on_reverse_demand_title = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character from = character }
    ### The effect of the attacker losing the war, after on_reverse_demand_title. ROOT is the attacker, FROM is the defender.
    on_reverse_demand_posttitle = {
        alias_name[effect] = alias_match_left[effect]
    }

    # TODO: Docs
    ## cardinality = 0..1
    ## replace_scope = { this = war root = character }
    ### The effect of the leader of the attacking forces dying. ROOT is the war, which can scope to attacker, defender, thirdparty (if involved) and thirdparty_title (if involved).
    on_attacker_leader_death = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = war root = character }
    ### The effect of the leader of the defending forces dying. ROOT is the character.
    on_defender_leader_death = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = war root = war }
    ### The effect of the third party character dying. ROOT is the war, which can scope to attacker, defender, thirdparty (if involved) and thirdparty_title (if involved).
    on_thirdparty_death = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ## replace_scope = { this = war root = war }
    ### The effect of the CB being invalidated. ROOT is the war, which can scope to attacker, defender, thirdparty (if involved) and thirdparty_title (if involved).
    on_invalidation = {
        alias_name[effect] = alias_match_left[effect]
    }

    ## replace_scope = { this = character root = character }
    ### Minimum warscore for AI to accept surrender from defender. -1 means always accept.
    attacker_ai_victory_worth = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }

    ## replace_scope = { this = character root = character }
    ### Minimum warscore for AI to admit defeat to defender. -1 means always accept.
    attacker_ai_defeat_worth = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }

    ## replace_scope = { this = character root = character }
    ### Minimum warscore for AI to accept surrender from attacker. -1 means always accept.
    defender_ai_victory_worth = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }

    ## replace_scope = { this = character root = character }
    ### Minimum warscore for AI to admit defeat to attacker. -1 means always accept.
    defender_ai_defeat_worth = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }
}
