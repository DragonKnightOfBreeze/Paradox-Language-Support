types = {
    type[council_position] = {
        path_strict = yes
        path = "game/common/council_positions"

        localisation = {
            ## required
            name = "$"
            ## required
            description = "$_desc"
        }
    }
}

council_position = {
    ### What frame from GFX_council_postions_sprite and GFX_council_postions_small_sprite to use for the position. Vanilla uses 1-5.
    icon = int

    ## cardinality = 0..1
    ### If no, the councilor will not be able to request law changes. Defaults to "yes".
    may_request_law_change = bool

    ## replace_scope = { this = character root = character }
    ### Conditions for the councilor to be able to select this position.
    potential = single_alias_right[trigger_clause]

    ## replace_scope = { this = character root = character }
    ### Used by the AI when there is no possible position with a resulting selection score higher than 0. The possible position with the highest default_selection score will be selected.
    default_selection = {
        ### Base score.
        value = int
        # additive_modifier might be possible, judging by 04_malcontent.txt. TODO: check
    }

    ## replace_scope = { this = character root = character }
    ### Used by the AI to select a position. The possible position with the highest resulting selection score will be selected, unless none are above 0 - default_selection will be used.
    selection = {
        ### Base score.
        value = int

        ## cardinality = 0..inf
        ### Adds the percentage of available troops from "ROOT" to "who" multiplied by factor to the score.
        additive_power_diff_modifier = single_alias_right[council_power_percentages]

        ## cardinality = 0..inf
        ### Adds the percentage of realm size from "ROOT" to "who" multiplied by factor to the score.
        additive_compared_realm_size_modifier = single_alias_right[council_power_percentages]

        # According to wiki; haven't checked myself
        ## cardinality = 0..inf
        ### Divide the character's absolute size by balance, then square and multiply by factor.
        additive_realm_size_modifier = { 
            factor = float
            balance = int
            alias_name[trigger] = alias_match_left[trigger]
        }
        
        ## cardinality = 0..inf
        ### Adds the opinion from "ROOT" to "who" multiplied by factor to the score.
        additive_opinion_modifier = single_alias_right[council_power_percentages]

        ## cardinality = 0..inf
        alias_name[additive_modifier] = alias_match_left[additive_modifier]

        # TODO: Check if multiplicative modifier works.
    }

    # Based on wiki info.
    ## replace_scope = { this = character root = character from = character fromfrom = character }
    ## cardinality = 0..1
    ### Selects a preferred war target for the character.
    war_target = single_alias_right[trigger_clause]

    # TODO: Confirm it's order and not for first, against second.
    ### Voting patterns the position uses in interactions it's allowed to. It'll go through patterns in order, to see if they vote for or against. If nothing matches, they'll be undecided.
    voting_patterns = {
        ## cardinality = 0..inf
        <council_voting_pattern>
    }
}