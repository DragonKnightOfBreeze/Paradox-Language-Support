#Scopes and Logical Operators

#CWTools magic scope
alias[trigger:scope_field] = single_alias_right[trigger_clause]
alias[effect:scope_field] = single_alias_right[effect_clause]

alias[trigger:NOT] = {
	## cardinality = 1..1
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:NOR] = single_alias_right[trigger_clause]
alias[trigger:NAND] = single_alias_right[trigger_clause]
alias[trigger:AND] = single_alias_right[trigger_clause]
alias[trigger:OR] = single_alias_right[trigger_clause]
alias[trigger:calc_true_if] = {
	amount = int
	## cardinality = 1..inf
    alias_name[trigger] = alias_match_left[trigger]
}

alias[effect:NOT] = {
	## cardinality = 1..1
	alias_name[effect] = alias_match_left[effect]
}

alias[effect:NOR] = single_alias_right[effect_clause]
alias[effect:NAND] = single_alias_right[effect_clause]
alias[effect:AND] = single_alias_right[effect_clause]
alias[effect:OR] = single_alias_right[effect_clause]
alias[effect:hidden_effect] = single_alias_right[effect_clause]
alias[trigger:hidden_trigger] = single_alias_right[trigger_clause]

## scope = any
alias[effect:if] = {
	limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
alias[effect:else_if] = {
	## severity = info
	limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = any
alias[effect:else] = single_alias_right[effect_clause]

# Absolute reference scopes

## scope = any
## push_scope = society
### Scopes to a society by absolute reference.
alias[trigger:<society>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = society
### Scopes to a society by absolute reference.
alias[effect:<society>] = single_alias_right[effect_clause]

## scope = any
## push_scope = offmap
### Scopes to an offmap power by absolute reference.
alias[trigger:<offmap>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = offmap
### Scopes to an offmap power by absolute reference.
alias[effect:<offmap>] = single_alias_right[effect_clause]

## scope = any
## push_scope = title
### Scopes to a landed title by absolute reference.
alias[trigger:<title>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = title
### Scopes to a landed title by absolute reference.
alias[effect:<title>] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = character
### Scopes to a character by absolute reference.
alias[trigger:c_<character>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = character
### Scopes to a character by absolute reference.
alias[effect:c_<character>] = {
    alias_name[effect] = alias_match_left[effect]
}

# TODO: See if limits work
## scope = any
## push_scope = character
### Scopes to all characters with a cached trait.
alias[trigger:<trait.cached>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = character
### Scopes to all characters with a cached trait.
alias[effect:<trait.cached>] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = province
### Scopes to a province by absolute reference.
alias[trigger:enum[provinces]] = single_alias_right[trigger_clause]

## scope = any
## push_scope = province
### Scopes to a province by absolute reference.
alias[effect:enum[provinces]] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = religion
### Scopes to a religion by absolute reference.
alias[trigger:<religion>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = religion
### Scopes to a religion by absolute reference.
alias[effect:<religion>] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = religion
### Scopes to the first religion in a group by absolute reference.
alias[trigger:<religion_group>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = religion
### Scopes to the first religion in a group by absolute reference.
alias[effect:<religion_group>] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = culture
### Scopes to a culture by absolute reference.
alias[trigger:<culture>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = culture
### Scopes to a culture by absolute reference.
alias[effect:<culture>] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = any
## push_scope = culture
### Scopes to the first culture in a group by absolute reference.
alias[trigger:<culture_group>] = single_alias_right[trigger_clause]

## scope = any
## push_scope = culture
### Scopes to the first culture in a group by absolute reference.
alias[effect:<culture_group>] = {
    alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to all titles a character has claims upon
alias[trigger:any_claim] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all titles a character has claims upon
alias[effect:any_claim] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all titles that are dejure part of a character or title's realm
alias[trigger:any_de_jure_vassal_title] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all titles that are dejure part of a character or title's realm
alias[effect:any_de_jure_vassal_title] = single_alias_right[any_effect_clause]

## scope = title
## push_scope = title
### Scopes to all titles that are dejure part of a title's realm
alias[trigger:any_direct_de_jure_vassal_title] = single_alias_right[trigger_clause]
## scope = title
## push_scope = title
### Scopes to all titles that are dejure part of a title's realm
alias[effect:any_direct_de_jure_vassal_title] = single_alias_right[any_effect_clause]

# TODO: Docs
## scope = title
## push_scope = title
### 
alias[trigger:any_de_jure_liege_title] = single_alias_right[trigger_clause]
## scope = title
## push_scope = title
### 
alias[effect:any_de_jure_liege_title] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all titles a character holds
alias[trigger:any_demesne_title] = single_alias_right[any_trigger_clause]

## scope = character
## push_scope = title
### Scopes to all titles a character holds
alias[effect:any_demesne_title] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all titles to which the character is the current heir
alias[trigger:any_heir_title] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all titles to which the character is the current heir
alias[effect:any_heir_title] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all landed titles. Warning CPU HEAVY
alias[trigger:any_landed_title] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all landed titles. Warning CPU HEAVY
alias[effect:any_landed_title] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all mercenary bands
alias[trigger:any_mercenary_band] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all mercenary bands
alias[effect:any_mercenary_band] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
###
alias[trigger:any_potential_tribal_county] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
###
alias[effect:any_potential_tribal_county] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all titles held by pretenders
alias[trigger:any_pretender_title] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all titles held by pretenders
alias[effect:any_pretender_title] = single_alias_right[any_effect_clause]

## scope = province
## push_scope = title
### Scopes to all holdings of a province*
alias[trigger:any_province_holding] = single_alias_right[trigger_clause]
## scope = province
## push_scope = title
### Scopes to all holdings of a province*
alias[effect:any_province_holding] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[trigger:any_quest_target] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[effect:any_quest_target] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all titles within a character or title's realm
alias[trigger:any_realm_title] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all titles within a character or title's realm
alias[effect:any_realm_title] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to all titles
alias[trigger:any_title] = single_alias_right[trigger_clause]
## scope = character
## push_scope = title
### Scopes to all titles
alias[effect:any_title] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = title
### Scopes to a random title the character has a claim upon.
alias[effect:random_claim] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to a random title the character holds.
alias[effect:random_demesne_title] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to a random title that is dejure part of the scoped title's realm
alias[effect:random_direct_de_jure_vassal_title] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to a random landed title
alias[effect:random_landed_title] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to a county suitable for tribal takeover
alias[effect:random_potential_tribal_county] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = province
## push_scope = title
### Scopes to a random holding of a province
alias[effect:random_province_holding] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[effect:random_quest_target] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = title
### Scopes to a random title in realm.
alias[effect:random_realm_title] = {
    ## cardinality = 0..1
    limit = single_alias_right[trigger_clause]
    ## cardinality = 0..inf
    preferred_limit = single_alias_right[trigger_clause]
	alias_name[effect] = alias_match_left[effect]
}


# character #####
## scope = character
## push_scope = character
### Scopes to all allies. Expensive calculation, use with care[2]
alias[trigger:any_allied_character] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all allies. Expensive calculation, use with care[2]
alias[effect:any_allied_character] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to anyone who has ever owned the artifact, including the current owner. Does not work on artifacts that have the history = no parameter.
alias[trigger:any_artifact_owner] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to anyone who has ever owned the artifact, including the current owner. Does not work on artifacts that have the history = no parameter.
alias[effect:any_artifact_owner] = single_alias_right[any_effect_clause]

## scope = war
## push_scope = character
### Scopes to all attackers in a war
alias[trigger:any_attacker] = single_alias_right[trigger_clause]

## scope = war
## push_scope = character
### Scopes to all attackers in a war
alias[effect:any_attacker] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters whose plots a character is supporting
alias[trigger:any_backed_character] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters whose plots a character is supporting
alias[effect:any_backed_character] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all members of the current bloodline
alias[trigger:any_bloodline_member] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all members of the current bloodline
alias[effect:any_bloodline_member] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters, except for offmap rulers. WARNING CPU HEAVY
alias[trigger:any_character] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters, except for offmap rulers. WARNING CPU HEAVY
alias[effect:any_character] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
###
alias[trigger:any_child] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
###
alias[effect:any_child] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's children
alias[trigger:any_child_even_if_dead] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's children
alias[effect:any_child_even_if_dead] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all claimants of a title
alias[trigger:any_claimant] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all claimants of a title
alias[effect:any_claimant] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all living close relatives of a character. Includes anyone with a 'red blood' icon in their dynasty (siblings, children, grandchildren, parents, grandparents, etc.), as well as bastards of their closest relatives. Does not include spouse.
alias[trigger:any_close_relative] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all living close relatives of a character. Includes anyone with a 'red blood' icon in their dynasty (siblings, children, grandchildren, parents, grandparents, etc.), as well as bastards of their closest relatives. Does not include spouse.
alias[effect:any_close_relative] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to everyone in the same court as the character. Note that it will match prisoners (even if foreign) and councillors (even if landed). If used for a ruler who is a councilor, it will check their liege's court instead of their own!
alias[trigger:any_courtier] = single_alias_right[any_trigger_clause]

## scope = character
## push_scope = character
### Scopes to everyone in the same court as the character. Note that it will match prisoners (even if foreign) and councillors (even if landed). If used for a ruler who is a councilor, it will check their liege's court instead of their own!
alias[effect:any_courtier] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Primarily used to find minor title holders:
alias[trigger:any_courtier_or_vassal] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Primarily used to find minor title holders:
alias[effect:any_courtier_or_vassal] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters actively at war with a character. Both characters have to be participating directly in the war, not as vassals
alias[trigger:any_current_enemy] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters actively at war with a character. Both characters have to be participating directly in the war, not as vassals
alias[effect:any_current_enemy] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all de jure vassals of a character or title.
alias[trigger:any_de_jure_vassal] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all de jure vassals of a character or title.
alias[effect:any_de_jure_vassal] = single_alias_right[any_effect_clause]

## scope = war
## push_scope = character
### Scopes to all defenders in a war
alias[trigger:any_defender] = single_alias_right[trigger_clause]

## scope = war
## push_scope = character
### Scopes to all defenders in a war
alias[effect:any_defender] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
###
alias[trigger:any_dynasty_member] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
###
alias[effect:any_dynasty_member] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all members of a character's dynasty.
alias[trigger:any_dynasty_member_even_if_dead] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all members of a character's dynasty.
alias[effect:any_dynasty_member_even_if_dead] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to any character (known/unknown) plotting against the character in scope
alias[trigger:any_enemy_plotter] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to any character (known/unknown) plotting against the character in scope
alias[effect:any_enemy_plotter] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to faction members. Faction field can be used to specify faction (ex: faction = faction_lower_tribal_organization)
alias[trigger:any_faction_backer] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to faction members. Faction field can be used to specify faction (ex: faction = faction_lower_tribal_organization)
alias[effect:any_faction_backer] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters to which a character owes a favor
alias[trigger:any_favor_holder] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters to which a character owes a favor
alias[effect:any_favor_holder] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters that owe a favor to the character
alias[trigger:any_favor_ower] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters that owe a favor to the character
alias[effect:any_favor_ower] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's friends
alias[trigger:any_friend] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's friends
alias[effect:any_friend] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters in the same court. Shorter version of host = { any_courtier = { ... } }
alias[trigger:any_host_courtier] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters in the same court. Shorter version of host = { any_courtier = { ... } }
alias[effect:any_host_courtier] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all independent rulers. Doesn't include ROOT. Excludes revolts; to include them, use a broader scope with limit = { liege = { character = PREV } }.
alias[trigger:any_independent_ruler] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all independent rulers. Doesn't include ROOT. Excludes revolts; to include them, use a broader scope with limit = { liege = { character = PREV } }.
alias[effect:any_independent_ruler] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to any known character plotting against the character in scope
alias[trigger:any_known_enemy_plotter] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to any known character plotting against the character in scope
alias[effect:any_known_enemy_plotter] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to any plotter character whose plot the character in scope knows about
alias[trigger:any_known_plotter] = single_alias_right[any_plotter_trigger_clause]

## scope = character
## push_scope = character
### Scopes to any plotter character whose plot the character in scope knows about
alias[effect:any_known_plotter] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all lieges a character has, regardless of how many tiers above. This includes liege and top_liege scopes.
alias[trigger:any_liege] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all lieges a character has, regardless of how many tiers above. This includes liege and top_liege scopes.
alias[effect:any_liege] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all dejure lieges a character has, regardless of how many tiers above.
alias[trigger:any_dejure_liege] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all dejure lieges a character has, regardless of how many tiers above.
alias[effect:any_dejure_liege] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all defacto lieges a character has, regardless of how many tiers above.
alias[trigger:any_dejure_liege] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all defacto lieges a character has, regardless of how many tiers above.
alias[effect:any_dejure_liege] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all lovers a character has
alias[trigger:any_lover] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all lovers a character has
alias[effect:any_lover] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all independent rulers whose realm neighbors the realm you are in.
alias[trigger:any_neighbor_independent_ruler] = single_alias_right[any_trigger_clause]
## scope = character
## push_scope = character
### Scopes to all independent rulers whose realm neighbors the realm you are in.
alias[effect:any_neighbor_independent_ruler] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters to which someone has a non-aggression pact
alias[trigger:any_non_aggression_pact_character] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters to which someone has a non-aggression pact
alias[effect:any_non_aggression_pact_character] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters having an opinion modifier toward scoped characterany_opinion_modifier_target = {
alias[trigger:any_opinion_modifier_target] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters having an opinion modifier toward scoped characterany_opinion_modifier_target = {
alias[effect:any_opinion_modifier_target] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all playable rulers currently alive. Combined with limit = { ai = no }, it allows to broadcast events to human players.
alias[trigger:any_playable_ruler] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all playable rulers currently alive. Combined with limit = { ai = no }, it allows to broadcast events to human players.
alias[effect:any_playable_ruler] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all players.
alias[trigger:any_player] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all players.
alias[effect:any_player] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to everyone backing the character's plot
alias[trigger:any_plot_backer] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to everyone backing the character's plot
alias[effect:any_plot_backer] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all plotters (anywhere?). Vanilla usage uses 'target = ROOT' on the first line of the scope to limit the search. (?)any_plotter = {
alias[trigger:any_plotter] = single_alias_right[any_plotter_trigger_clause]
## scope = character
## push_scope = character
### Scopes to all plotters (anywhere?). Vanilla usage uses 'target = ROOT' on the first line of the scope to limit the search. (?)any_plotter = {
alias[effect:any_plotter] = {
	## cardinality = 0..1
	target = scope[character]
    ## cardinality = 0..1
	limit = single_alias_right[trigger_clause]
    ## cardinality = 0..1
    count = int

    alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to previous holders of a title
alias[trigger:any_previous_holder] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to previous holders of a title
alias[effect:any_previous_holder] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters in the province
alias[trigger:any_province_character] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters in the province
alias[effect:any_province_character] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all landed characters in the province
alias[trigger:any_province_lord] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all landed characters in the province
alias[effect:any_province_lord] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters that the scope is educating.
alias[trigger:any_pupil] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters that the scope is educating.
alias[effect:any_pupil] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters with a quest.
alias[trigger:any_quester] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters with a quest.
alias[effect:any_quester] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
###
alias[trigger:any_quester_targeting_this] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
###
alias[effect:any_quester_targeting_this] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters with a quest targeting the current scope.
alias[trigger:any_quester_targetting_this] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters with a quest targeting the current scope.
alias[effect:any_quester_targetting_this] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[trigger:any_quest_target] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[effect:any_quest_target] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all characters within the current character or title's sub-realm. Includes both vassals and courtiers, but not the liege of the realm. Like any_courtier, it does not include prisoners abroad.
alias[trigger:any_realm_character] = single_alias_right[any_trigger_clause]

## scope = character
## push_scope = character
### Scopes to all characters within the current character or title's sub-realm. Includes both vassals and courtiers, but not the liege of the realm. Like any_courtier, it does not include prisoners abroad.
alias[effect:any_realm_character] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all landed characters within the current character's realm. It doesn't include the liege of the realm.
alias[trigger:any_realm_lord] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all landed characters within the current character's realm. It doesn't include the liege of the realm.
alias[effect:any_realm_lord] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's rivals
alias[trigger:any_rival] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's rivals
alias[effect:any_rival] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
###
alias[trigger:any_sibling] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
###
alias[effect:any_sibling] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's siblings
alias[trigger:any_sibling_even_if_dead] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's siblings
alias[effect:any_sibling_even_if_dead] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all members of the society. Note: if current scope is not a society, will scope to all characters in any society (?).
alias[trigger:any_society_member] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all members of the society. Note: if current scope is not a society, will scope to all characters in any society (?).
alias[effect:any_society_member] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
###
alias[trigger:any_spouse] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
###
alias[effect:any_spouse] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's spouses
alias[trigger:any_spouse_even_if_dead] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's spouses
alias[effect:any_spouse_even_if_dead] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's consorts (not only concubines, works for both genders)
alias[trigger:any_consort] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's consorts (not only concubines, works for both genders)
alias[effect:any_consort] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
###
alias[trigger:any_suzerain] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
###
alias[effect:any_suzerain] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all tributaries of the scope
alias[trigger:any_tributary] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all tributaries of the scope
alias[effect:any_tributary] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all leaders (flank or subunit) in a unit scope. In character uses the unit that character is in. If the unit is in combat, every unit on the same side in the battle is included.
alias[trigger:any_unit_leader] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all leaders (flank or subunit) in a unit scope. In character uses the unit that character is in. If the unit is in combat, every unit on the same side in the battle is included.
alias[effect:any_unit_leader] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to vassals with different dynasties (excluding dynasty of scoped character).
alias[trigger:any_unique_dynasty_vassal] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to vassals with different dynasties (excluding dynasty of scoped character).
alias[effect:any_unique_dynasty_vassal] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Only scopes to the plotters of the Character in scope that are unknown
alias[trigger:any_unknown_enemy_plotter] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Only scopes to the plotters of the Character in scope that are unknown
alias[effect:any_unknown_enemy_plotter] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all direct vassals of a character or title. Does not include courtiers. To scope to all vassals (direct or not) consider using any_realm_character.
alias[trigger:any_vassal] = single_alias_right[any_trigger_clause]
## scope = character
## push_scope = character
### Scopes to all direct vassals of a character or title. Does not include courtiers. To scope to all vassals (direct or not) consider using any_realm_character.
alias[effect:any_vassal] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all voters in a character's council
alias[trigger:any_voter] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all voters in a character's council
alias[effect:any_voter] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = character
### Scopes to all of a character's wards
alias[trigger:any_ward] = single_alias_right[trigger_clause]
## scope = character
## push_scope = character
### Scopes to all of a character's wards
alias[effect:any_ward] = single_alias_right[any_effect_clause]


## scope = character
## push_scope = character
### Scopes to an ally
alias[effect:random_allied_character] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character from those who have ever owned the artifact, including the current owner. Does not work on artifacts that have the history = no parameter.
alias[effect:random_artifact_owner] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character the character is backing. Cannot be used as a trigger
alias[effect:random_backed_character] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random member of the current bloodline
alias[effect:random_bloodline_member] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes a random character in the game, excluding offmap rulers. Cannot be used as a trigger. Note: This scope doesn't apply commands to ROOT.
alias[effect:random_character] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_child] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random child of the character. Cannot be used as a trigger
alias[effect:random_child_even_if_dead] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random close relative of the character.
alias[effect:random_close_relative] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random courtier of the character, including prisoners. Cannot be used as a trigger.
alias[effect:random_courtier] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random courtier or vassal of the character. Cannot be used as a trigger.
alias[effect:random_courtier_or_vassal] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random enemy of the character. Both characters must be participating directly in the war, not as vassals.
alias[effect:random_current_enemy] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_dynasty_member] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random member of the character's dynasty.
alias[effect:random_dynasty_member_even_if_dead] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_enemy_plotter] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random friend of the character.
alias[effect:random_friend] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character in the same court. Shorter version of host = { random_courtier = { ... } }
alias[effect:random_host_courtier] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random independent ruler. Doesn't include ROOT.
alias[effect:random_independent_ruler] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_known_enemy_plotter] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random lover.
alias[effect:random_lover] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random independent ruler whose realm neighbors the realm you are in.
alias[effect:random_neighbor_independent_ruler] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character with a non-aggression pact toward current character.
alias[effect:random_non_aggression_pact_character] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character with an opinion modifier toward scoped character
alias[effect:random_opinion_modifier_target] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random playable ruler.
alias[effect:random_playable_ruler] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random player.
alias[effect:random_player] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character in the province.
alias[effect:random_province_character] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random landed character in the province.
alias[effect:random_province_lord] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character that the scope is educating.
alias[effect:random_pupil] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character with a quest.
alias[effect:random_quester] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character with a quest targeting the current scope.
alias[effect:random_quester_targetting_this] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[effect:random_quest_target] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random character in the character or title's realm.
alias[effect:random_realm_character] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random landed character in the character or title's realm.
alias[effect:random_realm_lord] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random rival of the character.
alias[effect:random_rival] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_sibling] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random sibling of the character.
alias[effect:random_sibling_even_if_dead] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random member of the society. Note: if current scope is not a society, will scope to a random character that is in any society (?).
alias[effect:random_society_member] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_spouse] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random spouse of the character.
alias[effect:random_spouse_even_if_dead] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random consort of the character (not only concubines, works for both genders).
alias[effect:random_consort] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to all tributaries of the scope
alias[effect:random_tributary] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random leader (flank or subunit) in a unit scope. In character uses the unit that character is in. If the unit is in combat, every unit on the same side in the battle is included.
alias[effect:random_unit_leader] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
###
alias[effect:random_unknown_enemy_plotter] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random vassal of the character or title.
alias[effect:random_vassal] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random voter on the council
alias[effect:random_voter] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = character
### Scopes to a random ward of the character.
alias[effect:random_ward] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


# Provinces #####
## scope = character
## push_scope = province
### Scopes to all provinces in the targeted sub-realm that are connected to this province. Takes the same parameters as the is_connected_to trigger, except for target.
alias[trigger:any_connected_province] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all provinces in the targeted sub-realm that are connected to this province. Takes the same parameters as the is_connected_to trigger, except for target.
alias[effect:any_connected_province] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all provinces in a character's demesne.
alias[trigger:any_demesne_province] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all provinces in a character's demesne.
alias[effect:any_demesne_province] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all provinces in the targeted sub-realm that aren't connected to this province. Takes the same parameters as the is_connected_to trigger, except for target.
alias[trigger:any_disconnected_province] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all provinces in the targeted sub-realm that aren't connected to this province. Takes the same parameters as the is_connected_to trigger, except for target.
alias[effect:any_disconnected_province] = single_alias_right[any_effect_clause]

## scope = { character province }
## push_scope = province
### Scopes to all border provinces, including sea tiles.
alias[trigger:any_neighbor_province] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all border provinces, including sea tiles.
alias[effect:any_neighbor_province] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all provinces. WARNING CPU HEAVY
alias[trigger:any_province] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all provinces. WARNING CPU HEAVY
alias[effect:any_province] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all of a character's forts
alias[trigger:any_fort] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all of a character's forts
alias[effect:any_fort] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all of a character's hospitals
alias[trigger:any_hospital] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all of a character's hospitals
alias[effect:any_hospital] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[trigger:any_quest_target] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[effect:any_quest_target] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all provinces in a character or title's realm
alias[trigger:any_realm_province] = single_alias_right[any_trigger_clause]
## scope = character
## push_scope = province
### Scopes to all provinces in a character or title's realm
alias[effect:any_realm_province] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all of a character's trade posts
alias[trigger:any_trade_post] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all of a character's trade posts
alias[effect:any_trade_post] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = province
### Scopes to all other provinces on a trade route
alias[trigger:any_trade_route_province] = single_alias_right[trigger_clause]
## scope = character
## push_scope = province
### Scopes to all other provinces on a trade route
alias[effect:any_trade_route_province] = single_alias_right[any_effect_clause]


## scope = character
## push_scope = province
### Scopes to a random province in the targeted sub-realm that is connected to this province. Takes the same parameters as the is_connected_to trigger, except for target.
alias[effect:random_connected_province] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = province
### Scopes to a random province in the character's demesne.
alias[effect:random_demesne_province] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = province
### Scopes to a random province in the targeted sub-realm that isn't connected to this province. Takes the same parameters as the is_connected_to trigger, except for target.
alias[effect:random_disconnected_province] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = province
## push_scope = province
### Scopes to a random bordering province. Unlike any_neighbor_province, this does NOT scope to sea tiles!
alias[effect:random_neighbor_province] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = province
### Scopes to a random province province
alias[effect:random_province] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = province
### Scopes to all characters, provinces, and titles that are a target of a quest. Note that the script should either be able to handle all three types or filter the target type in the limit.
alias[effect:random_quest_target] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = province
### Scopes to a random province in the character or title's realm.
alias[effect:random_realm_province] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = province
### Scopes to a random trade post of the character or province.
alias[effect:random_trade_post] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


# War ####
## scope = { character title }
## push_scope = war
### Scopes to any war the character is participating in as an active member; a liege participating would not count. When used in title scope, checks all wars for that title.
alias[trigger:any_war] = single_alias_right[trigger_clause]
## scope = { character title }
## push_scope = war
### Scopes to any war the character is participating in as an active member; a liege participating would not count. When used in title scope, checks all wars for that title.
alias[effect:any_war] = single_alias_right[any_effect_clause]

# Unit ####

## scope = character
## push_scope = unit
### Scopes to all armies belonging to the character.
alias[trigger:any_army] = single_alias_right[trigger_clause]
## scope = character
## push_scope = unit
### Scopes to all armies belonging to the character.
alias[effect:any_army] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = unit
### Scopes to all units controlled by the character (?).
alias[trigger:any_controlled_unit] = single_alias_right[trigger_clause]
## scope = character
## push_scope = unit
### Scopes to all units controlled by the character (?).
alias[effect:any_controlled_unit] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = unit
### Scopes to all fleet belonging to the character.
alias[trigger:any_fleet] = single_alias_right[trigger_clause]
## scope = character
## push_scope = unit
### Scopes to all fleet belonging to the character.
alias[effect:any_fleet] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = unit
### Scopes to all units belonging to the character.
alias[trigger:any_unit] = single_alias_right[trigger_clause]
## scope = character
## push_scope = unit
### Scopes to all units belonging to the character.
alias[effect:any_unit] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = unit
### Scopes to an armies belonging to the character.
alias[effect:random_army] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = unit
### Scopes to a unit controlled by the character (?).
alias[effect:random_controlled_unit] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = unit
### Scopes to a fleet belonging to the character.	X
alias[effect:random_fleet] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = unit
### Scopes to a unit belonging to the character.
alias[effect:random_unit] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

# Artifact ####
## scope = character
## push_scope = artifact
### Scopes to any artifact. Used within character scope.
alias[trigger:any_artifact] = single_alias_right[trigger_clause]
## scope = character
## push_scope = artifact
### Scopes to any artifact. Used within character scope.
alias[effect:any_artifact] = single_alias_right[any_effect_clause]

## scope = character
## push_scope = artifact
### Scopes to a random artifact. Used within character scope.
alias[effect:random_artifact] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

# Bloodlines ####

## push_scope = bloodline
### Scopes to any created bloodline
alias[trigger:any_bloodline] = single_alias_right[trigger_clause]
## push_scope = bloodline
### Scopes to any created bloodline
alias[effect:any_bloodline] = single_alias_right[any_effect_clause]

## push_scope = bloodline
## scope = character
### Scopes to any bloodline owned by the character
alias[trigger:any_owned_bloodline] = single_alias_right[trigger_clause]
## push_scope = bloodline
## scope = character
### Scopes to any bloodline owned by the character
alias[effect:any_owned_bloodline] = single_alias_right[any_effect_clause]

## push_scope = bloodline
### Scopes to a random created bloodline
alias[effect:random_bloodline] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

## scope = character
## push_scope = bloodline
### Scopes to any bloodline owned by the character
alias[effect:random_owned_bloodline] = {
	##cardinality = 0..1
	limit = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	preferred_limit = {
		alias_name[trigger]=alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}
