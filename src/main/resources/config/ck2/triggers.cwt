### True if yes. False if no.
alias[trigger:always] = bool

## scope = character
### Compares with the scoped character's own diplomacy.
alias[trigger:diplomacy] = int

## scope = character
### Compares with the scoped character's own martial.
alias[trigger:martial] = int

## scope = character
### Compares with the scoped character's own stewardship.
alias[trigger:stewardship] = int

## scope = character
### Compares with the scoped character's own intrigue.
alias[trigger:intrigue] = int

## scope = character
### Compares with the scoped character's own learning.
alias[trigger:learning] = int

## scope = character
### Compares with the scoped character's state diplomacy.
alias[trigger:realm_diplomacy] = int

## scope = character
### Compares with the scoped character's state martial.
alias[trigger:realm_martial] = int

## scope = character
### Compares with the scoped character's state stewardship.
alias[trigger:realm_stewardship] = int

## scope = character
### Compares with the scoped character's state intrigue.
alias[trigger:realm_intrigue] = int

## scope = character
### Compares with the scoped character's state learning.
alias[trigger:realm_learning] = int

## scope = character
### Compares years with the absolute value of the age difference between the scoped and the given characters.
alias[trigger:age_diff] = {
    who = scope[character]
    years = int
}

## scope = any
### Compares with the value of the difficulty setting.
alias[trigger:difficulty] = int

# TODO: enum?
## scope = any
### True if the difficulty setting matches the given value.
alias[trigger:difficulty] = TODO

## scope = any
### Compares duration with how long the given global flag has been set, if at all.
alias[trigger:had_global_flag] = {
    flag = value[global_flag]
    enum[duration_dy] = int
}

## scope = any
### True if the user has the given dlc enabled.
alias[trigger:has_dlc] = enum[dlcs]

## scope = any
### True if the given game rule has the given option selected.
alias[trigger:has_game_rule] = {
    name = <game_rule>
    value = value[game_rule_option]
}

## scope = any
### Checks if the game has been unpaused.
alias[trigger:has_game_started] = bool

## scope = any
### True if the global flag is currently set.
alias[trigger:has_global_flag] = value[global_flag]


## scope = any
### Checks if the world is randomised or shattered.
alias[trigger:is_alternate_start] = bool

## scope = any
### Checks if the world is randomised.
alias[trigger:is_random_world] = bool

## scope = any
### Checks if the world is shattered.
alias[trigger:is_shattered_world] = bool

## scope = province
### Compares with the distance from the scoped province to the nearest province with a religion. Used exclusively during alternate start setup as normally each province has a religion.
alias[trigger:any_religion_distance] = float

## scope = religion
### Compares with the amount of holy sites generated for the religion so far. Used exclusively during alternate start setup as normally each religion has exactly 5 holy sites.
alias[trigger:num_holy_sites_generated] = int

# TODO: Enum the parameters up. This is going to be a doozie. Right now let's just stick with scalars.
## scope = any
### True if the given alternate start parameter has been set to the given value.
alias[trigger:has_alternate_start_parameter] = {
    key = scalar
    value = scalar
}

## scope = any
### True if the given alternate start setting has the given option selected.
alias[trigger:has_alternate_start_setting] = {
    setting = <alternate_start_setting.checkbox>
    option = checked
    option = unchecked
}

# TODO: allow only options
## scope = any
### True if the given alternate start setting has the given option selected.
alias[trigger:has_alternate_start_setting] = {
    setting = <alternate_start_setting.selection>
    setting = <alternate_start_setting.custom>
    option = scalar
}

## scope = any
### Compares value with the given alternate start setting's value.
alias[trigger:has_alternate_start_setting] = {
    setting = <alternate_start_setting.slider>
    value = int
}

## scope = any
### Compares min and max with the given alternate start setting's min and max.
alias[trigger:has_alternate_start_setting] = {
    setting = <alternate_start_setting.double_slider>
    value = int
}

## scope = any
### True if the given society's given rank is full.
alias[trigger:is_society_rank_full] = {
    society = scope[society]
    rank = int[1..4]
}

## scope = any
### True if the given title is active. For landed titles this also means having a holder, as they deactivate when not held.
alias[trigger:is_title_active] = scope[title]

## scope = any
### Compares with the current in-game month. Ranges from 0 (January) to 11 (December).
alias[trigger:month] = int[0..11]

## scope = any
### Checks if the game is multiplayer.
alias[trigger:multiplayer] = bool

# TODO: Is wiki correct about it being an inverse chance? I'm not sure, so I'm sticking with the obvious interpretation for now, but confirm
## scope = any
### Has a [value]% chance of being true.
alias[trigger:random] = int[1..100]

## scope = any
### Compares with the IRL month. Ranges from 0 (January) to 11 (December).
alias[trigger:real_month_of_year] = int[0..11]

# TODO: Compares?
## scope = any
## replace_scope = { this = province }
### True if a given percentage of provinces in a given region meets the given conditions.
alias[trigger:regional_percentage] = {
    region = <region>
    ### 0.0 is 0%, 1.0 is 100%
    percentage = float[0.0..1.0]

    alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
### True if the given date matches the initial start date of current game.
alias[trigger:start_date] = date

## scope = any
### Checks if current checksum matches at least one supported checksum in the .mod files of any active mods.
alias[trigger:supported_checksum] = bool

## scope = any
### Compares with the number of years since the beginning of the current game.
alias[trigger:total_years_played] = int

## scope = any
### Compares with the current year.
alias[trigger:year] = int

# TODO: Confirm scopes
## scope = culture
### Compares with the number of provinces in the world with the culture associated with the scoped entity.
alias[trigger:num_culture_provinces] = int

# TODO: Confirm scopes
## scope = any that have associated religion
### Compares with the number of provinces in the world with the religion associated with the scoped entity.
alias[trigger:num_religion_provinces] = int

## scope = any with flags
### Checks if the current scope has had a given flag for a given time in days, months or years. Works for any scope that can store flags, unlike the more specific had_scope_flag commands.
alias[trigger:had_flag] = {
    flag = value[flag]
    flag = value[global_flag]
    ## scope = artifact
    flag = value[artifact_flag]
    ## scope = bloodline
    flag = value[bloodline_flag]
    ## scope = character
    flag = value[character_flag]
    ## scope = character
    flag = value[dynasty_flag]
    ## scope = province
    flag = value[province_flag]
    ## scope = title
    flag = value[title_flag]
    enum[duration] = int
}

## scope = any with flags
### Checks if the current scope has a given flag. Works for any scope that can store flags, unlike the more specific has_scope_flag commands.
alias[trigger:has_flag] = value[flag]

## scope = any with flags
### Checks if the current scope has a given flag. Works for any scope that can store flags, unlike the more specific has_scope_flag commands.
alias[trigger:has_flag] = value[global_flag]

## scope = artifact
### Checks if the current artifact has a given flag.
alias[trigger:has_flag] = value[artifact_flag]

## scope = bloodline
### Checks if the current bloodline has a given flag.
alias[trigger:has_flag] = value[bloodline_flag]

## scope = character
### Checks if the current character has a given flag.
alias[trigger:has_flag] = value[character_flag]

## scope = character
### Checks if the current character's dynasty has a given flag.
alias[trigger:has_flag] = value[dynasty_flag]

## scope = province
### Checks if the current province has a given flag.
alias[trigger:has_flag] = value[province_flag]

## scope = title
### Checks if the current character has a given flag.
alias[trigger:has_flag] = value[title_flag]

## scope = artifact
### True if the scoped artifact is the same as the given artifact.
alias[trigger:artifact] = scope[artifact]

## scope = artifact
### Compares with the artifact's age. Always false if the artifact has no known creation date.
alias[trigger:artifact_age] = int

## scope = artifact
### True if the scoped artifact can be gifted to the given character.
alias[trigger:artifact_can_be_gifted_to] = scope[character]

## scope = artifact
### True if the scoped artifact is of the given type.
alias[trigger:artifact_type] = <artifact>

## scope = artifact
### True if the given character owns at least one instance of the scoped artifact's type.
alias[trigger:artifact_type_owned_by] = scope[character]

## scope = artifact
### True if the scoped artifact has the given flag currently set.
alias[trigger:has_artifact_flag] = value[artifact_flag]

## scope = artifact
### Checks if the scoped artifact has a creation date on record.
alias[trigger:has_known_creation_date] = bool

## scope = artifact
### Checks if the scoped artifact is currently active, as defined by its active trigger. Artifacts without an active trigger will always be considered active, even if not owned, and artifacts with an active trigger and without an owner will never be considered active.
alias[trigger:is_artifact_active] = bool

## scope = artifact
### Checks if the scoped artifact is currently equipped by its owner.
alias[trigger:is_artifact_equipped] = bool

## scope = artifact
### True if the scoped artifact is the given artifact.
alias[trigger:is_artifact_same_type_as] = scope[artifact]

## scope = artifact
### Checks if the artifact has indestructible = yes.
alias[trigger:is_indestructible] = bool

## scope = artifact
### Compares with the quality of the scoped artifact.
alias[trigger:quality] = int

# TODO: Elaborate?
## scope = battle
### Used in combat tactics
alias[trigger:flank_has_leader] = bool

# TODO: Elaborate?
## scope = battle
###
alias[trigger:flank_has_tactic] = bool

## scope = bloodline
### True if the scoped bloodline is the given bloodline.
alias[trigger:bloodline] = scope[bloodline]

## scope = bloodline
### True if the scoped bloodline is active for the given character.
alias[trigger:bloodline_is_active_for] = scope[character]

## scope = bloodline
### Compares duration with how long the given flag has been set in the scoped bloodline, if at all.
alias[trigger:had_bloodline_flag] = {
    flag = value[bloodline_flag]
    enum[duration_dy] = int
}

## scope = bloodline
### True if the scoped bloodline has the given flag currently set.
alias[trigger:has_bloodline_flag] = value[bloodline_flag]

## scope = character
### Compares with the age of the scoped character.
alias[trigger:age] = int

## scope = character
### Checks if the scoped character is an ai.
alias[trigger:ai] = bool

## scope = character
### Compares with the total ai_ambition modifier value of the scoped character.
alias[trigger:ai_ambition] = int

## scope = character
### Compares with the total ai_greed modifier value of the scoped character.
alias[trigger:ai_greed] = int

## scope = character
### Compares with the total ai_honor modifier value of the scoped character.
alias[trigger:ai_honor] = int

## scope = character
### Compares with the total ai_rationality modifier value of the scoped character.
alias[trigger:ai_rationality] = int

## scope = character
### Compares with the total ai_zeal modifier value of the scoped character.
alias[trigger:ai_zeal] = int

## scope = character
### True if the scoped character is among the [value] most powerful vassals in the realm. It compares the character's powerbase with that of all other direct vassals of the same liege.
alias[trigger:among_most_powerful_vassals] = int

## scope = character
### True if the scoped character is at the same location as the given character.
alias[trigger:at_location] = scope[character]

## scope = character
### True if the scoped character is located in the given province.
alias[trigger:at_location] = scope[province]

## scope = character
### Compares value with the absolute value of the difference in the given attribute of the scoped and the given characters.
alias[trigger:attribute_diff] = {
    character = scope[character]
    attribute = enum[attributes_and_combat]
    value = int
}

## scope = character
### Compares with the base health of the scoped character.
alias[trigger:base_health] = float

# TODO: Possibly outdated, GHWs and so on?
## scope = character
### Checks if crusades have been unlocked.
alias[trigger:can_call_crusade] = bool

# TODO: Figure out.
## scope = character
###
alias[trigger:can_change_religion] = bool

# TODO: Figure out.
## scope = character
###
alias[trigger:can_copy_personality_trait_from] = scope[character]

## scope = character
### Checks if the scoped character is below their limit on leadership traits (based on their trait with leadership_traits = N).
alias[trigger:can_have_more_leadership_traits] = bool

## scope = character
### True if the scoped character can hold the given minor title.
alias[trigger:can_hold_title] = <minor_title>

## scope = character
### True if the scoped character can hold the given job title.
alias[trigger:can_hold_title] = <minor_title.job>

## scope = character
### True if the scoped character can join the given society.
alias[trigger:can_join_society] = scope[society]

## scope = character
### True if the scoped character can join the given society.
alias[trigger:can_join_society] = <society>

## scope = character
### Checks if the scoped character doesn't have any traits with cannot_marry = yes, rule a theocracy of a religion that prohibits priest marriages, or belong to a holy order.
alias[trigger:can_marry] = bool

## scope = character
### True if the scoped character can marry the given character.
alias[trigger:can_marry] = scope[character]

## scope = character
### Checks if the scoped character can see the given character's secret religion.
alias[trigger:can_see_secret_religion] = scope[character]

## scope = character
### Checks if the scoped character can get the job position of the given character.
alias[trigger:can_swap_job_title] = scope[character]

# TODO: better docs, use the thirdparty subtypes when I get around to doing them.
## scope = character
### True if the given casus belli would show up and be usable in the UI for the scoped character against the given target. Checks everything in the CB itself, plus the extra hardcoded restrictions on regular war declarations.
alias[trigger:can_use_cb] = {
    target = scope[character]
    target = scope[title]

    casus_belli = <casus_belli>
    ## cardinality = 0..1
    thirdparty_character = scope[character]
    ## cardinality = 0..1
    thirdparty_title = scope[title]

    only_check_triggers = bool
}

## scope = character
### True if the scoped character is the given character.
alias[trigger:character] = scope[character]

## scope = character
### True if the scoped character is the holder of the given title.
alias[trigger:character] = scope[title]

## scope = character
### True if the scoped character has the given id.
alias[trigger:character] = int

# TODO: Confirm but I'm reasonably certain it works this way.
## scope = character
### Compares value with the clan opinion of the scoped character towards the given character.
alias[trigger:clan_opinion] = {
    who = scope[character]
    value = 0
}

## scope = character
### Compares with the combat rating of the scoped character.
alias[trigger:combat_rating] = int

## scope = character
### Compares value with the absolute value of the difference in the combat ratings of the scoped and the given characters.
alias[trigger:combat_rating_diff] = {
    character = scope[character]
    value = int
}

## scope = character
### Compares value with the absolute value of the difference in the combat ratings of the scoped and the given characters.
alias[trigger:combat_rating_diff] = {
    who = scope[character]
    value = int
}

# TODO: Wiki says baronies but I think it's all titles (considering duchy titles are also used in vanilla on RHS); confirm
## scope = character
### True if the scoped character controls (personally or via vassals) all of the titles under the given title.
alias[trigger:completely_controls] = scope[title]

# TODO: Wiki says baronies but I think it's all titles (considering duchy titles are also used in vanilla on RHS); confirm
## scope = character
### True if the scoped character controls (personally or via vassals) all of the titles under the given title.
alias[trigger:completely_controls] = <title>

## scope = character
### True if the scoped character controls (personally or via vassals) all of the titles in the given region.
alias[trigger:completely_controls_region] = <region>

## scope = character
### True if the scoped character is old enough to be the given character's parent. This means that they're at least AGE_OF_MARRIAGE_MALE years older, and at most MAX_CHILD_BIRTH_AGE years older if female (for immortal characters, as long as they became immortal before this age they bypass the check). It also checks that they didn't die before the birth date of the target.
alias[trigger:could_be_parent_of] = scope[character]

## scope = character
### Compares with the day of the scoped character's date of birth.
alias[trigger:day_of_birth] = int

## scope = character
### Compares with the number of days the scoped character has been at their current rank in their society.
alias[trigger:days_at_current_society_rank] = int

## scope = character
### Compares with the number of days the scoped character has been in their society.
alias[trigger:days_in_society] = int

# TODO: confirm
## scope = character
### True if the scoped character has died of the given reason.
alias[trigger:death_reason] = <death>

## scope = character
### Compares with the decadence of the scoped character.
alias[trigger:decadence] = float

# TODO: Figure out
## scope = character
###
alias[trigger:defending_against_claimant] = {
    character = scope[character]
    title = scope[titile]
}

# TODO: Figure out
## scope = character
###
alias[trigger:demesne_efficiency] = float

# TODO: Figure out
## scope = character
###
alias[trigger:demesne_garrison_size] = int

## scope = character
### Compares with the demesne size of the scoped character.
alias[trigger:demesne_size] = int

## scope = character
### Compares with the scoped character's demesne size divided by their demesne size limit.
alias[trigger:demesne_size_compared_to_limit] = float

## scope = character
### Checks if the scoped character has the diplomatic_immunity flag, protecting him from hostile actions.
alias[trigger:diplomatic_immunity] = bool

# TODO: scope[offmap]?
## scope = character
### True if the scoped character matches the current dislike of the given offmap power. If the dislike trigger has a context, the context parameter must match to return true. If the dislike trigger has no context, the context parameter must be omitted to return true.
alias[trigger:disliked_by_offmap] = {
    type = <offmap>
    ## cardinality = 0..1
    context = value[offmap_like_context]
}

# TODO: Figure out
## scope = character
###
alias[trigger:distance_from_realm] = {
    who = scope[character]
    value = int
}

## scope = character
### Compares with the scoped character's dynasty's dynastic prestige.
alias[trigger:dynastic_prestige] = int

## scope = character
### True if the scoped character's dynasty matches the given character's.
alias[trigger:dynasty] = scope[character]

## scope = character
### True if the scoped character's dynasty has the given id.
alias[trigger:dynasty] = <dynasty>

## scope = character
### True if the character has no dynasty (is lowborn).
alias[trigger:dynasty] = no

## scope = character
### True if the character has no dynasty (is lowborn).
alias[trigger:dynasty] = none

# TODO: Figure out
## scope = character
###
alias[trigger:dynasty_realm_power] = float

# TODO: Figure out
## scope = character
###
alias[trigger:excommunicated_for] = scope[character]

# TODO: Not sure if right subtype splitting, confirm; and figure out
## scope = character
###
alias[trigger:faction_exists] = {
    faction = <objective.faction_character>
}

# TODO: Not sure if right subtype splitting, confirm; and figure out
## scope = character
###
alias[trigger:faction_exists] = {
    faction = <objective.faction_liege_titles>
    title = scope[title]
}

# TODO: Not sure if right subtype splitting, confirm; and figure out
## scope = character
###
alias[trigger:faction_exists] = {
    faction = <objective.faction_liege_titles_w_claimant>
    title = scope[title]
    thirdparty = scope[character]
}

# TODO: Figure out
## scope = character
###
alias[trigger:faction_power] = {
    faction = <objective.faction>
    power = float
}

# TODO: 100% sure that refers only to close family; confirm; also figure out what the bool type means; couldn't find usage of title
## scope = character
###
alias[trigger:family] = scope[character]
#alias[trigger:family] = character/title/bool

## scope = character
### Checks if the scoped pregnant woman's unborn child has a known father.
alias[trigger:father_of_unborn_known] = bool

## scope = character
### Compares with the character's fertility value.
alias[trigger:fertility] = float

# TODO: Figure out
## scope = character
###
alias[trigger:from_ruler_dynasty] = bool

## scope = character
### Compares with the wealth of the scoped character.
alias[trigger:gold] = int

## scope = character
### True if the scoped character's government matches the given government. For checking government groups, see is_feudal, is_republic, etc.
alias[trigger:government] = <government>

## scope = character
### True if the scoped character's government matches the given character's government. For checking government groups, see is_feudal, is_republic, etc.
alias[trigger:government] = scope[character]

## scope = character
### True if the scoped character's graphical culture matches the given graphical culture. This is different from the effect set_graphical_culture which takes a culture, not a culturegfx.
alias[trigger:graphical_culture] = <graphical_culture>

## scope = artifact
### Compares duration with how long the given flag has been set in the scoped artifact, if at all.
alias[trigger:had_artifact_flag] = {
    flag = value[artifact_flag]
    enum[duration_dy] = int
}

## scope = character
### Compares duration with how long the given flag has been set in the scoped character, if at all.
alias[trigger:had_character_flag] = {
    flag = value[character_flag]
    enum[duration_dy] = int
}

## scope = character
### Compares duration with how long the given flag has been set in the scoped character's dynasty, if at all.
alias[trigger:had_dynasty_flag] = {
    flag = value[dynasty_flag]
    enum[duration_dy] = int
}

# TODO: Confirm
## scope = character
### Checks if the scoped character has an active ambition.
alias[trigger:has_ambition] = bool

# TODO: Confirm
## scope = character
### True if the scoped character's active ambition matches the given ambition.
alias[trigger:has_ambition] = <objective.ambition>

# TODO: Confirm
## scope = character
### True if the scoped character has the given opinion modifier towards any other character.
alias[trigger:has_any_opinion_modifier] = <opinion_modifier>

## scope = character
### Checks if the scoped character has an active quest.
alias[trigger:has_any_quest] = bool

# TODO: Confirm
## scope = character
### Checks if the scoped character has any trait with is_symptom = yes.
alias[trigger:has_any_symptom] = bool

## scope = character
### Checks if the scoped character owns any artifact of the given type.
alias[trigger:has_artifact] = <artifact>

## scope = character
### Checks to see if the scoped character has assigned the given minor title.
alias[trigger:has_assigned_minor_title] = <minor_title>

## scope = character
### Checks to see if the scoped character has assigned a given amount of the given minor title.
alias[trigger:has_assigned_minor_title] = {
    title = <minor_title>
    count = int
}

# TODO: Scopes?
## scope = { character religion }
### Checks if the religion associated with the scoped entity has autocephaly = yes.
alias[trigger:has_autocephaly] = bool

# TODO: FIgure out
## scope = character
###
alias[trigger:has_blood_oath_with] = scope[character]

# TODO: FIgure out
## scope = character
###
alias[trigger:has_called_crusade] = bool

## scope = character
### True if the scoped character has the given flag currently set.
alias[trigger:has_character_flag] = value[character_flag]

# TODO: subtype
## scope = character
### True if the scoped character has the given event modifier.
alias[trigger:has_character_modifier] = <event_modifier>

## scope = character
### Checks if the scoped character has children.
alias[trigger:has_children] = bool

# TODO: Figure out (though this along with many others is kinda obvious) ???
## scope = character
###
alias[trigger:has_claim] = scope[title]

# TODO: Docs
## scope = character
###
alias[trigger:has_claim] = title

# TODO: Scopes?
## scope = { character religion }
### Checks if the religion associated with the scoped entity has max_consorts > 0.
alias[trigger:has_concubinage] = bool

# TODO: FIgure out
## scope = character
###
alias[trigger:has_council] = bool

## scope = character
### True if the scoped character's dynasty has the given flag currently set.
alias[trigger:has_dynasty_flag] = value[dynasty_flag]

# TODO: Confirm
## scope = character
### True if the scoped character has any regiments marked with the given earmark under their control.
alias[trigger:has_earmarked_regiments] = value[earmark]

# TODO: Confirm
## scope = character
### True if the scoped character has any regiments marked with the given earmark under their control that are not raiding.
alias[trigger:has_earmarked_regiments_not_raiding] = value[earmark]

# TODO: FIgure out
## scope = character
###
alias[trigger:has_embargo] = scope[character]

# TODO: FIgure out
## scope = character
###
alias[trigger:has_feud_with] = scope[character]

## scope = character
### True if the scoped character has the given focus.
alias[trigger:has_focus] = <objective.focus>

# TODO: FIgure out
## scope = character
###
alias[trigger:has_guardian] = bool

## scope = character
### Check if the scoped character's culture has horde = yes.
alias[trigger:has_horde_culture] = bool

## scope = character
### Checks if the scoped character in the current scope has a trait with cannot_inherit = yes.
alias[trigger:has_inheritance_blocker] = bool

## scope = character
### True if the scoped character has the given amount of instances of the given event modifier.
alias[trigger:has_instances_of_character_modifier] = {
    modifier = <event_modifier>
    amount = int
}

# TODO: Figure out
## scope = character
###
alias[trigger:has_job_action] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:has_job_action] = <job_action>

## scope = character
### Checks if the scoped character has any job title.
alias[trigger:has_job_title] = bool

## scope = character
### True if the scoped character has the given job title.
alias[trigger:has_job_title] = <minor_title.job>

## scope = character
### Checks if the scoped character has any title.
alias[trigger:has_landed_title] = bool

## scope = character
### True if the scoped character has the given title.
alias[trigger:has_landed_title] = scope[title]

## scope = character
### True if the scoped character has the given title.
alias[trigger:has_landed_title] = <title>

# TODO: Reword
## scope = character
### Prevents wars, also see will_liege_enforce_peace.
alias[trigger:has_liege_enforced_peace] = bool

## scope = character
### Checks if the scoped character has any living children.
alias[trigger:has_living_children] = bool

## scope = character
### Checks if the scoped character has any lovers.
alias[trigger:has_lover] = bool

## scope = character
### Checks if the scoped character has any minor or religious title.
alias[trigger:has_minor_title] = bool

# TODO: Do job titles work?
## scope = character
### True if the scoped character has the given minor title.
alias[trigger:has_minor_title] = <minor_title>

## scope = character
### True if the scoped character has the given religious title.
alias[trigger:has_minor_title] = <minor_title.religious>

# TODO: Reword, find out what "recently" entails
## scope = character
### Character holds titles he just recently acquired
alias[trigger:has_newly_acquired_titles] = bool

## scope = character
### Checks if the scoped character has any nickname.
alias[trigger:has_nickname] = bool

## scope = character
### True if the scoped character has the given nickname.
alias[trigger:has_nickname] = <nickname>

## scope = character
### True if the scoped character has a non-aggression pact with the given character.
alias[trigger:has_non_aggression_pact_with] = scope[character]

# TODO: Low priority reword for current wording
## scope = character
### Deprecated, replaced by has_ambition/has_plot
alias[trigger:has_objective] = <objective>

# TODO: scope[offmap] or <offmap>?
## scope = character
### Compares with the scoped character's amount of currency with the given offmap power.
alias[trigger:has_offmap_currency] = {
    offmap = scope[offmap]
    value = int
}

# TODO: scope[offmap] or <offmap>?
## scope = character
### True if the scoped character's player has chosen to receive news events from the given offmap power through the interface.
alias[trigger:has_offmap_news_enabled] = <offmap>

## scope = character
### Checks if the scoped character has the given opinion modifier towards who.
alias[trigger:has_opinion_modifier] = {
    who = scope[character]
    modifier = <opinion_modifier>
}

# TODO: Figure out
## scope = character
###
alias[trigger:has_overseas_holdings] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:has_plot] = <objective.plot>

# TODO: Scopes?
## scope = character
### Checks if the religion associated with the scoped entity has max_wives > 0.
alias[trigger:has_polygamy] = bool

# TODO: Figure out limits of those ints
## scope = character
### True if the scoped character has a portrait property with the given index on the given layer.
alias[trigger:has_portrait_property] = {
    layer = int
    index = int
}

## scope = character
### True if the scoped character's council position matches the given council position.
alias[trigger:has_position] = <council_position>

## scope = character
### True if the scoped character's council position matches the council position of the given character.
alias[trigger:has_position] = scope[character]

## scope = character
### True if the scoped character has a pressed claim (i.e., a non-heritable weak or strong claim created through Fabricate Claims) on the given title.
alias[trigger:has_pressed_claim] = scope[title]

# TODO: Check RHS - why is it a character, why does that matter?
## scope = character
### Whether character has some personal levies (vassal levies do not count)
alias[trigger:has_raised_levies] = scope[character]

## scope = character
### True if the scoped character has a given quest.
alias[trigger:has_quest] = value[quest]

## scope = character
### Checks if the scoped character has a regent.
alias[trigger:has_regent] = bool

# TODO: Fgiure out
## scope = character
###
alias[trigger:has_regiments] = bool

## scope = character
### Checks if the scoped character's religion has a given religion feature.
alias[trigger:has_religion_feature] = <religion_feature>

## scope = religion
### Checks if the scoped religion has a given religion feature.
alias[trigger:has_religion_feature] = <religion_feature>

## scope = any
### Checks if religion features are enabled in the current game; usually dependent on whether or not Holy Fury is active.
alias[trigger:has_religion_features] = bool

## scope = character
### Checks if the scoped character secretly follows another religion.
alias[trigger:has_secret_religion] = bool

## scope = character
### True if the scoped character has a strong claim on the given title.
alias[trigger:has_strong_claim] = <title>

## scope = character
### True if the scoped character has a strong claim on the given title.
alias[trigger:has_strong_claim] = scope[title]

## scope = character
### True if the scoped character has a strong pressed claim (i.e., a non-heritable strong claim) on the given title.
alias[trigger:has_strong_pressed_claim] = <title>

## scope = character
### True if the scoped character has a trait with a command modifier for the given terrain type.
alias[trigger:has_terrain_specialization] = enum[terrain]

## scope = character
### True if the scoped character has a trait with a command modifier for any terrain type.
alias[trigger:has_terrain_specialization] = any

# TODO: Figure out what the bool means - how is that different from "any"?
## scope = character
### ???
alias[trigger:has_terrain_specialization] = bool

## scope = character
### True if the scoped character has a truce with the given character.
alias[trigger:has_truce] = scope[character]

## scope = character
### True if the scoped character has a weak claim on the given title.
alias[trigger:has_weak_claim] = <title>

## scope = character
### True if the scoped character has a weak claim on the given title.
alias[trigger:has_weak_claim] = scope[title]

# TODO: isn't weak pressed inheritable?
## scope = character
### True if the scoped character has a weak pressed claim (i.e., a non-inheritable claim) on the target title.
alias[trigger:has_weak_pressed_claim] = <title>

## scope = character
### Compares with the scoped character's total health value.
alias[trigger:health] = int

## scope = character
### Compares with the amount of the scoped character's traits that have is_health = yes.
alias[trigger:health_traits] = int

# TODO: Figure out
## scope = character
###
alias[trigger:held_title_rating] = scope[character]

## scope = { character title }
### True if the scoped entity has the given tier.
alias[trigger:tier] = enum[title_tiers]

## scope = { character title }
### True if the scoped entity has the same tier as the given character.
alias[trigger:tier] = scope[character]

## scope = { character title }
### True if the scoped entity has the same tier as the given title.
alias[trigger:tier] = scope[title]

## scope = { character title }
### True if the scoped entity has the given tier, ignoring temporary titles.
alias[trigger:real_tier] = enum[title_tiers]

## scope = { character title }
### True if the scoped entity has the same tier as the given character, ignoring temporary titles.
alias[trigger:real_tier] = scope[character]

## scope = { character title }
### True if the scoped entity has the same tier as the given title, ignoring temporary titles.
alias[trigger:real_tier] = scope[title]

## scope = { character title }
### True if the scoped entity has a higher tier than the given tier.
alias[trigger:higher_tier_than] = enum[title_tiers]

## scope = { character title }
### True if the scoped entity has a higher tier than the given character.
alias[trigger:higher_tier_than] = scope[character]

## scope = { character title }
### True if the scoped entity has a higher tier than the given title.
alias[trigger:higher_tier_than] = scope[title]

## scope = character
### True if the scoped character has a higher tier than the given tier, ignoring temporary titles.
alias[trigger:higher_real_tier_than] = enum[title_tiers]

## scope = character
### True if the scoped character has a higher tier than the given character's tier, ignoring temporary titles.
alias[trigger:higher_real_tier_than] = scope[character]

## scope = { character title }
### True if the scoped entity has a lower tier than the given tier.
alias[trigger:lower_tier_than] = enum[title_tiers]

## scope = { character title }
### True if the scoped entity has a lower tier than the given character.
alias[trigger:lower_tier_than] = scope[character]

## scope = { character title }
### True if the scoped entity has a lower tier than the given title.
alias[trigger:lower_tier_than] = scope[title]

## scope = character
### True if the scoped character has a lower tier than the given tier, ignoring temporary titles.
alias[trigger:lower_real_tier_than] = enum[title_tiers]

## scope = character
### True if the scoped character has a lower tier than the given character's tier, ignoring temporary titles.
alias[trigger:lower_real_tier_than] = scope[character]

# TODO: higher/lower real tier than scope[titile] ?

# TODO: Figure out better + docs
## scope = character
###
alias[trigger:holding_diff] = {
    first_type = enum[holding_types]
    first_count_vassals = bool
    second_type = none
    value = float
}

## scope = character
### True if the given character owes a favor to the scoped character.
alias[trigger:holds_favor_on] = scope[character]

## scope = character
### Checks if the scoped character has any trait with immortal = yes.
alias[trigger:immortal] = bool

## scope = character
### Compares with the age at which the scoped character has become immortal.
alias[trigger:immortal_age] = int

# TODO: Confirm
## scope = character
### Compares with how many days the scoped character has been imprisoned for.
alias[trigger:imprisoned_days] = int

# TODO: Figure out
## scope = character
###
alias[trigger:in_battle] = bool

# TODO: Confirm about subunits.
## scope = character
### Checks if the scoped character is leading a unit or subunit.
alias[trigger:in_command] = bool

# TODO: Confirm
## scope = character
### Checks if the scoped character belongs to any faction.
alias[trigger:in_faction] = bool

## scope = character
### True if the scoped character belongs to a faction of the given type.
alias[trigger:in_faction] = <objective.faction>

# TODO: Figure out
## scope = character
###
alias[trigger:in_revolt] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:in_siege] = bool

## scope = character
### Compares with the amount of threat the scoped character has.
alias[trigger:infamy] = float

# TODO: Confirm if society scope doesn't worn
## scope = character
### True if the scoped character is interested in the given society.
alias[trigger:interested_in_society] = <society>

# TODO: Confirm if society scope doesn't worn
## scope = character
### True if the scoped character is interested in the given society.
alias[trigger:interested_in_society] = scope[society]

## scope = character
### True if the scoped character is interested in the society of the given character.
alias[trigger:interested_in_society_of_character] = scope[character]

# TODO: Confirm doc for independent
## scope = character
### Checks if the scoped character is not at liege's court.
alias[trigger:is_abroad] = bool

## scope = character
### Checks if the scoped character is an adult.
alias[trigger:is_adult] = bool

## scope = character
### Checks if the scoped character is alive.
alias[trigger:is_alive] = bool

# TODO: How is that an expensive calculation? Gotta confirm
## scope = character
### True if the scoped character has an alliance or a tributary relationship with the given character. Does not check for being temporary war allies. Expensive, use with care.
alias[trigger:is_allied_with] = scope[character]

## scope = character
### Checks if the scoped character can raid.
alias[trigger:is_allowed_to_loot] = bool

## scope = character
### True if the given character is descended from the scoped character, within up to sixteen generations. Expensive, use with care.
alias[trigger:is_ancestor_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_at_sea] = bool

## scope = character
### True if the scoped character is a sibling of either of the given character's parents.
alias[trigger:is_aunt_uncle_of] = scope[character]

## scope = character
### Checks if the scoped character is betrothed to anyone.
alias[trigger:is_betrothed] = bool

## scope = character
### True if the scoped character is the founder of the given bloodline.
alias[trigger:is_bloodline_founder_of] = scope[bloodline]

## scope = character
### True if the scoped character is a member of the given bloodline.
alias[trigger:is_bloodline_member_of] = scope[bloodline]

## scope = character
### True if the scoped character is a child of the given character.
alias[trigger:is_child_of] = scope[character]

## scope = character
### True if the scoped character is a spouse, parent, chlid, sibling, grandparent or grandchild of the given character.
alias[trigger:is_close_relative] = scope[character]

## scope = character
### Checks if the scoped character is a concubine/consort of somebody.
alias[trigger:is_consort] = bool

## scope = character
### True if the scoped character is a concubine/consort of the given character.
alias[trigger:is_consort] = scope[character]

# TODO: Confirm
## scope = character
### Checks if the scoped character's council is content.
alias[trigger:is_council_content] = bool

## scope = character
### Checks if the scoped character has a job title.
alias[trigger:is_councillor] = bool

## scope = character
### Checks if scoped character is related to the given character by way of parental siblings.
alias[trigger:is_cousin_of] = bool

## scope = character
### True if the scoped character is descended from the given character, within up to sixteen generations. Expensive, use with care.
alias[trigger:is_descendant_of] = scope[character]

## scope = character
### Checks if the scoped character is about to die. Used for on_actions called just when character dies, such as on_chronicle_owner_change.
alias[trigger:is_dying] = bool

# TODO: Confirm; Possibly perceived/real only?
## scope = character
### True if the scoped character is the given character's father.
alias[trigger:is_father] = scope[character]

## scope = character
### Checks if the scoped character's perceived father is his real father.
alias[trigger:is_father_real_father] = bool

## scope = character
### Checks if the scoped character is female.
alias[trigger:is_female] = bool

# TODO: reword/elaborate
## scope = character
### True if the given character is_rival or has an opinion modifier with crime = yes towards the scoped character.
alias[trigger:is_foe] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_former_lover] = scope[character]

## scope = character
### True if the scoped character is a friend of the given character
alias[trigger:is_friend] = scope[character]

## scope = character
### True if the scoped character matches the potential block of the given government.
alias[trigger:is_government_potential] = <government>

## scope = character
### True if the scoped character is the son or daughter of the given character's son or daughter.
alias[trigger:is_grandchild_of] = scope[character]

## scope = character
### True if the scoped character is the father or mother of the given character's father or mother.
alias[trigger:is_grandparent_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_guardian] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:is_guardian] = scope[character]

## scope = character
### Checks if the scoped character is first in the succession line of any title.
alias[trigger:is_heir] = bool

# TODO: Confirm.
## scope = character
### True if the scoped character is first in the succession line of any of the given character's titles.
alias[trigger:is_heir] = scope[character]

## scope = character
### Checks if the scoped character has any trait with is_illness = yes.
alias[trigger:is_ill] = bool

## scope = character
### Checks if the scoped character has been flagged with the set_immune_to_pruning command, or by the internal game logic, and will not be culled from AI courts or savegames to reduce file size/memory use.
alias[trigger:is_immune_to_pruning] = bool

## scope = character
### True if the scoped and the given characters are in the same unit. Does NOT check every unit on a side of a combat, unlike any/random_unit_leader.
alias[trigger:is_in_same_unit_as] = scope[character]

## scope = character
### Checks if the scoped character is a member of any society.
alias[trigger:is_in_society] = bool

# TODO: Does scope[society] work?
## scope = character
### True if the scoped character is a member of the given society.
alias[trigger:is_in_society] = <society>

## scope = character
### Checks if the scoped character is incapable.
alias[trigger:is_incapable] = bool

## scope = character
### Checks if the scoped character is currently showing interest in a society.
alias[trigger:is_interested_in_any_society] = bool

# TODO: elaborate I guess
## scope = character
### Used in achievements.txt
alias[trigger:is_ironman] = bool

## scope = character
### Checks if the scoped character owns amy landed title.
alias[trigger:is_landed] = bool

## scope = character
### True if the scoped character meets the allow conditions of the given title.
alias[trigger:is_landed_title_allowed] = scope[title]

# TODO: Figure out
## scope = character
###
alias[trigger:is_looting] = bool

# TODO: in or leading? Confirm, I'm assuming here mostly
## scope = character
### True if the scoped character is in a unit that is raiding the given province.
alias[trigger:is_looting_in] = scope[province]

## scope = character
### Checks if the scoped character is a lover of any character.
alias[trigger:is_lover] = bool

## scope = character
### Checks if the scoped character is a lover of the given character.
alias[trigger:is_lover] = scope[character]

## scope = character
### Checks if the scoped character is lowborn (dynasty = none).
alias[trigger:is_lowborn] = bool

# TODO: Multihusband in HF?
## scope = character
### Checks if the scoped character is the main spouse of anyone.
alias[trigger:is_main_spouse] = bool

## scope = character
### Checks if the scoped character is old enough to marry, based on AGE_OF_MARRIAGE_MALE and AGE_OF_MARRIAGE_FEMALE.
alias[trigger:is_marriage_adult] = bool

## scope = character
### Checks if the scoped character is married to anyone.
alias[trigger:is_married] = bool

## scope = character
### True if the scoped character is married to the given character.
alias[trigger:is_married] = scope[character]

## scope = character
### Checks if the scoped character is matrilineally married to anyone.
alias[trigger:is_married_matrilineally] = bool

## scope = character
### True if the scoped character is the given character's mother.
alias[trigger:is_mother] = scope[character]

# TODO: Also possibly true for the one player in SP?
## scope = character
### Checks if the scoped character's player is the host in a multiplayer game.
alias[trigger:is_multiplayer_host_character] = bool

## scope = character
### True if the scoped character is a child of any of the given character's siblings.
alias[trigger:is_nibling_of] = scope[character]

## scope = character
### Checks if the scoped character is the governor of an offmap power.
alias[trigger:is_offmap_governor] = bool

# TODO: scope[offmap]?
## scope = character
### True if the scoped character is the governor of the given offmap power.
alias[trigger:is_offmap_governor] = <offmap>

## scope = character
### Checks if the scoped character is the ruler of an offmap power.
alias[trigger:is_offmap_ruler] = bool

# TODO: scope[offmap]?
## scope = character
### True if the scoped character is a current or former member of the given offmap power.
alias[trigger:is_offmap_tag_including_dead] = <offmap>

# TODO: Confirm
## scope = character
### True if the scoped character is older than the given character. Even works for twins and other characters with the same age (based on their ids?).
alias[trigger:is_older_than] = scope[character]

## scope = character
### True if the scoped character has sex opposite of the given character.
alias[trigger:is_opposite_sex] = scope[character]

## scope = character
### Checks if the scoped character is currently the ruler of any offmap power, or died while holding that title.
alias[trigger:is_or_was_offmap_power_ruler] = bool

## scope = character
### True if the scoped character is the mother or father of the given character.
alias[trigger:is_parent_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_parent_religion] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_parent_religion] = scope[province]

# TODO: Figure out
## scope = character
###
alias[trigger:is_parent_religion] = scope[title]

## scope = character
### Checks if the scoped character is the head of a Merchant Republic patrician family.
alias[trigger:is_patrician] = bool

## scope = character
### Checks if the scoped character has any trait with pilgrimage = yes.
alias[trigger:is_pilgrim] = bool

## scope = character
### Checks if the scoped character is playable.
alias[trigger:is_playable] = bool

# TODO: Figure out
## scope = character
### In conjunction with leads_faction
alias[trigger:is_plot_active] = bool

# TODO: Confirm
## scope = character
### True if the scoped character is the target of the given character's plot.
alias[trigger:is_plot_target_of] = scope[character]

## scope = character
### Checks if the scoped character is considered a powerful vassal.
alias[trigger:is_powerful_vassal] = bool

## scope = character
### Checks if the scoped character is pregnant.
alias[trigger:is_pregnant] = bool

# TODO: Confirm, genericise description - court chaplain and theocracy is likely too specific, probably based on some values in the govts/jobs (is_spiritual = yes?)
## scope = character
### Checks if the scoped character is either a Court Chaplain or landed with the Theocracy government type
alias[trigger:is_priest] = bool

## scope = character
### Checks if the scoped character is first in the succession line of any title that is primary to their holder.
alias[trigger:is_primary_heir] = bool

## scope = character
### True if the scoped character is first in the succession line of the given character's primary title.
alias[trigger:is_primary_heir] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_primary_war_attacker] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:is_primary_war_defender] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:is_reincarnated] = bool

# TODO: Confirm, crossreference with is_foe
## scope = character
### True if the scoped character is a rival of the given character.
alias[trigger:is_rival] = scope[character]

## scope = character
### Checks if the scoped character holds any title, including landless.
alias[trigger:is_ruler] = bool

# TODO: Confirm scope, reword
## scope = any
### Checks if the game has been loaded from a save (used for startup events).
alias[trigger:is_save_game] = bool

## scope = character
### Checks if either the culture or religion of the scoped character have seafarer = yes.
alias[trigger:is_seafarer] = bool

## scope = character
### Checks if the scoped character has any concubine/consort.
alias[trigger:is_senior_consort_party] = bool

## scope = character
### Checks if the scoped character is perceived to be a part of any secret society.
alias[trigger:is_society_discovered] = bool

## scope = character
### Checks if the scoped character is perceived to be a part of any secret society and actually belongs to it.
alias[trigger:is_society_discovered_real] = bool

## scope = character
### Checks if the scoped character is the grandmaster of their society.
alias[trigger:is_society_grandmaster] = bool

## scope = character
### Checks if the scoped character is the leader of a subunit.
alias[trigger:is_sub_unit_leader] = bool

## scope = character
### Checks if the scoped character has a job title with is_treasurer = yes.
alias[trigger:is_treasurer] = bool

## scope = character
### Checks if the scoped character is tributary to a suzerain.
alias[trigger:is_tributary] = bool

## scope = character
### True if the scoped character is a tributary of the given type to a suzerain.
alias[trigger:is_tributary] = {
    type = <tributary_type>
}

## scope = character
### True if the scoped character is a tributary to a given suzerain.
alias[trigger:is_tributary] = {
    suzerain = scope[character]
}

## scope = character
### True if the scoped character is a tributary of the given type to a given suzerain.
alias[trigger:is_tributary] = {
    type = <tributary_type>
    suzerain = scope[character]
}

## scope = character
### True if the scoped character is the given character's twin.
alias[trigger:is_twin_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_valid_attraction] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_valid_romance_target] = scope[character]

## scope = character
### True if the scoped character is superiour to the given character in the hierarchy.
alias[trigger:is_vassal_or_below] = scope[character]

## scope = character
### True if the given character is superiour to the scoped character in the hierarchy.
alias[trigger:is_vassal_or_below_of] = scope[character]

## scope = character
### Checks if the scoped character holds a minor or job title with is_voter = yes.
alias[trigger:is_voter] = bool

## scope = character
### True if the given character is within the diplomatic range of the scoped character.
alias[trigger:is_within_diplo_range] = scope[character]

## scope = character
### Compares with the number of traits with leader = yes the scoped character has.
alias[trigger:leader_traits] = int

## scope = character
### Checks if the scoped character is leading any faction.
alias[trigger:leads_faction] = bool

## scope = character
### True if the scoped character is leading a faction of the given type.
alias[trigger:leads_faction] = <objective.faction>

## scope = character
### Compares with the number of traits with lifestyle = yes the scoped character has.
alias[trigger:lifestyle_traits] = int

# TODO: scope[offmap]?
## scope = character
### True if the scoped character matches the current like of the given offmap power. If the like trigger has a context, the context parameter must match to return true. If the like trigger has no context, the context parameter must be omitted to return true.
alias[trigger:liked_by_offmap] = {
    type = <offmap>
    ## cardinality = 0..1
    context = value[offmap_like_context]
}

# TODO: Strictly better or equal or better? Wiki implies it's the latter, but gotta confirm
## scope = character
### True if the scoped character has better opinion of who than of than.
alias[trigger:likes_better_than] = {
    who = scope[character]
    than = scope[character]
}

# TODO: Figure out
## scope = character
###
alias[trigger:max_manpower] = int

## scope = character
### Compares with the month of the scoped character's date of birth. Ranges from 0 (January) to 11 (December).
alias[trigger:month_of_birth] = int

## scope = character
### Compares with the monthly piety income of the scoped character.
alias[trigger:monthly_piety] = float

## scope = character
### Compares with the monthly prestige income of the scoped character.
alias[trigger:monthly_prestige] = float

## scope = character
### Compares value with the amount of provinces with the given culture in the scoped character's realm.
alias[trigger:num_culture_realm_provs] = {
    culture = scope[culture]
    culture = <culture>
    value = int
}

## scope = character
### Compares value with the amount of provinces with the given religion in the scoped character's realm.
alias[trigger:num_religion_realm_provs] = {
    religion = scope[religion]
    value = int
}

## scope = character
### Compares with the amount of artifacts the scoped character has.
alias[trigger:num_of_artifacts] = int

## scope = character
### Compares with the amount of children the scoped character has.
alias[trigger:num_of_children] = int

# TODO: Confirm if type doesn't matter
## scope = character
### Compares with the amount of claims the scoped character has.
alias[trigger:num_of_claims] = int

## scope = character
### Compares with the amount of concubines/consorts the scoped character has.
alias[trigger:num_of_consorts] = int

## scope = character
### Compares with the amount of baron-tier titles the scoped character has.
alias[trigger:num_of_baron_titles] = int

## scope = character
### Compares with the amount of baron-tier titles in the scoped character's realm.
alias[trigger:num_of_baron_titles_in_realm] = int

## scope = character
### Compares with the amount of count-tier titles the scoped character has.
alias[trigger:num_of_count_titles] = int

## scope = character
### Compares with the amount of count-tier titles in the scoped character's realm.
alias[trigger:num_of_count_titles_in_realm] = int

## scope = character
### Compares with the amount of duke-tier titles the scoped character has.
alias[trigger:num_of_duke_titles] = int

## scope = character
### Compares with the amount of duke-tier titles in the scoped character's realm.
alias[trigger:num_of_duke_titles_in_realm] = int

## scope = character
### Compares with the amount of king-tier titles the scoped character has.
alias[trigger:num_of_king_titles] = int

## scope = character
### Compares with the amount of king-tier titles in the scoped character's realm.
alias[trigger:num_of_king_titles_in_realm] = int

## scope = character
### Compares with the amount of emperor-tier titles the scoped character has.
alias[trigger:num_of_emperor_titles] = int

## scope = character
### Compares with the amount of emperor-tier titles in the scoped character's realm.
alias[trigger:num_of_emperor_titles_in_realm] = int

# TODO: Is it still worth 2? What about num_of_count_titles, does it work the same way?
## scope = character
### Compares with the amount of titles the scoped character has. Note that for this condition each county-tier title is worth 2.
alias[trigger:num_of_titles] = int

# TODO: Is it still worth 2? What about num_of_count_titles, does it work the same way?
## scope = character
### Compares with the amount of titles in the scoped character's realm. Note that for this condition each county-tier title is worth 2.
alias[trigger:num_of_titles_in_realm] = int

# TODO: Living?
## scope = character
### Compares with the amount of members the scoped character's dynasty has.
alias[trigger:num_of_dynasty_members] = int

# TODO: Figure out
## scope = character
###
alias[trigger:num_of_extra_landed_titles] = int

# TODO: Confirm relation to scoped character
## scope = character
### Compares value with the amount of supporters for a given faction type in the scoped character's realm.
alias[trigger:num_of_faction_backers] = {
    faction = <objective.faction>
    value = int
}

# TODO: Figure out, not familiar with a "feud"
## scope = character
###
alias[trigger:num_of_feuds] = int

## scope = character
### Compares with the amount of friends the scoped character has.
alias[trigger:num_of_friends] = int

# TODO: Confirm
## scope = character
### Compares value with the amount of vassals with the given government type the scoped character has.
alias[trigger:num_of_government_vassals] = {
    government = <government>
    value = int
}

# TODO: See if it works in other religion-associated scopes
## scope = character
### Compares with the amount of holy sites controlled by the scoped character's religion
alias[trigger:num_of_holy_sites] = int

# TODO: Directly or realm?
## scope = character
### Compares with the amount of hospitals controlled by the scoped character.
alias[trigger:num_of_hospitals] = int

# TODO: Confirm; no docs or example usages but seems similar to num_of_trade_post_diff; realm or direct ownership?
## scope = character
### Compares value with the absolute difference between the amounts of controlled hospitals of the scoped and the given characters.
alias[trigger:num_of_hospitals_diff] = {
    character = scope[character]
    value = int
}

# TODO: Direct or realm ownership?
## scope = character
### Compares with the amount of trade posts controlled by the scoped character.
alias[trigger:num_of_trade_posts] = int

# TODO: realm or direct ownership?
## scope = character
### Compares value with the absolute difference between the amounts of controlled trade posts of the scoped and the given characters.
alias[trigger:num_of_trade_post_diff] = {
    character = scope[character]
    value = int
}

# TODO: Direct or realm ownership?
## scope = character
### Compares with the amount of forts controlled by the scoped character.
alias[trigger:num_of_forts] = int

# TODO: realm or direct ownership?
## scope = character
### Compares value with the absolute difference between the amounts of controlled forts of the scoped and the given characters.
alias[trigger:num_of_forts_diff] = {
    character = scope[character]
    value = int
}

## scope = character
### Compares with the amount of lovers the scoped character has.
alias[trigger:num_of_lovers] = int

## scope = character
### Compares with the amount of backers the scoped character has for their plot.
alias[trigger:num_of_plot_backers] = int

## scope = character
### Compares with the amount of prisoners the scoped character has.
alias[trigger:num_of_prisoners] = int

## scope = character
### Compares value with the amount of counties from the given title the scoped character controls.
alias[trigger:num_of_realm_counties] = {
    title = scope[title]
    value = int
}

## scope = character
### Compares with the amount of rivals the scoped character has.
alias[trigger:num_of_rivals] = int

## scope = character
### Compares with the amount of spouses the scoped character has.
alias[trigger:num_of_spouses] = int

## scope = character
### Compares with the amount of castles in the scoped character's subrealm.
alias[trigger:num_of_subrealm_castles] = int

## scope = character
### Compares with the amount of cities in the scoped character's subrealm.
alias[trigger:num_of_subrealm_cities] = int

# TODO: Confirm this actually works, but I'm 90% sure it does even if it doesn't appear anywhere; test with tribal and nomad too
## scope = character
### Compares with the amount of temples in the scoped character's subrealm.
alias[trigger:num_of_subrealm_temples] = int

## scope = character
### Compares with the amount of traits with is_symptom = yes the scoped character has.
alias[trigger:num_of_symptoms] = int

## scope = character
### Compares with the amount of traits the scoped character has.
alias[trigger:num_of_traits] = int

# TODO: Direct? Probably, but confirm
## scope = character
### Compares with the amount of different dynasties between the scoped character's direct vassals, excluding their own.
alias[trigger:num_of_unique_dynasty_vassals] = int

## scope = character
### Compares with the amount of direct vassals the scoped character has.
alias[trigger:num_of_vassals] = int

## scope = character
### Compares with the amount of traits the scoped character has.
alias[trigger:num_traits] = int

## scope = character
### True if the scoped character has an opinion modifier with obedient = yes towards the given character.
alias[trigger:obedient] = scope[character]

## scope = character
### Compares value with the opinion the scoped character has of who.
alias[trigger:opinion] = {
    who = scope[character]
    value = int
}

## scope = character
### Compares value with the scoped character's opinion of first minus the scoped character's opinion of second.
alias[trigger:opinion_diff] = {
    first = scope[character]
    second = scope[character]
    value = int
    ## cardinality = 0..1
    ### If yes, also applies the liege-vassal opinion modifiers (vassal_opinion, etc.) and is used in factions, to decide if a character would like someone better as liege than another one (and therefore would join a faction seeking to replace him). Defaults to "no".
    as_if_liege = bool
}

## scope = character
### Compares days with the amount of days who has raised the scoped character's levies for. Doesn't work if the government/religion allows raising vassal troops without opinion penalties.
alias[trigger:opinion_levy_raised_days] = {
    who = scope[character]
    days = int
}

## scope = character
### Compares with the amount of demesne titles the scoped character holds over their limit.
alias[trigger:over_max_demesne_size] = int

## scope = character
### Compares with the amount of direct vassals the scoped character has over their limit.
alias[trigger:over_vassal_limit] = int

# TODO: Figure out, probably suzerain?
## scope = character
###
alias[trigger:overlord_of] = scope[character]

## scope = character
### True if the scoped character owes a favor to the given character.
alias[trigger:owes_favor_to] = scope[character]

# TODO: Direct or realm?
## scope = character
### True if the scoped character owns the given province.
alias[trigger:owns] = scope[province]

# TODO: Owns as in hired?
## scope = character
### Checks if the scoped character owns mercenary units.
alias[trigger:owns_mercenary_units] = bool

# TODO: Figure out, probably religious feature
## scope = character
###
alias[trigger:pacifist] = bool

# TODO: FIgure out what the difference between this and other tributary stuff is
## scope = character
###
alias[trigger:pays_tribute_to] = scope[character]

## scope = character
### Compares value with the opinion the scoped character has of who. Does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:personal_opinion] = {
    who = scope[character]
    value = int
}

## scope = character
### Compares value with the scoped character's opinion of first minus the scoped character's opinion of second. Does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:personal_opinion_diff] = {
    first = scope[character]
    second = scope[character]
    value = int
    ## cardinality = 0..1
    ### If yes, also applies the liege-vassal opinion modifiers (vassal_opinion, etc.) and is used in factions, to decide if a character would like someone better as liege than another one (and therefore would join a faction seeking to replace him). Defaults to "no".
    as_if_liege = bool
}

## scope = character
### Compares with the amount of traits with personality = yes the scoped character has.
alias[trigger:personality_traits] = int

## scope = character
### Compares with the piety of the scoped character.
alias[trigger:piety] = int

## scope = character
### True if the scoped character's plot is known by the given character.
alias[trigger:plot_is_known_by] = scope[character]

# TODO: Figure out, though it's kinda obvious
## scope = character
### Typically ranges from 0.5 to 4.0 in vanilla
alias[trigger:plot_power] = float

# TODO: Figure out
## scope = character
###
alias[trigger:plot_power_contribution] = {
    plotter = scope[character]
    value = float
}

# TODO: Figure out
## scope = character
###
alias[trigger:population] = int

# TODO: Figure out
## scope = character
###
alias[trigger:population_and_manpower] = int

# TODO: Figure out
## scope = character
### Percentage of maximum population.
alias[trigger:population_factor] = float

## scope = character
### Compares with the practical age (actual if not immortal, age of becoming immortal if immortal) of the scoped character.
alias[trigger:practical_age] = int

# TODO: Figure out
## scope = character
###
alias[trigger:preparing_invasion] = bool

## scope = character
### Compares with the prestige of the scoped character.
alias[trigger:prestige] = int

## scope = character
### Checks if the scoped character is imprisoned.
alias[trigger:prisoner] = bool

## scope = character
### True if the scoped character is the captor of the given character.
alias[trigger:prisoner] = scope[character]

## scope = character
### True if the scoped character's culture matches the culture of the given character.
alias[trigger:race] = scope[character]

# TODO: scope[culture]?
## scope = character
### True if the scoped character's culture matches the given culture.
alias[trigger:race] = <culture>

## scope = character
### Compares target with the percentage of characters in the scoped character's realm that meet the condition.
alias[trigger:realm_character_percent] = {
    target = float[0.0..1.0]
    ## cardinality = 1..inf
    alias_name[trigger] = alias_match_left[trigger]
}

# TODO: Figure out
## scope = character
###
alias[trigger:realm_levies] = int

# TODO: Figure out
## scope = character
###
alias[trigger:realm_levy_diff] = {
    who = scope[character]
    value = int
}

# TODO: Landed or just titles?
## scope = character
### Compares with the total amount of landed titles in the scoped character's realm.
alias[trigger:realm_size] = int

## scope = character
### Compares size with the scoped character's realm size divided by who's realm size.
alias[trigger:relative_realm_size] = {
    who = scope[character]
    value = float
}

## scope = character
### Compares size with the scoped character's realm size divided by who's realm size.
alias[trigger:relative_realm_size] = {
    who = scope[character]
    size = float
}

# TODO: In levies or what
## scope = character
### Compares power to the scoped character's power divided by who's power.
alias[trigger:relative_power] = {
    who = scope[character]
    power = float
}

# TODO: In levies or what
## scope = character
### Compares power to the scoped character's power plus their potential allies in an offensive war divided by who's power.
alias[trigger:relative_power_including_allies_attacker] = {
    who = scope[character]
    power = float
}

# TODO: In levies or what
## scope = character
### Compares power to the scoped character's power plus their potential allies in a defensive war divided by who's power.
alias[trigger:relative_power_including_allies_defender] = {
    who = scope[character]
    power = float
}

## scope = character
### Compares with the scoped character's income divided by their liege's income.
alias[trigger:relative_income_to_liege] = float

# TODO: In levies or what
## scope = character
### Compares with the scoped character's power divided by their liege's power.
alias[trigger:relative_power_to_liege] = float

# TODO: Does religion scope work?
## scope = character
### Checks if the scoped character's religion has allows_female_temple_holders = yes.
alias[trigger:religion_allows_female_temple_holders] = bool

# TODO: Does religion scope work?
## scope = character
### Checks if the scoped character's religion has allows_male_temple_holders = yes.
alias[trigger:religion_allows_male_temple_holders] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:republic_total_num_of_trade_posts] = int

# TODO: Figure out
## scope = character
###
alias[trigger:reverse_clan_opinion] = {
    who = scope[character]
    value = int
}

## scope = character
### Checks if who has the given opinion modifier towards the scoped character.
alias[trigger:reverse_has_opinion_modifier] = {
    who = scope[character]
    modifier = <opinion_modifier>
}

## scope = character
### True if the given character has a truce with the scoped character.
alias[trigger:reverse_has_truce] = scope[character]

## scope = character
### Compares value with the opinion who has of the scoped character.
alias[trigger:reverse_opinion] = {
    who = scope[character]
    value = int
}

## scope = character
### Compares value with first's opinion of the scoped character minus second's opinion of the scoped character.
alias[trigger:reverse_opinion_diff] = {
    first = scope[character]
    second = scope[character]
    value = int
    ## cardinality = 0..1
    ### If yes, also applies the liege-vassal opinion modifiers (vassal_opinion, etc.) and is used in factions, to decide if a character would like someone better as liege than another one (and therefore would join a faction seeking to replace him). Defaults to "no".
    as_if_liege = bool
}

## scope = character
### Compares value with the opinion who has of the scoped character. Does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:reverse_personal_opinion] = {
    who = scope[character]
    value = int
}

## scope = character
### Compares value with first's opinion of the scoped character minus second's opinion of the scoped character. Does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:reverse_personal_opinion_diff] = {
    first = scope[character]
    second = scope[character]
    value = int
    ## cardinality = 0..1
    ### If yes, also applies the liege-vassal opinion modifiers (vassal_opinion, etc.) and is used in factions, to decide if a character would like someone better as liege than another one (and therefore would join a faction seeking to replace him). Defaults to "no".
    as_if_liege = bool
}

# TODO: Confirm; see what rightful entails - probably not antipope?
## scope = character
### True if the given character is the scoped character's rightful religious head.
alias[trigger:rightful_religious_head] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:risks_minor_clan_rising] = bool

## scope = character
### True if the scoped character has the same guardian as the given character.
alias[trigger:same_guardian] = scope[character]

# TODO: Direct?
## scope = character
### True if the scoped character has the same liege as the given character.
alias[trigger:same_liege] = scope[character]

# TODO: Reword maybe?
## scope = character
### True if the scoped character has the same regnal name as the given character for numbering purposes. Regnal names are currently defined as having the same first name (E.G., "Gustav" and "Gustav Adolf" are the same regnal name), or the same cultural first name (E.G., "Alfr_Alf" and "Alf_Alf" are the same regnal name).
alias[trigger:same_regnal_name] = scope[character]

## scope = character
### True if the scoped character is the same sex as the given character.
alias[trigger:same_sex] = scope[character]

## scope = character
### True if the scoped character a member of the same society as the given character.
alias[trigger:same_society_as] = scope[character]

# TODO: Confirm
## scope = character
### Compares with the scoped character's wealth divided by their yearly income.
alias[trigger:scaled_wealth] = float

# TODO: Confirm
## scope = character
### Compares with the scoped character's wealth divided by their yearly income, at least min.
alias[trigger:scaled_wealth] = {
    value = float
    min = float
}

# TODO: Confirm
## scope = character
### Compares with the scoped character's wealth divided by their yearly income, at most max.
alias[trigger:scaled_wealth] = {
    value = float
    max = float
}

# TODO: Confirm
## scope = character
### Compares with the scoped character's wealth divided by their yearly income, at least min and at most max.
alias[trigger:scaled_wealth] = {
    value = float
    min = float
    max = float
}

## scope = character
### Compares with the score of the scoped character's player.
alias[trigger:score] = int

# TODO: scope[religion]?
## scope = character
### True if the scoped character secretly follows the given religion.
alias[trigger:secret_religion] = <religion>

## scope = character
### True if the scoped character secretly follows the same religion as the given character.
alias[trigger:secret_religion] = scope[character]

## scope = character
### True if the scoped character secretly follows a religion in the given religion group.
alias[trigger:secret_religion_group] = <religion_group>

## scope = character
### True if at least one of the scoped character's bloodlines is the same as one of the given character's bloodlines.
alias[trigger:shares_any_bloodline_with] = scope[character]

## scope = character
### True if any province in the scoped character's realm borders any province in the given character's realm.
alias[trigger:shares_realm_border_with] = scope[character]

## scope = character
### True if the scoped character is a sibling of the given character.
alias[trigger:sibling] = scope[character]

## scope = character
### Checks if the scoped character can rank down within their society.
alias[trigger:society_can_rank_down] = bool

## scope = character
### Checks if the scoped character can rank up within their society.
alias[trigger:society_can_rank_up] = bool

## scope = character
### Compares with the amount of society currency the scoped character has.
alias[trigger:society_currency] = int

# TODO: scope[society]? Reword the scaled_by_influence parameter
## scope = character
### Compares with the amount of society currency the scoped character has, if they're members of the given society.
alias[trigger:society_currency] = {
    society = <society>
    value = int
    ## cardinality = 0..1
    ### If yes, the value to compare with will scale by society influence, going from a 70% reduction when the society is at 100% influence and going linearly to a 0% reduction at 0% influence. Defaults to "no".
    scaled_by_influence = bool
}

## scope = character
### Checks if the scoped character's society has criminal = yes.
alias[trigger:society_is_criminal] = bool

## scope = character
### Checks if the scoped character's society has devil_worshipper = yes.
alias[trigger:society_is_devil_worshiper] = bool

## scope = character
### Checks if character belongs to the given society
alias[trigger:society_member_of] = scope[society]

## scope = character
### Checks if character belongs to the given society
alias[trigger:society_member_of] = <society>

# TODO: Figure out
## scope = character
###
alias[trigger:their_opinion] = {
    who = scope[character]
    value = int
}

# TODO: Figure out
## scope = character
###
alias[trigger:total_claims] = {
    who = scope[character]
    # might be cardinality = 0..1
    strong = bool
    value = int
}

# TODO: Doc it up
## scope = character
### Compares value with the amount of control the scoped character has over the given trade route's given aspect.
alias[trigger:trade_route_control] = {
    trade_route = <trade_route>
    value = float
    ## cardinality = 0..1
    ### Default
    type = wealth
    ## cardinality = 0..1
    type = provinces
    ## cardinality = 0..1
    type = trade_posts
    ## cardinality = 0..1
    type = trade_post_locations
    ## cardinality = 0..1
    ### If yes, includes provinces in one's sub-realm that are owned by vassals. Defaults to "yes".
    indirectly_owned = bool
}

## scope = character
### True if the scoped character has the given trait.
alias[trigger:trait] = <trait>

# TODO: is this yet another wealth/gold alias srsly
## scope = character
###
alias[trigger:treasury] = float

## scope = character
### True if the scoped character truly follows the given religion. That means secret religion if they have one and public religion if they don't
alias[trigger:true_religion] = <religion>

## scope = character
### True if the scoped character truly follows the given character. That means secret religion if they have one and public religion if they don't
alias[trigger:true_religion] = scope[character]

## scope = character
### True if the scoped character truly follows a religion of the given religion group. That means secret religion if they have one and public religion if they don't
alias[trigger:true_religion_group] = <religion_group>

## scope = province
### True if the scoped province truly follows a religion of the given character. That means secret religion if they have one and public religion if they don't.
alias[trigger:true_religion_group] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:unused_manpower] = int

## scope = character
### Checks if the scoped character has a religion/government with uses_decadence = bool.
alias[trigger:uses_decadence] = bool

## scope = character
### True if the scoped character is a vassal of the given character.
alias[trigger:vassal_of] = scope[character]

## scope = character
### Checks if the character is in war
alias[trigger:war] = bool

## scope = character
### True if the scoped character and the given character are hostile to each other due to raiding or if their armies are hostile because of a personal, liege or third party war.
alias[trigger:war_with] = scope[character]

# TODO: Figure out how that works, probably just scopes to the title holder
## scope = character
### True if the scoped character and the given title's holder are hostile to each other due to raiding or if their armies are hostile because of a personal, liege or third party war.
alias[trigger:war_with] = scope[title]

# TODO: Write doc
## scope = character
###
alias[trigger:was_conceived_a_bastard] = bool

## scope = character
### Compares with the wealth of the scoped character.
alias[trigger:wealth] = int

# TODO: Figure out
## scope = character
### See also has_liege_enforced_peace
alias[trigger:will_liege_enforce_peace] = bool

## scope = character
### Compares with the year of the scoped character's date of birth.
alias[trigger:year_of_birth] = int

## scope = character
### Checks if the scoped character is the head of a nomadic clan
alias[trigger:clan] = bool

## scope = title
### Checks if the scoped title is a nomadic clan.
alias[trigger:clan] = bool

## scope = character
### Compares to the scoped character's rank in their current society.
alias[trigger:society_rank] = int[1..4]

# TODO: scope[society]?
## scope = character
### Compares rank to the scoped character's rank in their current society, if they belong to the given society.
alias[trigger:society_rank] = {
    society = <society>
    rank = int[1..4]
}

# I'm not doing an enum just for these, so four variants instead of two
# TODO: Doc it up better
## scope = { character province }
### Determines the minimum distance from the scope. If used with NOT, it becomes maximum distance. Distances are pixels within the main map images & positions.txt
alias[trigger:distance] = {
    where = scope[province]
    value = int
}

# TODO: Doc it up better
## scope = { character province }
### Determines the minimum distance from the scope. If used with NOT, it becomes maximum distance. Distances are pixels within the main map images & positions.txt
alias[trigger:distance] = {
    where = scope[province]
    where = enum[provinces]
    distance = int
}

# TODO: Doc it up better
## scope = { character province }
### Determines the minimum distance from the scope. If used with NOT, it becomes maximum distance. Distances are pixels within the main map images & positions.txt
alias[trigger:distance] = {
    who = scope[character]
    value = int
}

# TODO: Doc it up better
## scope = { character province }
### Determines the minimum distance from the scope. If used with NOT, it becomes maximum distance. Distances are pixels within the main map images & positions.txt
alias[trigger:distance] = {
    who = scope[character]
    distance = int
}

# TODO: Better doc needed I think
## scope = { character province }
### Checks if the scoped entity has any disease.
alias[trigger:has_disease] = bool

## scope = character
### Checks if the scoped character has any trait with is_epidemic = yes.
alias[trigger:has_epidemic] = bool

## scope = province
### Checks if the scoped province has an ongoing epidemic.
alias[trigger:has_epidemic] = bool

# TODO: Confirm
## scope = { character province }
### Checks if the religion associated with the scoped entity has heresies.
alias[trigger:has_heresies] = bool

# TODO: Probably allows other religion-associated scopes
## scope = { character province }
### Checks if the religion associated with the scoped entity has hard_to_convert = yes.
alias[trigger:is_hard_to_convert] = bool

## scope = { character province }
### True if the religion associated with the scoped entity is a heresy of the religion associated with the given entity.
alias[trigger:is_heresy_of] = scope[religion]

## scope = { character province }
### True if the religion associated with the scoped entity is a heresy of the religion associated with the given entity.
alias[trigger:is_heresy_of] = scope[character]

## scope = { character province }
### True if the religion associated with the scoped entity is a heresy of the religion associated with the given entity.
alias[trigger:is_heresy_of] = <religion>

## scope = { character province }
### Checks if the religion associated with the scoped entity is a heresy of another religion.
alias[trigger:is_heretic] = bool

## scope = { character province }
### Checks if the religion associated with the scoped entity is a reformed religion.
alias[trigger:is_reformed_religion] = bool

# TODO: Other religion scopes?
## scope = { character province }
### True if the religion associated with the scoped entity is a reformed version of the given character's religion.
alias[trigger:is_reformed_religion] = scope[character]

## scope = religion
### True if the scoped religion is the given religion.
alias[trigger:religion] = scope[religion]

## scope = { character province }
### True if the scoped entity has the religion associated with the given scope.
alias[trigger:religion] = scope[religion]

## scope = { character province }
### True if the scoped entity has the religion associated with the given character.
alias[trigger:religion] = scope[character]

## scope = { character province }
### True if the scoped entity has the religion given.
alias[trigger:religion] = <religion>

## scope = { character province }
### Compares with the authority of the religion associated with the scoped entity.
alias[trigger:religion_authority] = float[0.0..1.0]

## scope = { character province }
### True if scoped entity has a religion that belongs to the given religion group.
alias[trigger:religion_group] = <religion_group>

## scope = religion
### True if scoped religion belongs to the given religion group.
alias[trigger:religion_group] = <religion_group>

## scope = { character province }
### True if the scoped entity has a religion that belongs to the same religion group as the given entity.
alias[trigger:religion_group] = scope[religion]

## scope = religion
### True if scoped religion belongs to the same religion group as the given entity.
alias[trigger:religion_group] = scope[religion]

## scope = { character province }
### True if scoped entity has a religion that belongs to the same religion group as the given entity.
alias[trigger:religion_group] = scope[character]

## scope = culture
### True if the scoped culture is the given culture.
alias[trigger:culture] = scope[culture]

## scope = { character province title }
### True if the scoped entity has the given culture.
alias[trigger:culture] = scope[culture]

## scope = { character province title }
### True if the scoped entity has the same culture as the given character.
alias[trigger:culture] = scope[character]

## scope = { character province title }
### True if the scoped entity has the same culture as the given province.
alias[trigger:culture] = scope[province]

# TODO: Holder of title?
## scope = { character province title }
### True if the scoped entity has the same culture as the given title.
alias[trigger:culture] = scope[title]

## scope = { character province title }
### True if the scoped entity has the same culture as the given culture.
alias[trigger:culture] = <culture>

## scope = { character province title }
### True if scoped entity has a culture that belongs to the given culture group.
alias[trigger:culture_group] = <culture_group>

## scope = culture
### True if scoped culture belongs to the given culture group.
alias[trigger:culture_group] = <culture_group>

## scope = { character province title }
### True if scoped entity has a culture that belongs to the same culture group as the culture of the given character.
alias[trigger:culture_group] = scope[character]

## scope = { character province title }
### True if scoped entity has a culture that belongs to the same culture group as the culture of the given province.
alias[trigger:culture_group] = scope[province]

# TODO: Holder of title?
## scope = { character province title }
### True if scoped entity has a culture that belongs to the same culture group as the culture of the given title.
alias[trigger:culture_group] = scope[title]

## scope = character
### Compares with the amount of members in the scoped character's society.
alias[trigger:num_of_society_members] = int

## scope = society
### Compares with the amount of members in the scoped society.
alias[trigger:num_of_society_members] = int

# TODO: Do they have to match? Probably not, I don't think you can hold a title with controls_religion of a different religion
## scope = character
### Checks if the scoped character holds any title with controls_religion = <religion>.
alias[trigger:controls_religion] = bool

# TODO: Do they have to match? Probably not, I don't think you can hold a title with controls_religion of a different religion
## scope = title
### Checks if the scoped title has controls_religion = <religion>.
alias[trigger:controls_religion] = bool

# HIERARCHY STUFF

# TODO: confirm directness
## scope = character
### True if the scoped character is the direct liege of the given character.
alias[trigger:is_liege_of] = scope[character]

# TODO: confirm directness
## scope = character
### True if the scoped character is the direct liege of the given title's holder.
alias[trigger:is_liege_of] = scope[title]

# TODO: confirm directness
## scope = character
### True if the scoped character is the direct liege of the given province's owner.
alias[trigger:is_liege_of] = scope[province]

# TODO: Probably allows title scope
## scope = { character province }
### True if the character associated with the scoped entity is liege or above of the given character.
alias[trigger:is_liege_or_above] = scope[character]

# TODO: Probably allows title scope
## scope = { character province }
### True if the character associated with the scoped entity is liege or above of the given title's holder.
alias[trigger:is_liege_or_above] = scope[title]

# TODO: Probably allows title scope
## scope = { character province }
### True if the character associated with the scoped entity is liege or above of the given province's owner.
alias[trigger:is_liege_or_above] = scope[province]

# TODO: scope title/province?
## scope = character
### True if the scoped character is superiour to the given character in the hierarchy.
alias[trigger:is_liege_or_above_of] = scope[character]

# TODO: Docs
## scope = { character title province }
###
alias[trigger:de_facto_liege] = scope[character]

# TODO: Docs
## scope = { character title province }
###
alias[trigger:de_facto_liege] = scope[title]

## scope = { character title }
### True if the given character's primary title is the de facto liege of the scoped entity.
alias[trigger:de_facto_liege_title] = scope[character]

## scope = { character title }
### True if the holder of the given title is the de facto liege of the scoped entity.
alias[trigger:de_facto_liege_title] = scope[title]

# de facto vassal or bleow?

# TODO: docs
## scope = { character title province }
### True if the scoped entity is a direct de jure vassal of the given character.
alias[trigger:de_jure_liege] = scope[character]

# TODO: docs
## scope = { character title province }
### True if the scoped entity is a direct de jure vassal of the given title.
alias[trigger:de_jure_liege] = scope[title]

# TODO: docs
## scope = { character title province }
### True if the scoped entity is a direct de jure vassal of the given title.
alias[trigger:de_jure_liege] = <title>

# TODO: docs
## scope = { character title province }
### True if the scoped entity is a de jure vassal of the given character.
alias[trigger:de_jure_liege_or_above] = scope[character]

# TODO: docs
## scope = { character title province }
### True if the scoped entity is a de jure vassal of the given title.
alias[trigger:de_jure_liege_or_above] = scope[title]

# TODO: Not sure about if it's not vice versa; primary title for given character?
## scope = { character title }
### True if the scoped entity is a de jure liege of the given character.
alias[trigger:de_jure_vassal_or_below] = scope[character]

## scope = { character title }
### True if the scoped entity is a de jure liege of the given title.
alias[trigger:de_jure_vassal_or_below] = scope[title]

# HIERARCHY STUFF END

# TODO: Other religion scopes?
## scope = { character title }
### Checks if the religion associated with the scoped entity has dislike_tribal_organization = yes.
alias[trigger:dislike_tribal_organization] = bool

# TODO: Confirm if it's primary
## scope = character
### True if the scoped character's primary title has the given law enabled.
alias[trigger:has_law] = <law>

## scope = title
### True if the scoped title has the given law enabled.
alias[trigger:has_law] = <law>

# TODO: primary or any? distinction might be meaningless, but still
## scope = character
### Checks if the scoped character's primary title has holy_order = yes.
alias[trigger:holy_order] = bool

## scope = title
### Checks if the scoped title has holy_order = yes.
alias[trigger:holy_order] = bool

# TODO: primary or any? distinction might be meaningless, but still
## scope = character
### Checks if the scoped character's primary title has mercenary = yes.
alias[trigger:mercenary] = bool

## scope = title
### Checks if the scoped title has mercenary = yes.
alias[trigger:mercenary] = bool

# TODO: How does it work for titles that aren't held by anyone?
## scope = { character title }
### Checks if the scoped entity is independent.
alias[trigger:independent] = bool

# TODO: Confirm if works in title scope; wiki says it does for every other government but every usage I could find scoped to holder first
## scope = { character title }
### Checks if the government of the scoped character is part of the nomadic_governments group.
alias[trigger:is_nomadic] = bool

# TODO: Confirm if works in title scope; wiki says it does but every usage I could find scoped to holder first
## scope = character
### Checks if the government of the scoped character is part of the feudal_governments group.
alias[trigger:is_feudal] = bool

# TODO: Confirm if works in title scope; wiki says it does but every usage I could find scoped to holder first
## scope = character
### Checks if the government of the scoped character is part of the republic_governments group.
alias[trigger:is_republic] = bool

# TODO: Confirm if works in title scope; wiki says it does but every usage I could find scoped to holder first
## scope = character
### Checks if the government of the scoped character is part of the theocracy_governments group.
alias[trigger:is_theocracy] = bool

# TODO: Confirm if works in title scope; wiki says it does but every usage I could find scoped to holder first
## scope = character
### Checks if the government of the scoped character is part of the tribal_governments group.
alias[trigger:is_tribal] = bool

# TODO: The doge or just any member would work?
## scope = character
### Checks if the scoped character is the doge of a merchant republic.
alias[trigger:is_merchant_republic] = bool

## scope = title
### Checks if the scoped title is a merchant republic.
alias[trigger:is_merchant_republic] = bool

# TODO: Docs
## scope = { character title }
### In title scope, checks vs ROOT character.
alias[trigger:is_pretender] = bool

# TODO: Docs
## scope = { character title }
###
alias[trigger:rebel] = bool

# TODO: Confirm primary
## scope = { character title }
### Compares with the amount of years the scoped character has held their primary title.
alias[trigger:ruled_years] = int

# TODO: Confirm if this even works, couldn't find usages in vanilla at a quick glance
## scope = title
### Compares with the amount of years the scoped title has been held by the current ruler.
alias[trigger:ruled_years] = TODO

# TODO: Docs
## scope = { character title }
###
alias[trigger:same_realm] = scope[character]

# TODO: Confirm
## scope = character
### True if the scoped character owns the given title.
alias[trigger:title] = scope[title]

## scope = title
### True if the scoped title is the given title.
alias[trigger:title] = scope[title]

# TODO: Docs
## scope = { character title }
###
alias[trigger:title] = scope[province]

## scope = character
### True if the scoped character owns the given title.
alias[trigger:title] = <title>

## scope = title
### True if the scoped title is the given title.
alias[trigger:title] = <title>

# TODO: Scopes? Once done, reword.
## scope = { character title }
### Compares with the monthly income of the scoped character or holder of the scoped title.
alias[trigger:monthly_income] = float

# TODO: Scopes? Once done, reword.
## scope = { character title }
### Compares with the yearly income of the scoped character or holder of the scoped title.
alias[trigger:yearly_income] = float

## scope = { character title province }
### Checks if the scoped entity is being targeted by a quest.
alias[trigger:is_quest_target] = bool

## scope = { character title province }
### Checks if the scoped entity is being targeted by a quest the given character has.
alias[trigger:is_quest_target_of] = scope[character]

## scope = title
### Compared with the scoped holding's current garrison divided by its maximum garrison.
alias[trigger:holding_garrison_percent] = float[0.0..1.0]

## scope = holding
### Compared with the scoped holding's current raisable levy divided by its maximum raisable levy.
alias[trigger:holding_raisable_levy_percent] = float

## scope = holding
### Compared with the scoped holding's current total levy (garrison + raisable) divided by its maximum total levy.
alias[trigger:holding_total_levy_percent] = float

## scope = offmap
### True if the scoped offmap power is the given offmap power.
alias[trigger:is_offmap_tag] = <offmap>

# TODO: Docs
## scope = offmap
###
alias[trigger:has_had_offmap_name] = localisation

## scope = offmap
### True if the scoped offmap power has the given localisation key as its current name.
alias[trigger:has_offmap_name] = localisation

# TODO: Confirm if status/policy flags work; confirm duration
## scope = offmap
### Compares duration with how long the given flag has been set in the scoped offmap, if at all.
alias[trigger:had_offmap_flag] = {
    flag = value[offmap_tmp_flag]
    flag = value[offmap_policy_flag]
    flag = value[offmap_status_flag]

    enum[duration_dy] = int
}

## scope = offmap
### True if the scoped offmap power has the given flag currently set via script.
alias[trigger:has_offmap_flag] = value[offmap_tmp_flag]

## scope = offmap
### True if the scoped offmap power has the given flag currently set in policy.
alias[trigger:has_offmap_flag] = value[offmap_policy_flag]

## scope = offmap
### True if the scoped offmap power has the given flag currently set in status.
alias[trigger:has_offmap_flag] = value[offmap_status_flag]

## scope = offmap
### True if the scoped offmap power has the given flag currently set via script.
alias[trigger:has_offmap_tmp_flag] = value[offmap_tmp_flag]

## scope = offmap
### True if the scoped offmap power currently has the given offmap policy.
alias[trigger:has_policy] = <offmap_policy>

# TODO: Docs; specify previously as literally the previous one if that's the case
## scope = offmap
### True if the scoped offmap power previously had the specified offmap policy.
alias[trigger:prev_policy] = <offmap_policy>

## scope = offmap
### Compares with the amount of days that have passed since the last policy change of the scoped offmap power.
alias[trigger:days_since_policy_change] = int

## scope = offmap
### True if the scoped offmap power has the given flag in its current policy's flags list.
alias[trigger:has_policy_flag] = value[offmap_policy_flag]

# TODO: Docs; specify previously as literally the previous one if that's the case
## scope = offmap
### True if the scoped offmap power had the given flag in its previous policy's flags list.
alias[trigger:prev_policy_flag] = value[offmap_policy_flag]

## scope = offmap
### True if the scoped offmap power currently has the given offmap status.
alias[trigger:has_status] = <status>

# TODO: Docs; specify previously as literally the previous one if that's the case
## scope = offmap
### Checks if the scoped offmap power previously had the specified offmap status modifier.
alias[trigger:prev_status] = <status>

## scope = offmap
### Compares with the amount of days that have passed since the last status change of the scoped offmap power.
alias[trigger:days_since_status_change] = int

## scope = offmap
### True if the scoped offmap power has the given flag in its current status' flags list.
alias[trigger:has_status_flag] = value[offmap_status_flag]

# TODO: Docs; specify previously as literally the previous one if that's the case
## scope = offmap
### True if the scoped offmap power had the given flag in its previous status's flags list.
alias[trigger:prev_status_flag] = value[offmap_status_flag]

# Note that I'm using a subtype because conventions and all that
## scope = offmap
### True if the scoped offmap power has the given scripted trigger as their current dislike.
alias[trigger:offmap_has_dislike] = <scripted_trigger.offmap_like>

# Note that I'm using a subtype because conventions and all that
## scope = offmap
### True if the scoped offmap power has the given scripted trigger as their current like.
alias[trigger:offmap_has_like] = <scripted_trigger.offmap_like>

## scope = province
### Checks if the scoped province borders a lake.
alias[trigger:borders_lake] = bool

## scope = province
### Checks if the scoped province borders a major river.
alias[trigger:borders_major_river] = bool

## scope = province
### True if there is a land path between the scoped province and the given province.
alias[trigger:can_land_path_to] = scope[province]

# TODO: What if there's no path? Distance = inf?
## scope = province
### Compares distance with the shortest land path between the scoped province and the given province.
alias[trigger:can_land_path_to] = {
    target = scope[province]
    distance = int
}

## scope = province
### True if there is a land path between the scoped province and the given province. Both provinces have to be sea or coastal.
alias[trigger:can_naval_path_to] = scope[province]

# TODO: What if there's no path? Distance = inf?
## scope = province
### Compares distance with the shortest land path between the scoped province and the given province. Both provinces have to be sea or coastal.
alias[trigger:can_naval_path_to] = {
    target = scope[province]
    distance = int
}

# TODO: Fairly sure wiki's docs are wrong on that so reworded them, but needs confirmation
## scope = province
### True if the scoped province has the given climate.
alias[trigger:climate] = <climate>

## scope = province
### True if the scoped province belongs to the given continent.
alias[trigger:continent] = <continent>

## scope = province
### True if the scoped province has the specified disease.
alias[trigger:disease] = <disease>

## scope = province
### Compares with the scoped province's disease defence.
alias[trigger:disease_defence] = float

## scope = province
### Compares duration with how long the given flag has been set in the scoped province, if at all.
alias[trigger:had_province_flag] = {
    flag = value[province_flag]
    enum[duration_dy] = int
}

# TODO: Docs
## scope = province
###
alias[trigger:has_capital] = bool

# TODO: Docs
## scope = province
###
alias[trigger:has_empty_holding] = bool

# TODO: Docs
## scope = province
###
alias[trigger:has_higher_tech_than] = scope[character]

# TODO: Docs
## scope = province
###
alias[trigger:has_higher_tech_than] = scope[province]

## scope = province
### True if the scoped province has the given amount of instances of the given event modifier.
alias[trigger:has_instances_of_province_modifier] = {
    modifier = <event_modifier>
    amount = int
}

# TODO: Docs; also haha what don't provinces literally always have owners
## scope = province
###
alias[trigger:has_owner] = bool

## scope = province
### True if the scoped province has the given flag currently set.
alias[trigger:has_province_flag] = value[province_flag]

# TODO: subtype
## scope = province
### True if the scoped province has the given province modifier
alias[trigger:has_province_modifier] = <event_modifier>

## scope = province
### Checks if a holding is under construction in the scoped province.
alias[trigger:has_settlement_construction] = bool

## scope = province
### Checks if the scoped province is an island.
alias[trigger:is_island] = bool

## scope = province
### Checks if the scoped province is a land province.
alias[trigger:is_land] = bool

## scope = province
### Checks if the scoped province is currently experiencing a winter.
alias[trigger:is_winter] = bool

## scope = province
### Compares with the amount of empty holding slots in the scoped province.
alias[trigger:num_of_empty_holdings] = int

## scope = province
### Compares with the amount of holding slots in the scoped province.
alias[trigger:num_of_max_settlements] = int

## scope = province
### Compares with the amount of barony-tier holdings in the scoped province.
alias[trigger:num_of_settlements] = int

## scope = province
### Checks if the scoped province is coastal.
alias[trigger:port] = bool

# TODO: Confirm
## scope = { culture religion }
### True if the given province belongs to the scoped culture or religion.
alias[trigger:province] = scope[province]

# TODO: Confirm
## scope = { culture religion }
### True if the given province belongs to the scoped culture or religion.
alias[trigger:province] = enum[provinces]

## scope = province
### True if the scoped province is the given province.
alias[trigger:province] = scope[province]

## scope = province
### True if the scoped province is the given province.
alias[trigger:province] = enum[provinces]

## scope = province
### True if the scoped province has the given id.
alias[trigger:province_id] = enum[provinces]

## scope = province
### True if the scoped province has the given id.
alias[trigger:province_id] = scope[province]

## scope = province
### Compares with the revolt risk in the scoped province.
alias[trigger:revolt_risk] = float

# TODO: Weird syntax re:leader.
## scope = province
### Compares value with the supply limit in the scoped province for a given character and their leader.
alias[trigger:supply_limit] = {
    for = scope[character]
    ## cardinality = 0..1
    ### Default is for.
    leader = scope[character]
    value = int
}

## scope = province
### Checks if technology can spread in the scoped province.
alias[trigger:technology_can_spread] = bool

## scope = province
### True if the scoped province has the given terrain type.
alias[trigger:terrain] = enum[terrain]

## scope = province
### True if the scoped province belongs to the given trade route.
alias[trigger:trade_route] = <trade_route>

# TODO: Confirm capitalness
## scope = character
### Compares with the scoped character's capital province's level in the given technology.
alias[trigger:<technology>] = int

## scope = province
### Compares with the province's level in the given technology.
alias[trigger:<technology>] = int

# TODO: Confirm capitalness
## scope = title
### Compares with the title's capital province's level in the given technology.
alias[trigger:<technology>] = int

# TODO: Confirm, scopes (had title, but I'll come back to it on an error :) )
## scope = province
### UNCONFIRMED Checks if the scoped province is the capital of its holder.
alias[trigger:is_capital] = bool

# TODO: Scopes later
## scope = province
### True if the scoped province is connected to target.
alias[trigger:is_connected_to] = {
    target = capital
    target = realm_capital
    target = scope[province]

    ## cardinality = 0..1
    ### If yes, allows pathing through gaps of a single sea (not lake) province. Defaults to "no".
    sea_gap = bool

    ## cardinality = 0..1
    ### If yes, allows pathing through gaps of a single land (not wasteland) province. Defaults to "no".
    land_gap = bool

    ## cardinality = 0..1
    ### Allows pathing through the sub-realm of the owner of the scoped province. Default value.
    sub_realm = yes
    ## cardinality = 0..1
    ### Allows pathing through the realm of the top liege of the scoped province.
    sub_realm = no
    ## cardinality = 0..1
    ### Allows pathing through the realm of the given character.
    sub_realm = scope[character]

    ## cardinality = 0..1
    ### If yes, allows pathing through any number of sea provinces. Defaults to "no".
    naval_distance = bool
    ## cardinality = 0..1
    ### Allows the given naval distance between ports for pathing.
    naval_distance = int
}

# TODO: Possibly { province title }
## scope = province
### Checks if the scoped province has a fort.
alias[trigger:has_fort] = bool

## scope = province
### Checks if the scoped province's fort has any buildings.
alias[trigger:fort_has_any_building] = bool

## scope = province
### True if the scoped province's fort has the given building.
alias[trigger:fort_has_building] = <building>

# TODO: Possibly { province title }
## scope = province
### Checks if the scoped province has a hospital.
alias[trigger:has_hospital] = bool

## scope = province
### Checks if the scoped province's hospital has any buildings.
alias[trigger:hospital_has_any_building] = bool

## scope = province
### True if the scoped province's hospital has the given building.
alias[trigger:hospital_has_building] = <building>

## scope = province
### Compares with the level of the hospital in the scoped province.
alias[trigger:hospital_level] = int

## scope = province
### Checks if the scoped province has a trade post.
alias[trigger:has_trade_post] = bool

# TODO: Docs
## scope = title
###
alias[trigger:has_trade_post] = bool

## scope = province
### Checks if the scoped province's trade post has any buildings.
alias[trigger:trade_post_has_any_building] = bool

## scope = province
### True if the scoped province's trade post has the given building.
alias[trigger:trade_post_has_building] = <building>

# TODO: Scopes
## scope = { religion character province }
### Checks if the religion associated with the scoped entity has pentarchy = yes.
alias[trigger:has_pentarchy] = bool

# TODO: Docs
## scope = siege
###
alias[trigger:is_attacker] = bool

# TODO: Docs; the hell is that who = troops thing
## scope = siege
###
alias[trigger:troops] = {
    who = enum[troop_types_land_only]
    who = <special_troop_type>
    value = float
    # enemy = bool # TODO: Figure out where this is from
}

## scope = society
### Checks if the currently scoped society is the given one.
alias[trigger:is_society] = scope[society]

## scope = society
### Checks if the scoped society currently has an ongoing progress counter.
alias[trigger:society_has_active_progress] = bool

## scope = society
### Checks if the scoped society has any members.
alias[trigger:society_has_members] = bool

## scope = society
### Checks if the scoped society's active trigger is true.
alias[trigger:society_is_active] = bool

## scope = society
### Compares with the scoped society's current progress.
alias[trigger:society_progress] = float

## scope = society
### Compares with the influence of the scoped society.
alias[trigger:society_influence] = int

## scope = character
### Compares with the influence of the scoped character's society.
alias[trigger:society_influence] = int

# TODO: scope[society]?
## scope = any
### Compares value with the given society's influence.
alias[trigger:society_influence] = {
    society = <society>
    value = int
}

## scope = title
### Checks if the scoped title has adventurer = yes.
alias[trigger:adventurer] = bool

# TODO: Confirm
## scope = title
### Checks if the title is not occupied, has no holdings being sieged, or contested in war.
alias[trigger:can_be_given_away] = bool

# TODO: Docs
## scope = title
###
alias[trigger:claimed_by] = scope[character]

# TODO: DOcs
## scope = title
### If yes, only fires if conquest_culture is set (?). Certain CBs set Conquest_Culture (used for cultural conversion events)
alias[trigger:conquest_culture] = bool

# TODO: DOcs
## scope = title
### If yes, only fires if conquest_culture is set (?). Certain CBs set Conquest_Culture (used for cultural conversion events)
alias[trigger:conquest_culture] = scope[character]

## scope = title
### Compares duration with how long the given flag has been set in the scoped title, if at all.
alias[trigger:had_title_flag] = {
    flag = value[title_flag]
    enum[duration_dy] = int
}

## scope = title
### Checks if the scoped holding has any buildings.
alias[trigger:has_any_building] = bool

# TODO: province scope? Probably capital holding
## scope = { title province }
### True if the scoped holding has the given building.
alias[trigger:has_building] = <building>

# TODO: docs, what
## scope = title
### Used to check crown laws for a specified title. Is not a condition itself though, it must be used as a scope to check crown laws by category (succession, for instance).
alias[trigger:has_crown_law_title] = bool

# TODO: Docs
## scope = title
###
alias[trigger:has_de_jure_pretension] = scope[character]

## scope = title
### Checks if the scoped title is currently held by a character.
alias[trigger:has_holder] = bool

# TODO: subtype?
## scope = title
### True if the scoped holding has the given holding modifier
alias[trigger:has_holding_modifier] = <event_modifier>

# TODO: subtype?
## scope = title
### True if the scoped holding has the given amount of instances of the given event modifier.
alias[trigger:has_instances_of_holding_modifier] = {
    modifier = <event_modifier>
    amount = int
}

# TODO: Doc
## scope = title
### Checks if character has already created a mercenary band.
alias[trigger:has_mercenary_band] = bool

## scope = title
### True if the scoped mercenary title has the given mercenary maintenance modifier.
alias[trigger:has_mercenary_maintenance_modifier] = <static_modifier>

# TODO: Doc
## scope = title
###
alias[trigger:has_raised_standing_troops] = bool

## scope = title
### True if the scoped title has the given flag currently set.
alias[trigger:has_title_flag] = value[title_flag]

# TODO: Docs
## scope = title
###
alias[trigger:holding_type] = enum[holding_types_barony_only]

# TODO: Docs
## scope = title
###
alias[trigger:holding_type] = family_palace

# TODO: Docs
## scope = title
###
alias[trigger:is_conquered] = bool

# TODO: Docs-reword
## scope = title
### Checks if the scoped title is already being contested in some form of Claim or Succession War.
alias[trigger:is_contested] = bool

# TODO: Docs - what does that entail?
## scope = title
### Checks if the title can have crown laws.
alias[trigger:is_crown_law_title] = bool

## scope = province
### Compares value with the distance to the nearest holy site of the given religion.
alias[trigger:holy_site_distance] = {
    target = scope[religion]
    value = float
}

## scope = { title province }
### True if the scoped county or province is a holy site of the given character's religion.
alias[trigger:is_holy_site] = scope[character]

## scope = { title province }
### True if the scoped county or province is a holy site of the given religion.
alias[trigger:is_holy_site] = scope[religion]

# TODO: Confirm
## scope = title
### Checks if the scoped title has landless = yes.
alias[trigger:is_landless_type_title] = bool

# TODO: Docs
## scope = title
###
alias[trigger:is_located_in] = scope[character]

# TODO: Docs
## scope = title
###
alias[trigger:is_located_in] = scope[title]

## scope = title
### True if the scoped holding belongs to the preferred types of the given character's government.
alias[trigger:is_preferred_holding_type] = scope[character]

## scope = title
### Checks if the scoped title is primary for its holder.
alias[trigger:is_primary_holder_title] = bool

# TODO: Confirm
## scope = title
### Checks if the scoped title belongs to the same tier as the primary title of its holder.
alias[trigger:is_primary_holder_title_tier] = bool

## scope = title
### Checks if the scoped title has primary = yes.
alias[trigger:is_primary_type_title] = bool

# TODO: What does that entail?
## scope = title
###
alias[trigger:is_recent_grant] = bool

# TODO: What does that entail?
## scope = title
###
alias[trigger:is_titular] = bool

## scope = title
### Checks if the scoped title has tribal = yes.
alias[trigger:is_tribal_type_title] = bool

# TODO: What does that even *mean*
## scope = title
### True if the given character holds the right amount of territory in the kingdom.
alias[trigger:is_valid_viking_invasion_target] = scope[character]

## scope = title
### Checks if the scoped title is a viceroyalty.
alias[trigger:is_vice_royalty] = bool

# TODO: Docs to confirm
## scope = character
### Checks if the scoped character's primary title is a viceroyalty.
alias[trigger:is_vice_royalty] = bool

# TODO: Better docs
## scope = title
### Compares to the amount of income the scoped mercenary title pays to its creator.
alias[trigger:mercenary_siphon_factor] = float

# TODO: Better docs
## scope = title
### Checks how many characters in ones court that would fit for a specific title
alias[trigger:num_fitting_characters_for_title] = int

# TODO: Confirm holding scope
## scope = title
### Compares with the amount of buildings in the scoped holding.
alias[trigger:num_of_buildings] = int

# TODO: better docs
## scope = title
### Compares value with the amount of provinces belonging to the scoped title in who's realm.
alias[trigger:num_title_realm_provs] = {
    who = scope[character]
    value = int
}

## scope = title
### Checks if the scoped title is a temporary one.
alias[trigger:temporary] = bool

## scope = title
### True if who would be heir to the scoped title if the title had the given law.
alias[trigger:would_be_heir_under_law] = {
    who = scope[character]
    law = <law>
}

# TODO: does already occupied count?
## scope = title
### Checks if the scoped holding is under siege.
alias[trigger:has_siege] = bool

## scope = title
### True if the scoped holding belongs to the allowed types of the given character's government.
alias[trigger:is_allowed_holding_type] = scope[character]

# TODO: Non-count/barony titles?
## scope = { title province }
### True if the scoped entity belongs to a geographical region.
alias[trigger:region] = <region>

## scope = { title province }
### True if the scoped entity is occupied in war by the given character.
alias[trigger:controlled_by] = scope[character]

## scope = { title province }
### True if the scoped entity is occupied in war by the given title.
alias[trigger:controlled_by] = scope[title]

## scope = { title province }
### Checks if the scoped entity is occupied by enemy troops.
alias[trigger:is_occupied] = bool

## scope = unit
### Checks if the scoped unit is a fleet.
alias[trigger:is_navy] = bool

## scope = unit
### Checks if the scoped unit is in combat.
alias[trigger:unit_is_in_combat] = bool

# TODO: Confirm
## scope = unit
### Compares with the amount of loot carried by the scoped unit.
alias[trigger:loot] = int

# TODO: Docs
## scope = war
###
alias[trigger:using_cb] = <casus_belli>

# TODO: Docs
## scope = war
###
alias[trigger:war_participation] = float

# TODO: Docs
## scope = { war character }
###
alias[trigger:war_score] = float

# TODO: Docs
## scope = war
###
alias[trigger:war_title] = scope[title]

# TODO: Docs
## scope = war
###
alias[trigger:war_title] = scope[province]

# TODO Docs and scopes for all of these

## scope = TODO
alias[trigger:is_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_law_allowed] = <decision>
## scope = TODO
alias[trigger:is_targetted_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_title_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_settlement_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_trade_post_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_fort_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_hospital_decision_allowed] = <decision>
## scope = TODO
alias[trigger:is_decision_potential] = <decision>
## scope = TODO
alias[trigger:is_law_potential] = <decision>
## scope = TODO
alias[trigger:is_targetted_decision_potential] = <decision>
## scope = TODO
alias[trigger:is_title_decision_potential] = <decision>
## scope = TODO
alias[trigger:is_settlement_decision_potential] = <decision>
## scope = TODO
alias[trigger:is_trade_post_decision_potential] = <decision>
## scope = TODO
alias[trigger:is_fort_decision_potential] = <decision>
## scope = TODO
alias[trigger:is_hospital_decision_potential] = <decision>

alias[trigger:custom_tooltip] = {
    text = localisation
    alias_name[trigger] = alias_match_left[trigger]

}

# TODO: Might be covered by scope_field
alias[trigger:hidden_tooltip] = single_alias_right[trigger_clause]

# TODO: Docs?
alias[trigger:conditional_tooltip] = {
    trigger = single_alias_right[trigger_clause]
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:show_scope_change] = no
alias[trigger:generate_tooltip] = no
alias[trigger:show_only_failed_conditions] = yes

# TODO: Doc
## scope = siege
###
alias[trigger:phase] = enum[combat_phases]

# TODO: Doc
## scope = siege
###
alias[trigger:enum[troop_types_land_only]] = float

# TODO: Doc
## scope = siege
###
alias[trigger:<special_troop_type>] = float

# TODO: Doc
## scope = siege
###
alias[trigger:days] = int

# TODO: Doc
# scope = siege
###
alias[trigger:is_flanking] = bool

# TODO: Doc
## scope = siege
###
alias[trigger:light_troops] = {
    who = enum[troop_types_land_only]
    who = <special_troop_type>
    value = float
}

# TODO: Doc
## scope = siege
###
alias[trigger:heavy_troops] = {
    who = enum[troop_types_land_only]
    who = <special_troop_type>
    value = float
}

# TODO: Doc
## scope = character
###
alias[trigger:is_wicked] = bool

# TODO: Doc
## scope = character
###
alias[trigger:is_virtous] = bool

# TODO: Doc
## scope = character
###
alias[trigger:in_seclusion] = bool

# TODO: Doc
## scope = character
###
alias[trigger:has_full_court] = bool

# TODO: Doc
## scope = character
###
alias[trigger:num_of_courtiers] = int

# TODO: Doc
## scope = character
###
alias[trigger:free_court_slots] = int

# TODO: Doc
## scope = character
###
alias[trigger:num_of_courtiers] = int

# TODO: Doc
## scope = character
###
alias[trigger:is_important_character_to] = bool

## scope = any
alias[trigger:trigger_if] = {
	limit = single_alias_right[trigger_clause]
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
alias[trigger:trigger_else_if] = {
	limit = single_alias_right[trigger_clause]
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
alias[trigger:trigger_else] = {
	limit = single_alias_right[trigger_clause]
	alias_name[trigger] = alias_match_left[trigger]
}

# TODO: Docs
## scope = province
alias[trigger:has_wonder] = bool

# TODO: Docs
## scope = province
alias[trigger:has_wonder] = <wonder>

# TODO: Docs
## scope = war
alias[trigger:defender] = {
    character = scope[character]
}

# TODO: Docs
## scope = character
###
alias[trigger:stored_token_trigger] = <casus_belli>

# TODO: Docs
## scope = title
###
alias[trigger:holder] = scope[character]
