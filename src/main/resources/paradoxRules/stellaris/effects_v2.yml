### scripted effects

alias[effect:<scripted_effect>]: yes

# The scripted effect will draw the value of the right clause via $left_clause$.
alias[effect:<scripted_effect>]#:
  enum[scripted_effect_params]@1..inf: string
  enum[scripted_effect_params]@1..inf#: scope_field

# Creates a starbase in orbit of the star of the scoped galactic object
alias[effect:create_starbase]:
  owner@0..1: scope_group[target_country]
  size@1..1: <ship_size.starbase>
  module@0..100: <starbase_module>
  building@0..100: <starbase_building>
  # push_scope: starbase
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Hides the enclosed effects from any generated tooltips
alias[effect:hidden_effect]:
  alias_name[effect]: alias_match_left[effect]

# Executes enclosed effects if limit criteria are met
alias[effect:if]:
  limit:
    alias_name[trigger]: alias_match_left[trigger]
  alias_name[effect]: alias_match_left[effect]

# Executes enclosed effects if limit criteria of both it and preceding 'if' or 'else_if' is not met, and its own limit is met
alias[effect:else_if]:
  # severity: info
  limit:
    alias_name[trigger]: alias_match_left[trigger]
  alias_name[effect]: alias_match_left[effect]

# Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met, and its own limit is met
alias[effect:else]:
  alias_name[effect]: alias_match_left[effect]

#Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain
alias[effect:save_event_target_as]: value_set[event_target]

# Saves the current scope as an arbitrarily-named target to be referenced later, accessible globally until cleared
alias[effect:save_global_event_target_as]: value_set[global_event_target]

# Fires a ship event for the scoped ship, with optional DAYS and RANDOM delay
alias[effect:ship_event]:
  id: <event.ship>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a country event for the scoped country, with optional DAYS and RANDOM delay
alias[effect:country_event]:
  id: <event.country>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a first contact event for the scoped ... first contact, with optional DAYS and RANDOM delay
alias[effect:first_contact_event]:
  id: <event.first_contact>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires an observer event for all observers.
alias[effect:observer_event]:
  id: <event.observer>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a pop faction event for the scoped pop faction, with optional DAYS and RANDOM delay
alias[effect:pop_faction_event]:
  id: <event.pop_faction>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a pop event for the scoped pop, with optional DAYS and RANDOM delay
alias[effect:pop_event]:
  id: <event.pop>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a fleet event for the scoped fleet, with optional DAYS and RANDOM delay
alias[effect:fleet_event]:
  id: <event.fleet>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a planet event for the scoped planet, with optional DAYS and RANDOM delay
alias[effect:planet_event]:
  id: <event.planet>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a leader event for the scoped leader, with optional DAYS and RANDOM delay
alias[effect:leader_event]:
  id: <event.leader>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a starbase event for the scoped starbase, with optional DAYS and RANDOM delay
alias[effect:starbase_event]:
  id: <event.starbase>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires a system event for the scoped system, with optional DAYS and RANDOM delay
alias[effect:system_event]:
  id: <event.system>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Fires an espionage operation event for the scoped espionage operation, with optional DAYS and RANDOM delay
alias[effect:espionage_operation_event]:
  id: <event.espionage_operation>
  id#: <event.scopeless>
  days@0..1: int
  random@0..1: int
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Adds a specific modifier to the scoped planet/pop/country/fleet/ship/pop/system/faction for a set duration
alias[effect:add_modifier]:
  modifier: <static_modifier>
  # severity: info
  enum[days_months_years]@0..1: int
  multiplier@0..1: float
  multiplier@0..1#: value[variable]
  clear_on_owner_change@0..1: yes

# Displays a custom text (localisation string)
alias[effect:custom_tooltip]: localisation

#Adds a specific opinion modifier for the scoped country towards target country
alias[effect:add_opinion_modifier]:
  who: scope_group[target_country]
  modifier: <opinion_modifier>

# Removes a specific opinion modifier towards target country or any contry from the scoped country
alias[effect:remove_opinion_modifier]:
  who: scope_group[target_country]
  modifier: <opinion_modifier>

# Removes a specific modifier from the scopes planet/country/pop/system
alias[effect:remove_modifier]: <static_modifier>

### flags

# Sets an arbitrarily-named flag on the scoped country
alias[effect:set_country_flag]: value_set[country_flag]

# Sets an arbitrarily-named flag on the scoped planet

alias[effect:set_planet_flag]: value_set[planet_flag]

# Sets an arbitrarily-named flag on the scoped pop's faction/pop faction
alias[effect:set_pop_faction_flag]: value_set[pop_faction_flag]

# Sets an arbitrarily-named flag on the scoped system
alias[effect:set_star_flag]: value_set[star_flag]

# Sets an arbitrarily-named flag on the scoped species
alias[effect:set_species_flag]: value_set[species_flag]

# Sets an arbitrarily-named flag on the scoped country
alias[effect:set_pop_flag]: value_set[pop_flag]

# Sets an arbitrarily-named flag on the scoped fleet
alias[effect:set_fleet_flag]: value_set[fleet_flag]

# Sets an arbitrarily-named flag on the scoped ship
alias[effect:set_ship_flag]: value_set[ship_flag]

# Sets an arbitrarily-named global flag
alias[effect:set_global_flag]: value_set[global_flag]

# Sets an arbitrarily-named flag on the scoped leader
alias[effect:set_leader_flag]: value_set[leader_flag]

# Sets an arbitrarily-named flag on the scoped ambient object
alias[effect:set_ambient_object_flag]: value_set[ambient_object_flag]

# Sets an arbitrarily-named flag on the scoped megastructure
alias[effect:set_megastructure_flag]: value_set[megastructure_flag]

# Removes a flag from the scoped country
alias[effect:remove_country_flag]: value[country_flag]

# Removes a flag from the scoped planet
alias[effect:remove_planet_flag]: value[planet_flag]

# Removes a flag from the scoped pop's faction/pop faction
alias[effect:remove_pop_faction_flag]: value[pop_faction_flag]

# Removes a flag from the scoped system
alias[effect:remove_star_flag]: value[star_flag]

# Removes a flag from the scoped species
alias[effect:remove_species_flag]: value[species_flag]

# Removes a flag from the scoped pop
alias[effect:remove_pop_flag]: value[pop_flag]

# Removes a flag from the scoped fleet
alias[effect:remove_fleet_flag]: value[fleet_flag]

# Removes a flag from the scoped ship
alias[effect:remove_ship_flag]: value[ship_flag]

# Removes a global flag
alias[effect:remove_global_flag]: value[global_flag]

# Removes a flag from the scoped leader
alias[effect:remove_leader_flag]: value[leader_flag]

# Removes a flag from the scoped ambient object
alias[effect:remove_ambient_object_flag]: value[ambient_object_flag]

# Removes a flag from the scoped megastructure
alias[effect:remove_megastructure_flag]: value[megastructure_flag]

# Sets an arbitrarily-named flag on the scoped country for a set duration
alias[effect:set_timed_country_flag]:
  flag: value_set[country_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped planet for a set duration
alias[effect:set_timed_planet_flag]:
  flag: value_set[planet_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped pop faction for a set duration
alias[effect:set_timed_pop_faction_flag]:
  flag: value_set[pop_faction_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped system for a set duration
alias[effect:set_timed_star_flag]:
  flag: value_set[star_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped species for a set duration
alias[effect:set_timed_species_flag]:
  flag: value_set[species_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped pop for a set duration
alias[effect:set_timed_pop_flag]:
  flag: value_set[pop_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped fleet for a set duration
alias[effect:set_timed_fleet_flag]:
  flag: value_set[fleet_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped ship for a set duration
alias[effect:set_timed_ship_flag]:
  flag: value_set[ship_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named global flag for a set duration
alias[effect:set_timed_global_flag]:
  flag: value_set[global_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped leader for a set duration
alias[effect:set_timed_leader_flag]:
  flag: value_set[leader_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped ambient object for a set duration
alias[effect:set_timed_ambient_object_flag]:
  flag: value_set[ambient_object_flag]
  enum[days_months_years]: int

# Sets an arbitrarily-named flag on the scoped mega structure for a set duration
alias[effect:set_timed_megastructure_flag]:
  flag: value_set[megastructure_flag]
  enum[days_months_years]: int

# Sets a relation flag for the scoped country towards target country
alias[effect:set_relation_flag]:
  who: scope_group[target_country]
  flag: value_set[relation_flag]

# Sets an arbitrarily-named flag for the scoped country towards target country for a set duration
alias[effect:set_timed_relation_flag]:
  who: scope_group[target_country]
  flag: value_set[relation_flag]
  enum[days_months_years]: int

# Removes a specific relation flag towards target country from the scoped country
alias[effect:remove_relation_flag]:
  who: scope_group[target_country]
  flag: value[relation_flag]

# Removes a megastructure
alias[effect:remove_megastructure]: scope[megastructure]

# Change the scoped country's government authority and/or civics
alias[effect:change_government]: random
alias[effect:change_government]#:
  authority@0..1: random
  authority@0..1#: <authority>
  civics@0..1: random
  civics@0..1#:
    civic@1..4##: <civic_or_origin.civic>
    civic@1..4###: random
  cooldown@0..1: bool
  remove_invalid_civics@0..1: yes

# ideally, "heir" should only be if type: ruler
# Kills the scoped leader or leader of the scoped country/fleet/ship/planet/army
alias[effect:kill_leader]:
  type@0..1: enum[leader_classes]
  type@0..1#: random
  show_notification@0..1: bool
  heir@0..1: bool
  # default: no; if yes, fires on_leader_fired instead of on_leader_death
  fire@0..1: yes

# Shifts an empire towards a specific ethic, adjusting aferwards to keep number of ethics points consistent
alias[effect:shift_ethic]: <ethos>

# Adds a specific ethic to the scoped country
alias[effect:country_add_ethic]: <ethos>

# Removes a specific ethic from the scoped country
alias[effect:country_remove_ethic]: <ethos>

# Instantly destroys the scoped pop
alias[effect:kill_pop]: yes

# Destroys the colony on the scoped planet
alias[effect:destroy_colony]: yes

# Picks one random set of effects from a list, influenced by relative weight
alias[effect:random_list]:
  float@1..inf:
    alias_name[modifier_rule]@0..inf: alias_match_left[modifier_rule]
    alias_name[effect]@0..inf: alias_match_left[effect]

# Picks one random set of effects from a list, influenced by relative weight once per event scope. Works like a random list, but the tooltip will only show the option that actually happens.
alias[effect:locked_random_list]:
  int@1..inf:
    alias_name[modifier_rule]@0..inf: alias_match_left[modifier_rule]
    alias_name[effect]@0..inf: alias_match_left[effect]

# All enclosed effects may or may not be executed depending on set chance
alias[effect:random]:
  chance: int[1...99]
  alias_name[effect]: alias_match_left[effect]

# Creates a new fleet from empire designs up to specified fraction of naval cap
alias[effect:create_fleet_from_naval_cap]: float

# Creates a new fleet from empire designs up to specified fraction of naval cap
alias[effect:create_fleet_from_naval_cap]#:
  fraction: float
  ship_owner_type: country
  ship_owner_type#: federation
  ship_owner_type##: galactic_community

# Reduces the hull points of the scoped ship by a specific amount
alias[effect:reduce_hp]: int

# Reduces the hull points of the scoped ship by a relative amount
alias[effect:reduce_hp_percent]: float[0.0..1.0]

# Reduces the hull points of the scoped ship by a relative amount
alias[effect:reduce_hp_percent]#: int[0..100]

# Exiles the scoped country/fleet/army/pop faction's leader and saves them with a custom name so you can bring them back.
alias[effect:exile_leader_as]: value_set[exiled_leader]

# Adds a sum of experience points to the scoped leader
alias[effect:add_experience]: int

# Sets the gender of the scoped leader
alias[effect:set_is_female]: bool

# Sets scoped leader as non/recruitable
alias[effect:recruitable]: bool

# Assigns target leader to the scoped country/fleet/army/pop faction
alias[effect:assign_leader]: scope_group[target_leader]

# Unassigns scoped leader from their post or unassigns leader from the scoped planet/ship/fleet/army/sector
alias[effect:unassign_leader]: scope_group[target_leader]

# Adds claims on target system
alias[effect:add_claims]:
  who: scope_group[target_country]
  num_of_claims@0..1: int
  show_notification@0..1: bool

# Instantly sets the owner of the scoped planet/fleet/army/starbase to target country
alias[effect:set_owner]: scope_group[target_country]

# Instantly sets the planet/fleet's controller to target country
alias[effect:set_controller]: scope_group[target_country]

# Sets the fleet/ambient object's location, can be fine-tuned
alias[effect:set_location]: scope_group[spatial_object]
alias[effect:set_location]#:
  target: scope_group[spatial_object]
  distance@0..1: float
  angle@0..1: int[0..360]
  angle@0..1#: random
  direction@0..1: in_system
  direction@0..1#: out_system

### variables

# Sets or creates an arbitrarily-named variable with a specific value in the current scope
alias[effect:set_variable]:
  which: value_set[variable]
  value: float
  value#: scope[any]
  value##: value[variable]
  value###:
    scope: scope[any]
    variable: value[variable]

# presumably need to check the variable exists first for these, somehow
# Increments a previously-set variable by a specific amount
alias[effect:change_variable]:
  which: value_set[variable]
  value: float
  value#: scope[any]
  value##: value[variable]
  value###:
    scope: scope[any]
    variable: value[variable]

# Decrements a previously-set variable by a specific amount
alias[effect:subtract_variable]:
  which: value[variable]
  value: float
  value#: scope[any]
  value##: value[variable]
  value###:
    scope: scope[any]
    variable: value[variable]

# Multiplies a previously-set variable by a specific amount
alias[effect:multiply_variable]:
  which: value[variable]
  value: float
  value#: scope[any]
  value##: value[variable]
  value###:
    scope: scope[any]
    variable: value[variable]

# Divides a previously-set variable by a specific amount
alias[effect:divide_variable]:
  which: value[variable]
  value: float
  value#: scope[any]
  value##: value[variable]
  value###:
    scope: scope[any]
    variable: value[variable]

# Modulos a previously-set variable by a specific amount i.e. X % Y
alias[effect:modulo_variable]:
  which: value[variable]
  value: float
  value#: scope[any]
  value##: value[variable]
  value###:
    scope: scope[any]
    variable: value[variable]

# Removes a previously-set variable from the scope
alias[effect:clear_variable]: value[variable]

# max should not be less than min...
# Adds a lump sum of a resource to the scoped country, defined as a multiple of the country's monthly income of that resource (clamped to max and min allowed values)
alias[effect:add_monthly_resource_mult]:
  resource: <resource>
  value: float
  min@0..1: int
  max@0..1: int

# Adds a specific trait to the scoped leader
alias[effect:add_trait]: <trait.leader_trait>

# Adds a specific ruler trait to the scoped leader, even if they are not currently ruler; it becomes active when they become ruler
alias[effect:add_ruler_trait]: <trait.ruler_trait>

# Removes a specific trait from the scoped leader
alias[effect:remove_trait]: <trait>

# also, at least one of while and limit should be there
# Repeats enclosed effects while limit criteria are met or until set iteration count is reached. Can use a variable for the count.
alias[effect:while]:
  count@0..1: int
  count@0..1#: value[variable]
  limit@0..1:
    alias_name[trigger]: alias_match_left[trigger]
  alias_name[effect]: alias_match_left[effect]

# Instantly resettles pop
alias[effect:resettle_pop]:
  pop: scope[pop]
  planet@0..1: scope_group[target_planet]

# also, most of these are not used in Vanilla (the first is, I did the cardinality based on it)
# Set citizenship type for scoped species/pop/leader
alias[effect:set_citizenship_type]:
  country@0..1: scope_group[target_country]
  type: enum[citizenship_types]
  cooldown@0..1: bool

# Set military service type for scoped species/pop/leader
alias[effect:set_military_service_type]:
  country@0..1: scope_group[target_country]
  type: enum[military_service_types]
  cooldown@0..1: bool

# Set purge type for scoped species/pop/leader
alias[effect:set_purge_type]:
  country@0..1: scope_group[target_country]
  type: enum[purge_types]
  cooldown@0..1: bool

# Set slavery type for scoped species/pop/leader
alias[effect:set_slavery_type]:
  country@0..1: scope_group[target_country]
  type: enum[slavery_types]
  cooldown@0..1: bool

# Set population control for scoped species/pop/leader
alias[effect:set_population_controls]:
  country@0..1: scope_group[target_country]
  type: bool
  type#: enum[population_controls]
  cooldown@0..1: bool

# Set colonization control for scoped species/pop/leader
set_colonization_controls:
  country@0..1: scope_group[target_country]
  type: bool
  type#: enum[colonization_controls]
  cooldown@0..1: bool

# Set migration control for scoped species/pop/leader
alias[effect:set_migration_controls]:
  country@0..1: scope_group[target_country]
  type: bool
  type#: enum[migration_controls]
  cooldown@0..1: bool

# Set living standard for scoped species/pop/leader
alias[effect:set_living_standard]:
  country@0..1: scope_group[target_country]
  type: enum[living_standards]
  cooldown@0..1: bool

# Joins wars on the side of target country
alias[effect:join_war]: scope_group[target_country]

# Changes closed borders status between two countries
alias[effect:set_closed_borders]:
  who: scope_group[target_country]
  status: bool
  forced@0..1: int

# Declares war between the scoped country and target country
alias[effect:declare_war]:
  target: scope_group[target_country]
  attacker_war_goal: <war_goal>
  name@0..1: localisation_synced

# Adds static war exhaustion, scaled with value_for_planet_destruction, to owner of the battle location
alias[effect:add_static_war_exhaustion]:
  attacker: scope_group[target_country]
  location: scope[planet] #target planet was omitted here
  value_for_planet_destruction: float[0.0..1.0]

# Adds diplomatic threat from target country
alias[effect:add_threat]:
  who: scope_group[target_country]
  amount: float

# Adds a Casus Belli to the scoped country against the target country.
alias[effect:add_casus_belli]:
  type: <casus_belli>
  who: scope_group[target_country]
  days: int

# Sets a war goal to the scoped rebel country/war
alias[effect:set_war_goal]:
  type: <war_goal>
  target: scope_group[target_country]
  enemy: scope_group[target_country]

# Sets the planet as un/surveyed by target country
alias[effect:set_surveyed]:
  surveyed: bool
  surveyor@0..1: scope_group[target_country]

# Destroys the target fleet (with death graphics)
alias[effect:destroy_fleet]: scope[fleet]
alias[effect:destroy_fleet]#:
  target: scope[fleet]
  kill_leader@0..1: bool
  destroy_template@0..1: bool

# Deletes the target fleet (no death graphics)
alias[effect:delete_fleet]: scope[fleet]
alias[effect:delete_fleet]#:
  target: scope[fleet]
  kill_leader@0..1: bool
  destroy_template@0..1: bool

# Deletes the target ship (no death graphics)
alias[effect:delete_ship]: scope[ship]

# Destroys the target ship (with death graphics)
alias[effect:destroy_ship]: scope[ship]

# Adds/Removes tiles to/from the scoped planet to adjust its planet size
alias[effect:change_planet_size]: int

# see comment for what should actually be written here
# Sets the name of the scoped country/planet/ship/fleet/leader/army/system/pop faction. Allowed entries are <random>/<string in localisation_synced>/<string written in quotes e.g. "United Nations">
alias[effect:set_name]: random
alias[effect:set_name]#: localisation_synced
alias[effect:set_name]##: scope[any]
alias[effect:set_name]###: localisation

# Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
alias[effect:set_leader]: value[exiled_leader]
alias[effect:set_leader]#: last_created_leader
alias[effect:set_leader]##: scope_group[target_leader]

# Forces scoped country to evaluate whether to create a specific faction type immediately, rather than monthly
alias[effect:enable_faction_of_type]: <pop_faction>

# Sets the scoped country to be a specific subject of target country
alias[effect:set_subject_of]:
  who: none
alias[effect:set_subject_of]#:
  who: scope_group[target_country]
  subject_type: <subject_type>

# Removes claims on target system
alias[effect:remove_claims]:
  who: scope_group[target_country]
  num_of_claims@0..1: int

# Prevents execution of subsequent effects in the same effect block, used with if-statements
alias[effect:break]: yes

# Destroys the scoped country
alias[effect:destroy_country]: yes

# Destroys target ambient object
alias[effect:destroy_ambient_object]: scope[ambient_object]

# Removes the planet from the scope
alias[effect:remove_planet]: yes

# Removes a building from the scoped planet, this will also cancel construction and clear the queue
# scope: planet
alias[effect:remove_building]: <building>

# Begins construction of a specific building
# scope: planet
alias[effect:add_building]: <building>

# Instantly gives a specific tech to the scoped country
alias[effect:give_technology]:
  tech: <technology>
  message@0..1: bool

# Copies all techs from the target country to the scoped country, except for some exceptions listed. Tech weights (and weight modifiers) are honoured, meaning that techs a country should not have will not be copied.
alias[effect:copy_techs_from]:
  target: scope_group[target_country]
  except@0..1:
  $@0..inf: <technology>

# Sets the scoped object's graphical culture
alias[effect:set_graphical_culture]: <graphical_culture>
alias[effect:set_graphical_culture]#: scope[any]

# Creates a new species
alias[effect:create_species]:
  name@0..1: localisation_synced
  name@0..1#: localisation
  name@0..1##: scope[any]
  name@0..1###: random
  namelist@0..1: <name_list>
  namelist@0..1#: scope_group[target_country]
  namelist@0..1##: random
  plural@0..1: string
  species_bio@0..1: string
  adjective@0..1: string
  class: <species_class>
  class#: random_non_machine
  class##: random
  class###: scope_group[target_species]
  portrait@0..1: scope_group[target_species]
  portrait@0..1#: <portrait>
  portrait@0..1##: <portrait_group>
  portrait@0..1###: random
  homeworld@0..1: scope_group[target_planet]
  homeworld@0..1#: scope[species]
  # -> traits can be multiple. You can have traits: this, traits:  trait: xyz  at the same time
  traits@0..2: scope_group[target_species]
  traits@0..2#: random
  traits@0..2##:
    ideal_planet_class@0..1: scope[planet]
    ideal_planet_class@0..1#: scope_group[target_species]
    ideal_planet_class@0..1##: <planet_class.habitable_planet>
  trait@0..10: <trait.species_trait>
  trait@0..10#: random_traits
  trait@0..10##: random_presapient_trait
  add_trait@0..10: <trait.species_trait>
  sapient@0..1: bool
  # determines if species is a modification of another
  is_mod@0..1: bool
  # determines if species leaders are immortal
  immortal@0..1: bool
  # determines if pops of that species can colonize
  pops_can_be_colonizers@0..1: bool
  # determines if pops of that species can migrate
  pops_can_migrate@0..1: bool
  # determines if pops of that species can reproduce
  pops_can_reproduce@0..1: bool
  # determines if pops of that species can join factions
  pops_can_join_factions@0..1: bool
  # determines if that species can generate leaders
  can_generate_leaders@0..1: bool
  # determines if pops from that species can become slaves
  pops_can_be_slaves@0..1: bool
  # determines if pops from that species have happiness
  pops_have_happiness@0..1: bool
  # determines if pops from need consumer goods
  consumer_goods@0..1: bool
  # determines if the species can be modified
  can_be_modified@0..1: bool
  # speed at which the pops from that species grow automatically
  pops_auto_growth@0..1: float[0.0..1.0]
  # amount of energy each pop of that species consume monthly
  pop_maintenance@0..1: float[0.0..1.0]
  new_pop_resource_requirement@0..1:
    type: <resource>
    type#: robot_food
    type##: string
    value: float
  allow_negative_traits@0..1: bool
  extra_trait_points@0..1: int
  name_list@0..1: <name_list>
  name_list@0..1#: random
  name_list@0..1##: scope_group[target_country]
  pop_ethics@0..1: no
  pop_ethics@0..1#: random
  pop_ethics@0..1##: <ethos>
  pop_ethics@0..1###:
    $@0..1: <ethos>
    $@0..1#: random
  # push_scope: species
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]
  blocked_archetypes@0..1:
    $@1..inf: <species_archetype>

# if the country is default or anything else that uses them, it really should specify all the details of government, species, etc
# Creates a new country
alias[effect:create_country]:
  name@0..1: scope[any]
  name@0..1#: random
  name@0..1##: localisation_synced
  type: <country_type>
  auto_delete@0..1: bool
  name_list@0..1: <name_list>
  name_list@0..1#: random
  name_list@0..1##: scope_group[target_country]
  ship_prefix@0..1: string # should be string or a scope
  authority@0..1: random
  authority@0..1#: <authority>
  authority@0..1##: scope_group[target_country]
  origin@0..1: <civic_or_origin.origin>
  civics@0..1: scope_group[target_country]
  civics@0..1#: random # random includes starting civics
  civics@0..1##:
    civic@0..4: <civic_or_origin.civic>
    civic@0..4#: random
  species@0..1: random
  species@0..1#: scope_group[target_species]
  randomize_ethos@0..1: yes
  ethos@0..1: random
  ethos@0..1#: scope_group[target_country]
  ethos@0..1##:
    ethic@1..3: <ethos>
    ethic@1..3#: random
  # push_scope: country
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]
  flag@0..1: scope_group[target_country]
  flag@0..1#: random
  flag@0..1##:
    # TODO $: this is connected to game/flags.
    # I already created an entry for flag colors etc, you should work on connecting these.
    icon@0..1:
      category: string #should be some sort of key
      file: string #should be "filename.dds" in the correct folder
    background:
      category: string #should be some sort of key
      file: string #should be "filename.dds" in the correct folder
    colors:
      $@0..4: <color_define>
      $@0..4#: "null"
  # Establishing contact on_action (on_first_contact) will not fire for any countries (ever) if this is set to no
  day_zero_contact@0..1: bool
  # Establishing contact on_action (on_first_contact) will not fire for this country or its federation allies
  exclude_day_zero_contact@0..1: scope_group[target_country]
  released_by_country@0..1: scope_group[target_country] #scope
  released_from_country@0..1: scope_group[target_country] #scope
  ignore_initial_colony_error@0..1: bool

# Creates a rebellion on this planet
alias[effect:create_rebels]:
  name: localisation_synced
  name#: scope[any]
  name##: random
  authority: random
  authority#: <authority>
  authority##: scope_group[target_country]
  origin@0..1: <civic_or_origin.origin>
  civics@0..1: scope_group[target_country]
  # random includes starting civics
  civics@0..1#: random
  civics@0..1##:
    civic@2..3: <civic_or_origin.civic>
  species: scope_group[target_species]
  species#: enum[buildable_pop_species]
  ethos@0..1: random
  ethos@0..1#: scope_group[target_country]
  ethos@0..1##:
    ethic@1..3: <ethos>
  flag@0..1: scope_group[target_country]
  flag@0..1#: random
  flag@0..1##:
    # TODO $: this is connected to game/flags.
    # I already created an entry for flag colors etc, you should work on connecting these.
    icon@0..1:
      category: string #should be some sort of key
      file: string #should be "filename.dds" in the correct folder
    background:
      category: string #should be some sort of key
      file: string #should be "filename.dds" in the correct folder
    colors:
      $@0..4: <color_define>
      $@0..4#: "null"
  name_list@0..1: <name_list>
  name_list@0..1#: random
  # This presumably works (report if not)
  ship_prefix@0..1: string #should be string or a scope
  released_from_country@0..1: scope_group[target_country]
  # push_scope: country
  # severity: warning
  # STNH do some interesting tricks, so I demoted it for their benefit.
  # this is required to spawn rebels for the rebellion to work in the first place
  effect:
    alias_name[effect]: alias_match_left[effect]

# Creates a new army
alias[effect:create_army]:
  name@0..1: localisation_synced
  name@0..1#: random
  owner: scope_group[target_country]
  type: <army>
  species@0..1: scope_group[target_species]
  species#: <buildable_pop>
  leader@0..1: scope_group[target_leader]
  # push_scope: army
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a new leader for the scoped country
alias[effect:create_leader]:
  name@0..1: localisation_synced
  name@0..1#: random
  class: enum[leader_classes]
  class#: random
  # Other scopes will simply default to this.owner_main_species
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  leader_age_min@0..1: int
  leader_age_max@0..1: int #should not be less than min...
  # Warning: This is in trigger_docs but is not used in this place in Vanilla, and might not work
  gender@0..1: enum[genders]
  # Warning: This is in trigger_docs but is not used in this place in Vanilla, and likely does not work
  set_age@0..1: int
  skill@0..1: random
  skill@0..1#: int[1..10]
  immortal@0..1: bool
  event_leader@0..1: bool
  sub_type@0..1: enum[trait_ai_classes]
  traits@0..1:
    add_trait@0..5: <trait.leader_trait>
    add_trait@0..5#: random_trait
    trait@0..5: <trait.leader_trait>
    trait@0..5#: random_trait
  # push_scope: leader
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Same as create, but all optional except target
# Clones the last created leader for the scoped country
alias[effect:clone_leader]:
  target: scope_group[target_leader]
  name@0..1: localisation_synced
  name@0..1#: random
  class@0..1: enum[leader_classes]
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  leader_age_min@0..1: int
  leader_age_max@0..1: int #should not be less than min...
  # Warning: This is in trigger_docs but is not used in this place in Vanilla, and might not work
  gender@0..1: enum[genders]
  # Warning: This is in trigger_docs but is not used in this place in Vanilla, and likely does not work
  set_age@0..1: int
  skill@0..1: random
  skill@0..1#: int[1..10]
  event_leader@0..1: bool
  #Not sure what other types there are
  sub_type@0..1: survey
  traits@0..1:
    add_trait@0..5: <trait.leader_trait>
    add_trait@0..5#: random_trait
  trait@0..5: <trait.leader_trait>
  trait@0..5#: random_trait
  # push_scope: leader
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Sets the age of the scoped leader
alias[effect:set_age]: int

# Creates a new, modified species based on an already-extant species
alias[effect:modify_species]:
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  # new base species; default: auto (uses species)
  base@0..1: scope_group[target_species]
  base@0..1#: auto
  base@0..1##: none
  add_trait@0..10: <trait>
  add_traits_at_start_of_list@0..1: bool
  remove_trait@0..10: <trait>
  ideal_planet_class@0..1: scope[planet]
  ideal_planet_class@0..1#: scope_group[target_species]
  ideal_planet_class@0..1##: <planet_class.habitable_planet>
  # modify scoped pops/planet/leader/country; default: yes
  change_scoped_species@0..1: bool
  portrait@0..1: scope_group[target_species]
  portrait@0..1#: <portrait>
  portrait@0..1##: <portrait_group>
  portrait@0..1###: random
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Changes the species of the scoped object
alias[effect:change_species]: scope_group[target_species]

# Changes the dominant species of the current Country, change_all also changes all usage of that species (Pops etc) in the empire
alias[effect:change_dominant_species]:
  species: scope_group[target_species]
  species#: enum[buildable_pop_species]
  change_all@0..1: yes

# Changes the class of the scoped planet
alias[effect:change_pc]: <planet_class>
alias[effect:change_pc]#: <planet_class_random_list>
alias[effect:change_pc]##:
  class: <planet_class>
  class#: <planet_class_random_list>
  inherit_entity: bool

# Adds/Removes district slots to/from the scoped planet to adjust its planet size
alias[effect:set_planet_size]: int

# Adds a specific deposit to the scoped planet
alias[effect:add_deposit]: <deposit>

# Replaces resource deposit on the scoped planet
alias[effect:set_deposit]: <deposit>

# Removes all deposits from the scoped planet
alias[effect:clear_deposits]: yes

# Clear modifiers on target planet
alias[effect:clear_planet_modifiers]: yes

# Clears resources of a country
alias[effect:clear_resources]: yes

# Rebuild modifiers on target planet
alias[effect:reroll_planet_modifiers]: yes

# Silently establish communications between scoped country and target country
alias[effect:establish_communications_no_message]: scope_group[target_country]

# Establishes first contact between the scoped country and target country at the set location
alias[effect:establish_contact]:
  who: scope_group[target_country]
  location@0..1: scope_group[celestial_coordinate]

# Changes scoped pop to chosen ethic
alias[effect:pop_change_ethic]: <ethos>

# Starts a situation log event chain for target country
alias[effect:begin_event_chain]:
  event_chain: <event_chain>
  target@0..1: scope_group[target_country]

# Ends a specific situation log event chain for the scoped country
alias[effect:end_event_chain]: <event_chain>

# Increments (or decrements with negative values) an event chain counter for the scoped country by a specific amount
alias[effect:add_event_chain_counter]:
  event_chain: <event_chain>
  counter: enum[event_chain_counter]
  amount: int

# Enables a specific special research project for target country at a specific location (should be same as the current scope where possible)
alias[effect:enable_special_project]:
  name: <special_project>
  owner@0..1: scope_group[target_country]
  location@0..1: scope_group[spatial_object]

# Aborts a specific special project for the country, removing it from the situation log
alias[effect:abort_special_project]:
  type: <special_project>
  location@0..1: scope_group[spatial_object]

# Makes the scoped country remember that it has encountered the bypass type
alias[effect:add_seen_bypass_type]: <bypass>

# Spawns a new natural wormhole in the scoped system.
alias[effect:spawn_natural_wormhole]:
  bypass_type: <bypass>
  orbit_distance@0..1: float
  orbit_angle@0..1: random
  orbit_angle@0..1#: int[0..360]
  orbit_angle@0..1##:
    min: int[0..360]
    max: int[0..360]
  random_pos@0..1: bool

# Link the wormhole from the scoped system to the wormhole in the target system.
alias[effect:link_wormholes]: scope[galactic_object]

# Executes an effect on systems with planets owned by the scoped country, starting at an origin, and until a certain percentage of owned planets matching the planet_limit has been covered.
alias[effect:effect_on_blob]:
  center: scope[galactic_object]
  owned_planets_percentage: float[0.0..1.0]
  # push_scope: planet
  planet_limit:
    alias_name[trigger]: alias_match_left[trigger]
  # push_scope: system
  effect:
    alias_name[effect]: alias_match_left[effect]

# Assign the player of the target country to play the scoped country instead
alias[effect:set_player]: scope_group[target_country]

# Activates the gateway associated with a megastructure.
alias[effect:activate_gateway]: scope[megastructure]
# Moves a saved leader to the active for the scoped country with a lookup key
alias[effect:activate_saved_leader]:
  key: value[saved_leader]
  add_to_owned@0..1: bool
  # push_scope: leader
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Adds a specific anomaly category to the scoped planet
alias[effect:add_anomaly]:
  category: <anomaly_category>
  target@0..1: scope_group[target_country]

# Adds an asteroid belt at the distance in the scope.
alias[effect:add_asteroid_belt]:
  radius: int
  type: <asteroid_belt_type>

# Adds to ongoing colonization progress on the scoped planet
alias[effect:add_colony_progress]: float[0.0..1.0]

# Adds a specific global design to the game
alias[effect:add_global_ship_design]: <global_ship_design>

# Adds a hyperlane between two systems
alias[effect:add_hyperlane]:
  from: scope[galactic_object]
  to: scope[galactic_object]

# Adds or subtracts progress to/from the scoped observation post's current mission
alias[effect:add_mission_progress]: float[-1.0..1.0]

# Add a notification modifier to the country
alias[effect:add_notification_modifier]: <notification_modifier>

# Adds s random tech research option to the scoped country's tech view list, permanent until researched. if none applicable it runs fail_effects
alias[effect:add_random_research_option]:
  category@0..1: <technology_category>
  area@0..1: enum[technology_areas]
  tier@0..1: <technology_tier>
  add_progress: float[0..1]
  fail_effects@0..1:
    alias_name[effect]: alias_match_left[effect]
  # default no
  ignore_prereqs@0..1: bool

# Adds a tech research option to the scoped country's tech view list, permanent until researched
alias[effect:add_research_option]: <technology>

# Makes the scoped country remember that it has encountered the bypass
alias[effect:add_seen_bypass]: scope_group[spatial_object] # megastructure or wormhole

# Adds a specific ship design to the scoped country
alias[effect:add_ship_design]: last_created_design#TODO check this

# Adds a sum of experience points to the scoped leader
alias[effect:add_skill]: int[-10..10]#check the interval

# Gives percentage progress (0.0-1.0) in a specific tech to the scoped country
alias[effect:add_tech_progress]:
  tech: <technology>
  progress: float[0.0..1.0]

# Create and sends an telemetry event keeping track of the tutorial steps for the current game
alias[effect:complete_tutorial_step]: string

# Adds the specified tradition to the scoped country. add_tradition: <tradition_key>
alias[effect:add_tradition]: <tradition>

# Adds trust on scope country towards target country
alias[effect:add_trust]:
  amount: float
  who: scope_group[target_country]

# Makes a fleet or ship auto-move to target fleet and potentially attack it
alias[effect:auto_follow_fleet]:
  target: scope[fleet]
  attack_fleet: bool

# Makes a fleet or ship auto-move to target planet
alias[effect:auto_move_to_planet]:
  target: scope[planet]
  target#: scope[galactic_object]
  clear_auto_move_on_arrival: bool
  destroy_on_arrival@0..1: bool
  arrival_effect@0..1: <scripted_effect>

# Cancels terraformation of the scoped planet
alias[effect:cancel_terraformation]: bool

# Changes the scoped country's flag
alias[effect:change_country_flag]: random
alias[effect:change_country_flag]#:
  icon:
    category: string #TODO should be a folder name. This needs to be corrected for create_country, create_rebels and prescripted_countries too (possibly more)
    file: string #TODO should be "filename.dds" in the named folder
  background:
    category: string #TODO should be a folder name
    file: string #TODO should be "filename.dds" in the named folder
  colors:
    $@0..4: <color_define>
    $@0..4#: "null"

# Changes the portrait of the leader in scope.
# change_leader_portrait: <key or species event target>
alias[effect:change_leader_portrait]: scope_group[target_species]
alias[effect:change_leader_portrait]#: <portrait>
alias[effect:change_leader_portrait]##: <portrait_group>

# Changes the characteristics of a species
alias[effect:change_species_characteristics]:
  # determines if species is pre-sapient
  sapient@0..1: bool
  # determines if species leaders are immortal
  immortal@0..1: bool
  # determines if pops of that species can colonize
  pops_can_be_colonizers@0..1: bool
  # determines if pops of that species can migrate
  pops_can_migrate@0..1: bool
  # determines if pops of that species can reproduce
  pops_can_reproduce@0..1: bool
  # determines if pops of that species can join factions
  pops_can_join_factions@0..1: bool
  # determines if that species can generate leaders
  can_generate_leaders@0..1: bool
  # determines if pops from that species can become slaves
  pops_can_be_slaves@0..1: bool
  # determines if pops from that species have happiness
  pops_have_happiness@0..1: bool
  # determines if pops from need consumer goods
  consumer_goods@0..1: bool
  # determines if the species can be modified
  can_be_modified@0..1: bool
  # speed at which the pops from that species grow automatically
  pops_auto_growth@0..1: float[0.0..1.0]
  # amount of energy each pop of that species consume monthly
  pop_maintenance@0..1: float[0.0..1.0]
  new_pop_resource_requirement@0..1:
    type: <resource>
    type#: robot_food
    type##: string
    value: float
  allow_negative_traits@0..1: bool
  extra_trait_points@0..1: int
  portrait@0..1: scope_group[target_species]
  portrait@0..1#: <portrait>
  portrait@0..1##: <portrait_group>
  portrait@0..1###: random

# Re-evaluate the specified casus belli type with given target country
alias[effect:check_casus_belli_valid]:
  target@0..1: scope_group[target_country]
  type@0..1: <casus_belli>

# Clears all ethics of specified pop or country
alias[effect:clear_ethos]: yes

# Clears all queued fleet actions for target fleet
alias[effect:clear_fleet_actions]: scope[fleet]

# Deletes the specified saved global target reference
alias[effect:clear_global_event_target]: value[global_event_target]

# Deletes all saved global target references
alias[effect:clear_global_event_targets]: yes

# Clears all fleet orders from the scoped fleet
alias[effect:clear_orders]: yes

# Clears uncharted space from the galaxy map for the scoped country, in a radius around target system
alias[effect:clear_uncharted_space]: scope_group[target_country]
alias[effect:clear_uncharted_space]#:
  from: scope_group[target_country]
  radius: int

# Conquers the planet by setting its owner to target country and adding an unhappiness modifier
alias[effect:conquer]: scope_group[target_country]

# Makes the scoped country copy the ethos and government authority of the target country.
alias[effect:copy_ethos_and_authority]: scope_group[target_country]

alias[effect:create_ambient_object]:
  type: <ambient_object>
  location@0..1: scope_group[celestial_coordinate]
  scale@0..1: float
  use_3d_location@0..1: bool
  entity_offset@0..1: int
  entity_offset@0..1#:
    min: int
    max: int
  entity_offset_angle@0..1: int
  entity_offset_angle@0..1#:
    min: int
    max: int
  entity_offset_height@0..1: int
  entity_offset_height@0..1#:
    min: int
    max: int
  base_angle_towards@0..1: scope_group[spatial_object]
  entity_face_object@0..1: scope_group[spatial_object]
  entity_scale_to_size@0..1: bool
  duration@0..1: int
  # push_scope: ambient_object
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a new army in a new transport ship
alias[effect:create_army_transport]:
  graphical_culture@0..1: <graphical_culture>
  army_type: <army>
  ship_name@0..1: localisation_synced
  army_name@0..1: localisation_synced
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  # push_scope: ship
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a bypass in the parent SpatialObject (stored in FromFrom), of the type passed in "type".
alias[effect:create_bypass]: <bypass>

# Creates a cluster centered around the specified spatial object
alias[effect:create_cluster]:
  id: string
  radius: int
  center: scope[system]

# Creates a colony on the scoped planet
alias[effect:create_colony]:
  owner: scope_group[target_country]
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  species@0..1##: string # key
  ethos@0..1: random
  ethos@0..1#: owner # Specifically this keyword, not all scopes
  ethos@0..1##:
    ethic@2..3: <ethos>

# create_fleet:  name: <string> effect:  <create_ship, set_owner, set_location etc effects go here>  
# Creates a new fleet
alias[effect:create_fleet]:
  name@0..1: localisation_synced
  name@0..1#: scope[fleet]
  set_take_point@0..1: bool
  settings@0..1:
    spawn_debris@0..1: bool
    garrison@0..1: bool
    can_upgrade@0..1: bool
    can_disband@0..1: bool
    can_change_composition@0..1: bool
    can_change_leader@0..1: bool
    uses_naval_capacity@0..1: bool
    is_boss@0..1: bool
    ai_ignore_strength@0..1: bool
  # push_scope: fleet
  # Must include set_owner, set_location and create_ship (here or in last_created_country). Todo: Check this somehow
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# create_message:  type: BYPASS_EXPLORED localization: BYPASS_EXPLORED_MESSAGE days: 30 target: root variable:  type: name localization: SYSTEM1 scope: from  variable:  type: name localization: SYSTEM2 scope: fromfrom  
# Creates a message, can take multiple variables
alias[effect:create_message]:
  type: <message_type>
  localization: localisation
  days: int
  target: scope[any]
  variable@0..100:
    type: name
    type#: variable
    varname@0..1: value[variable]
    localization: string #not localisation, but rather something that can be used in localisation
    scope: scope[any]

# Creates a military fleet with the designs of a specified country.
alias[effect:create_military_fleet]:
  owner: scope_group[target_country]
  scaled_size: float
  effect:
    alias_name[effect]: alias_match_left[effect]

# Creates a mining station in orbit of the scoped planet
alias[effect:create_mining_station]:
  owner: scope_group[target_country]
  # push_scope: ship
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a point of interest for the scoped country at a specific location, associated with an event chain
alias[effect:create_point_of_interest]:
  id: value_set[point_of_interest]
  # severity: info
  # Leaving out "name" gives a blank button that looks really terrible and unprofessional. Don't do it :P
  name@0..1: localisation
  #The last comment does not apply here.
  desc@0..1: localisation
  event_chain: <event_chain>
  # severity: warning
  location: scope[spatial_object]
  location@0..1#: scope[country]
  location@0..1##: scope[pop]
  location@0..1###: scope[leader]
  location@0..1####: scope[deposit]
  location@0..1#####: scope[army]
  category@0..1: string

# Creates a new pop on the scoped tile/planet
alias[effect:create_pop]:
  species: scope_group[target_species]
  species#: enum[buildable_pop_species]
  species##: string #key
  ethos@0..1: random
  ethos@0..1#: scope[pop]
  ethos@0..1##: scope_group[target_country]
  ethos@0..1###:
    ethic@1..1: <ethos>
  # push_scope: pop
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a research station in orbit of the scoped planet
alias[effect:create_research_station]:
  owner: scope_group[target_country]
  # push_scope: ship
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a new saved leader for the scoped country with a lookup key
alias[effect:create_saved_leader]:
  key: value_set[saved_leader]
  creator@0..1: scope_group[target_country]
  name@0..1: random
  name@0..1#: localisation_synced
  gender@0..1: enum[genders]
  class: random
  class#: enum[leader_classes]
  species: scope_group[target_species]
  species#: enum[buildable_pop_species]
  event_leader@0..1: bool
  set_age@0..1: int
  skill@0..1: random
  skill@0..1#: int[1..10]
  traits@0..1:
    add_trait@0..5: <trait.leader_trait>
    add_trait@0..5#: random_trait
    trait@0..5: <trait.leader_trait>
    trait@0..5#: random_trait
  # push_scope: leader
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a new ship
alias[effect:create_ship]:
  name@0..1: random
  name@0..1#: localisation_synced
  name@0..1##: scope[ship]
  # severity: warning
  design@0..1: last_created_design
  design@0..1##: <global_ship_design>
  design@0..1###: localisation # Hack to handle named designs
  random_existing_design@0..1: <ship_size>
  prefix@0..1: bool
  graphical_culture@0..1: <graphical_culture>
  graphical_culture@0..1#: scope_group[target_country]
  upgradable@0..1: bool
  # Used if the created ship is a colony ship
  colonizer_species@0..1: scope_group[target_species]
  # push_scope: ship
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Creates a new ship design for use with last_created_design target
alias[effect:create_ship_design]:
  design: localisation_synced

# Trigger an assertion to stop the debugger when encountering this effect; argument is ignored
alias[effect:debug_break]: yes

# Deletes the target mega structure (no death graphics)
alias[effect:delete_megastructure]: scope[megastructure]

# Dismantles the scoped orbital station (fleet)
alias[effect:dismantle]: yes

# Force-end rivalry with target country
alias[effect:end_rivalry]: scope_group[target_country]

# Send endgame telemetry event
alias[effect:endgame_telemetry]: string

# Establish communications between scoped country and target country
alias[effect:establish_communications]: scope_group[target_country]

# Finish the current upgrade of a Mega Structure.
alias[effect:finish_upgrade]: yes

# Sends a fleet to research a special project
# fleet_action_research_special_project:  special_project: test_project target: event_target:project_planet 
alias[effect:fleet_action_research_special_project]:
  special_project: <special_project>
  target: scope_group[spatial_objectt]

# Forces target pop to immediately evaluate their attraction to various pop factions
alias[effect:force_faction_evaluation]: yes

# Copies a value from the galaxy setup into a variable, optionally scaling it by an int value
# get_galaxy_setup_value:  which: <string> setting: <string> [ scale: <int> ] 
alias[effect:get_galaxy_setup_value]:
  which: value_set[variable]
  setting: enum[galaxy_setup_values]
  scale_by@0..1: int

# Makes a country guarantee another country
alias[effect:guarantee_country]: scope_group[target_country]
alias[effect:guarantee_country]#:
  target: scope_group[target_country]
  free_guarantee_days: int

#inverted_switch: 
# 	trigger: <trigger>
# 	<corresponding key/bool/int>:  <effect> 
# 	<corresponding key/bool/int> > (less/greater than appear 'reversed')  <effect> 
# 	default:  <effect> 
# 
# Executes the first appropriate effect set for a specific trigger treated as NOT.
alias[effect:inverted_switch]:
  trigger: alias_keys_field[trigger]
  string@0..inf:
    alias_name[effect]@0..inf: alias_match_left[effect]

# Join federation with target
alias[effect:join_alliance]:
  who: scope_group[target_country]
  override_requirements: bool
  name@0..1: localisation_synced

# Removes scoped country from any alliances it is in
alias[effect:leave_alliance]:
  override_requirements: bool

# Prints a message to game.log for debugging purposes.
alias[effect:log]:
  alias_name[effect]: alias_match_left[effect]
alias[effect:log]#: string

# Modifies army with parameters:
alias[effect:modify_army]:
  name@0..1: localisation_synced
  owner@0..1: scope_group[target_country]
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  type@0..1: <army>

# Randomly mutate a species.
alias[effect:mutate_species]: yes

# push_scope: fleet
# Executes enclosed effects on every observation post in the game that meets the limit criteria
alias[effect:observation_outpost]:
  limit@0..1:
    alias_name[trigger]: alias_match_left[trigger]
  alias_name[effect]: alias_match_left[effect]

# Forces scoped fleet to retreat to friendly territory
alias[effect:order_forced_return]: yes

# Play the defined sound effect
alias[effect:play_sound]: <sound_effect>

# Adds a specific ethic to the scoped pop regardless if pop-species allows ethic divergence or not.
alias[effect:pop_force_add_ethic]: <ethos>

# Removes a specific ethic from the scoped pop
alias[effect:pop_remove_ethic]: <ethos>

# Disables or enables anomaly generation for the scoped planet
alias[effect:prevent_anomaly]: bool

# randomize_flag_symbol: pirate
# Randomizes a country's flag symbol within the selected category
alias[effect:randomize_flag_symbol]: string#TODO pirate

# Removes all armies on scoped planet
alias[effect:remove_all_armies]: yes

# Removes the scoped army
alias[effect:remove_army]: yes

# Makes a fleet or ship stop auto-moving
alias[effect:remove_auto_move_target]: yes

# Removes existing hyperlane between two systems
alias[effect:remove_hyperlane]:
  from: scope[galactic_object]
  to: scope[galactic_object]

# Remove a notification modifier to the country
alias[effect:remove_notification_modifier]: <notification_modifier>

# Removes the orbital deposit slot from the scoped planet
# alias[effect:remove_orbital_deposit]: yes
# Removes a specific point of interest from the scoped country's situation log
alias[effect:remove_point_of_interest]: value[point_of_interest]

# Removes a specific ruler trait from the scoped leader, even if they are not currently ruler; this is relevant if they ever become ruler
alias[effect:remove_ruler_trait]: <trait>#TODO ruler trait

# Removes a saved leader for the scoped country with a lookup key
alias[effect:remove_saved_leader]: value[saved_leader]

#use one of the following:
# 	name: "an explicit name with [Bracket.Stuff]"
# 	name: random
# 	name_list: "key"
# rename_species: 
alias[effect:rename_species]:
  prompt_country@0..1: scope_group[target_country]
  name@0..1: string
  # Name lists defined in the name_lists folder might not work (where would it get the name from?). Rather, Vanilla uses ones defined in species_names. Let Dayshine and Caligula know if ones in name_lists work. (Same with name_list: random and name_list: country).
  name_list@0..1: <species_named_list>

# Restores all hull points to the scoped ship
alias[effect:repair_percentage]: float

# Restores all hull points to the scoped ship
alias[effect:repair_ship]: yes

# Resets years of peace for a country.
alias[effect:reset_years_of_peace]: yes

# Runs strategic data for AI
alias[effect:run_ai_strategic_data]: yes

# Enables or disables the VIR window pop-in
alias[effect:set_advisor_active]: bool

# Sets the scoped fleet/country's aggro range in intra-system units
alias[effect:set_aggro_range]: int

# Determines whether the scoped fleet/country's aggro range is measured from the fleet's current position or its spawn location
alias[effect:set_aggro_range_measure_from]: enum[aggro_range_measure_from]

# Sets an asteroid belt at the distance in the scope.
alias[effect:set_asteroid_belt]:
  radius@0..1: float
  type@0..1: <asteroid_belt_type>

# Sets the scoped planet to be the capital of its owner country
alias[effect:set_capital]: yes

# Sets the scoped country's city graphical culture
alias[effect:set_city_graphical_culture]: <graphical_culture>

# Changes the country type of the scoped country
alias[effect:set_country_type]: <country_type>

# Sets the crisis ambient loop to the current effect
alias[effect:set_crisis_sound]: string#TODO sound

# Sets a custom spatial object as custom country capital location.
alias[effect:set_custom_capital_location]: scope_group[spatial_object]

# Sets the scoped ship to become disabled at a certain hull point percentage
alias[effect:set_disable_at_health]: float[0.0..1.0]

# Enables or disables the scoped ship
alias[effect:set_disabled]: bool

# Sets the flag of the current Empire.
alias[effect:set_empire_flag]: string#TODO

# Sets the name of the current Empire.
alias[effect:set_empire_name]: string

# Silently disables the scoped fleet to prevent player action, remember to unlock at the end of the event
alias[effect:set_event_locked]: bool

# Sets the aggro state of the scoped faction-type country
alias[effect:set_faction_hostility]:
  target@0..1: scope_group[target_country]
  set_hostile@0..1: bool
  set_neutral@0..1: bool
  set_friendly@0..1: bool

# Sets a country to lead a federation
alias[effect:set_federation_leader]: string #TODO unknown unsage

# Sets the bombardment stance of the scoped fleet
alias[effect:set_fleet_bombardment_stance]: <bombardment_stance>

# Sets a custom fleet formation on a fleet. set_fleet_formation:  position:  x: 1 y: 1  position:  x: 2 y: 1  
alias[effect:set_fleet_formation]:
  position@0..100:
    x: float
    y: float

# Sets the stance of the scoped fleet
alias[effect:set_fleet_stance]: enum[fleet_stance]

# Scales the scoped fleet's formation's ship spacing, above and below 1.0
alias[effect:set_formation_scale]: float

# Sets the mega structure upgrade to halted status for n days
alias[effect:set_halted]: int

# Sets the target leader to be the scoped country's heir
alias[effect:set_heir]: scope[leader]

# Set the home base of the scoped fleet to the specified starbase
alias[effect:set_home_base]: scope[ship]

# Sets the current mission of an observation station
alias[effect:set_mission]: <observation_station_mission>

# Change entity of a planet.
alias[effect:set_planet_entity]:
  entity@0..1: string #TODO: Link this to graphical culture <model_entity>
  graphical_culture@0..1: <graphical_culture>
  graphical_culture@0..1#: scope[country]
  graphical_culture@0..1##: scope[ship]
  picture@0..1: string #filepath #TODO picture
  atmosphere_color@0..1: string #TODO color
  atmosphere_intensity@0..1: float[0.0..1.0]
  atmosphere_width@0..1: float[0.0..1.0]

# Sets the name of the current planet.
alias[effect:set_planet_name]: string

# Sets a policy to a specific option for the scoped country and specifies if policy cooldown should go into effect
alias[effect:set_policy]:
  policy: <policy>
  option: enum[policy_option]
  cooldown: bool

# Sets the scoped pop to belong to a specific pop faction
alias[effect:set_pop_faction]: <pop_faction>

# [DEPRECATED, USE SET_COUNTRY_TYPE] Sets the scoped country as primitive
alias[effect:set_primitive]: bool

# Sets a 'primitive age' for the scoped (primitive, pre-FTL) country
alias[effect:set_primitive_age]: localisation

# Adds or removes a planetary ring around the scoped planet
alias[effect:set_ring]: bool
# Sets the scoped leader's level

alias[effect:set_skill]: int

# Optimizes the calls for spawn_system effect.
# Spawn system should be located in a block between Begin and End.
# Begin: set_spawn_system_batch: begin
# End: set_spawn_system_batch: end
alias[effect:set_spawn_system_batch]: enum[optimisation_batch]

# Disables modifier system to do full updates between Begin and End.
alias[effect:set_update_modifiers_batch]: enum[optimisation_batch]

# Defines a homeworld for the current species.
alias[effect:set_species_homeworld]: scope_group[target_planet]

# Sets the current species scopes identity to match the target scopes making them evaluate as the same species in is_same_species trigger.
alias[effect:set_species_identity]: scope_group[target_species]

# Sets a building in a slot on a starbase
alias[effect:set_starbase_building]:
  slot: int
  building: <starbase_building>

# Sets a module in a slot on a starbase
alias[effect:set_starbase_module]:
  slot: int
  module: <starbase_module>

# Sets the ship size of a starbase
alias[effect:set_starbase_size]: <ship_size.starbase>

# Changes the scoped country's tutorial level
alias[effect:set_tutorial_level]: enum[tutorial_levels]

# Spawns a mega structure in a system.
alias[effect:spawn_megastructure]:
  type: <megastructure>
  planet@0..1: scope_group[target_planet]
  coords_from@0..1: scope_group[spatial_object]
  name@0..1: localisation_synced
  orbit_angle@0..1: random
  orbit_angle@0..1#: int[0..360]
  orbit_angle@0..1##:
    min: int[0..360]
    max: int[0..360]
  orbit_distance@0..1: float
  owner@0..1: scope_group[target_country]
  graphical_culture@0..1: <graphical_culture>
  graphical_culture@0..1#: scope[country]
  graphical_culture@0..1##: scope[megastructure]
  graphical_culture@0..1###: scope[ship]
  random_pos@0..1: bool
  # push_scope: megastructure
  init_effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Spawns a planet in a system.
alias[effect:spawn_planet]:
  class: <planet_class>
  class#: <planet_class_random_list>
  location@0..1: scope_group[celestial_coordinate]
  orbit_location@0..1: bool
  orbit_distance@0..1: float
  orbit_distance_offset@0..1: float
  size@0..1: int
  size@0..1#: random
  has_ring@0..1: bool
  orbit_angle@0..1: random
  orbit_angle@0..1#: float
  orbit_angle_offset@0..1: int
  # push_scope: planet
  init_effect@0..1:
    alias_name[effect]#: alias_match_left[effect]

# Spawns a new system at a position relative to the scoped system/planet/ship.
alias[effect:spawn_system]:
  min_distance@0..1: float
  max_distance@0..1: float
  min_jumps@0..1: int[0..1000]
  max_jumps@0..1: int[0..1000]
  initializer: <solar_system_initializer>
  hyperlane@0..1: bool
  is_discovered@0..1: bool
  min_orientation_angle@0..1: float
  max_orientation_angle@0..1: float
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Starts colonization of the scoped planet
alias[effect:start_colony]:
  owner: scope_group[target_country]
  species@0..1: scope_group[target_species]
  species@0..1#: enum[buildable_pop_species]
  species@0..1##: string #key
  ethos@0..1: owner
  ethos@0..1#:
    ethic@1..10: <ethos>
  ethos@0..1##: random

# Stops the crisis ambient loop
alias[effect:stop_crisis_sound]: yes

# Executes the first appropriate effect set for a specific trigger
alias[effect:switch]:
  trigger: alias_keys_field[trigger]
  string@0..inf:
    alias_name[effect]@0..inf: alias_match_left[effect]

# Just a tooltip (shows the effect but does not run it)
alias[effect:tooltip]:
  alias_name[effect]: alias_match_left[effect]

# if a planet has trigger_megastructure_icon: yes then the map icon for the star will show a megastructure icon
alias[effect:trigger_megastructure_icon]: yes

# Starts an upgrade process on a mega structure. upgrade_megastructure_to: <new_type>
alias[effect:upgrade_megastructure_to]: <megastructure>

# Adds specific resource to the stockpile for the country scope
alias[effect:add_resource]:
  <resource>@1..inf: float
  mult@0..1: float
  mult@0..1#: value[variable]

# Remove resource deposit on the scoped planet or deposit, does not fire on_cleared if used on a blocker
alias[effect:remove_deposit]: yes
alias[effect:remove_deposit]#: <deposit>

# Fires scoped pop from its job
alias[effect:unemploy_pop]: yes

# Immediately runs a job evaluation on the planet, firing and employing pops as needed
alias[effect:check_planet_employment]: yes

# scope: pop
# Resets category of a pop
alias[effect:clear_pop_category]: yes

# Adds random non-blocker resource deposit to the scoped planet
alias[effect:add_random_non_blocker_deposit]: yes

# Removes last built building from the scoped planet
alias[effect:remove_last_built_building]: yes

# Removes all buildings from the scoped planet
alias[effect:remove_all_buildings]: yes

# Instantly adds devastation to scoped planet
alias[effect:add_planet_devastation]: int[-100..100]

# scope: any
# Creates a new pop from a half-species on the planet
alias[effect:create_half_species]:
  species_one: scope_group[target_species]
  species_two: scope_group[target_species]
  # push_scope: species
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Forces target planet or country to calculate its internal modifier
alias[effect:calculate_modifier]: yes

# Establish branch office on scoped planet for target country
alias[effect:establish_branch_office]: scope_group[target_country]

# Close branch office on scoped planet
alias[effect:close_branch_office]: yes

# Removes all blockers from the scoped planet
alias[effect:clear_blockers]: yes

# Changes the built species of the scoped object
alias[effect:set_built_species]: scope_group[target_species]

# Removes last built district from the scoped planet
alias[effect:remove_last_built_district]: yes

# Removes all district from the scoped planet
alias[effect:remove_all_districts]: yes

# Removes a specific district from the scoped planet
alias[effect:remove_district]: <district>

# Begins construction of a specific district on the scoped planet
alias[effect:add_district]: <district>

# Begins construction of a specific district on the scoped planet
alias[effect:add_district]#:
  district_type: <district>
  ignore_cap: yes

# Enables a resource on the Galactic Market
alias[effect:enable_on_market]: <resource>

# Enables the galactic market. enable_galactic_market: <yes/no>
alias[effect:enable_galactic_market]: bool

# Rebuild modifiers on target planet
alias[effect:validate_planet_buildings_and_districts]: yes

# Clears scoped deposit blocker and fires its on_cleared effect
alias[effect:clear_blocker]: yes

# Changes the portrait of the species in scope.
alias[effect:change_species_portrait]: scope_group[target_species]
alias[effect:change_species_portrait]#: <portrait>
alias[effect:change_species_portrait]##: <portrait_group>
alias[effect:change_species_portrait]###: random

# Rebuild resource deposits on target planet
alias[effect:reroll_deposits]: yes

# Creates an archaeological site associated with the scope object
alias[effect:create_archaeological_site]: <archaeological_site_type>
alias[effect:create_archaeological_site]#: random

# Destroys a archaeological site in right hand site event target
alias[effect:destroy_archaeological_site]: scope[archaeological_site]

# Adds clues to the current stage of a archaeological site
alias[effect:add_stage_clues]: int
alias[effect:add_stage_clues]#: lower_insight_reward
alias[effect:add_stage_clues]##: higher_insight_reward

alias[effect:add_expedition_log_entry]: who_knows_tell_us_please

# Resets the current stage
alias[effect:reset_current_stage]: yes

# Finish the current stage
alias[effect:finish_current_stage]: yes

# Finish the current stage. yes: trigger stage completed for each stage and current excavator. no: do not trigger any stage completed. country: use this country instead of excavator, no stage complete will be triggered.
alias[effect:finish_site]: bool
alias[effect:finish_site]#: country

# Locks or unlocks the progress of a site
alias[effect:set_site_progress_locked]: bool

# Displays a specific localization string with parameters in tooltip
alias[effect:custom_tooltip_with_params]:
  description: localisation
  description_parameters:
    string@1..inf: string

# Adds the specified relic to the scoped country. add_relic: <relic_key>
alias[effect:add_relic]: <relic>

# Removes the specified relic from the scoped country. remove_relic: <relic_key>
alias[effect:remove_relic]: <relic>

# Makes the archaeological site event expire
alias[effect:expire_site_event]: <event.fleet>

#.5.1 (or missing from earlier)
# Adds a specific trait to the scoped leader for a specific duration
alias[effect:add_timed_trait]:
  trait: <trait>
  enum[days_months_years]: int

# Recomputes strategic war ( attack / defense ) data for AI: yes
alias[effect:run_ai_strategic_war_data]: yes

# Set scoped country as the current Galactic Market leader. set_market_leader: <yes/no>
alias[effect:set_market_leader]: bool

# Steal all/a random/a specific relic from a target country
alias[effect:steal_relic]:
  target: scope_group[target_country]
  relic: <relic>
  relic#: all
  relic##: random

### v2.6

# Add <value> favors for scoped country to use on target country.
alias[effect:add_favors]:
  target: scope_group[target_country]
  value: int

# Remove <value/all> favors that scoped country have on target country.
alias[effect:remove_favors]:
  target: scope_group[target_country]
  value: int
  value#: all

# Sets an arbitrarily-named flag on the scoped federation
alias[effect:set_federation_flag]: value_set[federation_flag]

# Sets an arbitrarily-named flag on the scoped federation
alias[effect:set_timed_federation_flag]:
  flag: value_set[federation_flag]
  enum[days_months_years]: int

# Removes a previously-set flag from the scoped federation
alias[effect:remove_federation_flag]: value[federation_flag]

# Sets the given law for the scoped federation.
alias[effect:set_federation_law]: <federation_law>

# Tries to add the country to the Galactic Community.
alias[effect:add_to_galactic_community]: yes

# Tries to add the country to the Galactic Community without triggering notifications.
alias[effect:add_to_galactic_community_no_message]: yes

# Tries to remove the country from the Galactic Community.
alias[effect:remove_from_galactic_community]: yes

# Tries to add the scoped country to the Galactic Council.
alias[effect:add_to_galactic_council]: yes

# Tries to remove the scoped country from the Galactic Council.
alias[effect:remove_from_galactic_council]: yes

# Adds experience to the scoped federation.
alias[effect:add_federation_experience]: int

# Sets federation type to the scoped federation.
alias[effect:set_federation_type]: <federation_type>

# Sets federation succession type to the scoped federation. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_federation_succession_type]: enum[federation_succession_types]

# Sets federation succession term to the scoped federation. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_federation_succession_term]: enum[federation_succession_terms]

# Sets exclusive right to build fleets by federation leader. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_only_leader_builds_fleets]: bool

# Sets right for subjects to join federations. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_allow_subjects_to_join]: bool

# Sets different voting weight. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_equal_voting_power]: bool

# Sets diplomatic action custom setting. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_diplomacy_action_setting]:
  action: <diplomatic_action>
  settings:
    vote_type@0..1: enum[vote_types] #unanimous_vote majority_vote leader
    acceptance_type@0..1: enum[acceptance_types] #leader default

# Sets unified migration flag for federation. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_free_migration]: bool

# Sets federation custom setting. Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
alias[effect:set_federation_settings]:
  enum[federation_settings]: bool

# Add cohesion to the federation
alias[effect:add_cohesion]: int

# Sets the number of seats on the Galactic Council
alias[effect:set_council_size]: int

# Increases the number of seats on the Galactic Council by 1
alias[effect:increase_council_size]: yes

# Decreases the number of seats on the Galactic Council by 1
alias[effect:decrease_council_size]: yes

# Sets whether council members can veto resolutions or not
alias[effect:set_council_veto]: bool

# Sets whether council members can propose emergency measures or not
alias[effect:set_council_emergency_measures]: bool

# Gives scoped country a permanent position on the Galactic Council
alias[effect:add_permanent_councillor]: yes

# Remove the scoped country from their permanent council position
alias[effect:remove_permanent_councillor]: yes

# Passes the specified resolution
alias[effect:pass_resolution]: <resolution>

# Immediately passes the first found (oldest) proposed/voting for/failed resolution OR a new resolution of this type. Skips the cooldown on the relevant category.
alias[effect:pass_resolution_no_cooldown]: <resolution>

# Removes the specified participant from the scoped war.
alias[effect:remove_war_participant]: scope_group[target_country]

# Ends all treaties with the target.
alias[effect:end_all_treaties_with]: scope_group[target_country]

### v2.7

# Prints the countries that match the limit triggers in a list for a tooltip.
alias[effect:country_list_tooltip]:
  # push_scope: country
  limit:
    alias_name[trigger]: alias_match_left[trigger]

# Prints the country's colonies that match the limit triggers in a list for a tooltip.
alias[effect:owned_planet_list_tooltip]:
  # push_scope: planet
  limit:
    alias_name[trigger]: alias_match_left[trigger]

# Prints the country's pop factions that match the limit triggers in a list for a tooltip.
alias[effect:owned_pop_faction_list_tooltip]:
  # push_scope: pop_faction
  limit:
    alias_name[trigger]: alias_match_left[trigger]

# Prints the country's leaders that match the limit triggers in a list for a tooltip.
alias[effect:owned_leader_list_tooltip]:
  # push_scope: leader
  limit:
    alias_name[trigger]: alias_match_left[trigger]

# Prints the country's fleets that match the limit triggers in a list for a tooltip.
alias[effect:owned_fleet_list_tooltip]:
  # push_scope: fleet
  limit:
    alias_name[trigger]: alias_match_left[trigger]

# Locks the leader in its current role for the next X days.
alias[effect:set_cooldown]: int

# Sets the current planet as the capital of its sector.
alias[effect:set_sector_capital]: yes

# Sets the current sector's focus.
alias[effect:set_sector_focus]: <sector_focus>

# Sets the current planet to have the specified type designation.
alias[effect:set_colony_type]: <colony_type>

# Adds civic to a goverment without checking the restrictions.
alias[effect:force_add_civic]: <civic_or_origin.civic>

# Removes civic from a goverment without checking the restrictions.
alias[effect:force_remove_civic]: <civic_or_origin.civic>

# Completes a specific special project for the country, firing the on_success effects
alias[effect:complete_special_project]:
  type: <special_project>
  location@0..1: scope_group[spatial_object]

# Force a truce with target country of a specified type, or a war
alias[effect:set_truce]:
  target: scope_group[target_country]
  type: enum[truce_types]

# Force-end truce with target country
alias[effect:end_truce]: scope_group[target_country]

### v2.8

# Removes a module from a certain slot or all slots on a starbase
alias[effect:remove_starbase_module]:
  slot@0..1: int # Optional, default: all
  module@0..1: <starbase_module>

# Remove a building from a certain slot or all slots on a starbase
alias[effect:remove_starbase_building]:
  slot@0..1: int # Optional, default: all
  building@0..1: <starbase_building>

# Changes the colony foundation date (affecting on_colony_X_years pulses) by a specific number of days. Use with care, you can probably break things with this!
alias[effect:change_colony_foundation_date]: int

# Sets the adjective of the scoped country
alias[effect:set_adjective]: localisation_synced
alias[effect:set_adjective]#: scope_group[target_country]

# Sets the ship prefix of the scoped country
alias[effect:set_ship_prefix]: localisation_synced
alias[effect:set_ship_prefix]#: scope_group[target_country]

# Locks the country's government for a given period of days, the default cooldown, or unlocks it.
alias[effect:set_government_cooldown]: int
alias[effect:set_government_cooldown]#: default
alias[effect:set_government_cooldown]##: no

# Sets the country's origin to a certain value. Note: This will not run effects executed during galaxy generation.
alias[effect:set_origin]: <civic_or_origin.origin>

### v3.0

# Gives the player the reward for the specified crisis objective
alias[effect:complete_crisis_objective]: <crisis_objective>

# Sets whether the Galactic Emperor can change Imperial Council members or not
alias[effect:set_emperor_can_change_council_members]: bool

# Sets a specified policy group to have the cooldown specified in defines
alias[effect:set_policy_cooldown]: <policy>

# Sets the current ship or fleet to be destroyed and spawn a debris project for the specified country.
alias[effect:destroy_and_spawn_debris_for]: scope_group[target_country]

# Sets the star's star class, affecting system and galactic map graphics and potentially modifiers.
alias[effect:set_star_class]: <star_class>

# Fires an on_action (including custom-made ones), can set scopes like in fire event effects
alias[effect:fire_on_action]:
  on_action: <on_action>
  scopes@0..1:
    from@0..1: scope[any]
    fromfrom@0..1: scope[any]
    fromfromfrom@0..1: scope[any]
    fromfromfromfrom@0..1: scope[any]

# Sets the current fleet to go missing in action and return home.
alias[effect:set_mia]: yes

# Sets the first contact site to using a specified stage
alias[effect:set_first_contact_stage]: <first_contact_stage>

# Completes the first contact site, establishing communications.
alias[effect:finish_first_contact]: yes

# Sets an arbitrarily-named flag on the scoped first contact
alias[effect:set_first_contact_flag]: value_set[first_contact_flag]

# Sets an arbitrarily-named flag on the scoped first contact
alias[effect:set_timed_first_contact_flag]:
  flag: value_set[first_contact_flag]
  enum[days_months_years]: int

# Removes a previously-set flag from the scoped first contact
alias[effect:remove_first_contact_flag]: value[first_contact_flag]

# Prints a custom error to the error log
alias[effect:log_error]: string

# Adds a random tech from the target country within the given category and tech area constraints.
alias[effect:copy_random_tech_from]:
  who: scope_group[target_country]
  category@0..1: <technology_category>
  area@0..1: enum[research_areas]
  progress@0..1: float[0.0..1.0] # Optional: this makes it grant the tech option rather than the whole tech

# Adds the defined amount of intel toward the target empire.
alias[effect:add_intel]:
  who: scope_group[target_country]
  amount: float

# Creates espionage asset within a given spy network
alias[effect:create_espionage_asset]:
  type: <espionage_asset>
  # push_scope: espionage_asset
  effect@0..1:
    alias_name[effect]: alias_match_left[effect]

# Destroys espionage asset within a given spy network/operation
alias[effect:destroy_espionage_asset]: <espionage_asset>

# Locks or unlocks the progress of an espionage operation
alias[effect:set_espionage_operation_progress_locked]: bool

# Unassigns espionage asset from the scope operation to owning spy network
alias[effect:unassign_espionage_asset]: <espionage_asset>

# Assigns espionage asset to the scope operation from owning spy network
alias[effect:assign_espionage_asset]: <espionage_asset>

# Sets an arbitrarily-named flag on the scoped espionage operation
alias[effect:set_espionage_operation_flag]: value_set[espionage_operation_flag]

# Removes a flag from the scoped espionage operation
alias[effect:remove_espionage_operation_flag]: value[espionage_operation_flag]

# Sets an arbitrarily-named flag on the scoped espionage operation for a set duration
alias[effect:set_timed_espionage_operation_flag]:
  flag: value_set[espionage_operation_flag]
  enum[days_months_years]: int

# Joins the war on the specified side.
alias[effect:join_war_on_side]:
  war: scope[war]
  side: enum[war_sides]
  side#: scope_group[target_country]

# Remove a number of random building(s) matching/not matching a type from the starbase
alias[effect:remove_random_starbase_building]:
  type@0..1: <starbase_building>
  count@0..1: int

# Remove a number of random module(s) matching/not matching a type from the starbase
alias[effect:remove_random_starbase_module]:
  type@0..1: <starbase_module>
  count@0..1: int

# Destroys a espionage operation site in right hand site event target
alias[effect:destroy_espionage_operation]: scope[espionage_operation]

# Adds information to the current stage of an espionage operation
alias[effect:add_espionage_information]: float

# Adds victory score to a country
alias[effect:add_victory_score]:
  source: localisation
  score: float

# Stores a copy of the specified data of the Galactic Custodian/Emperor. The values default to 'no'.
alias[effect:store_galactic_community_leader_backup_data]:
  flag@0..1: bool
  room@0..1: bool
  name@0..1: bool
  ethics@0..1: bool
  government@0..1: bool

# Restores backed up data to the Galactic Custodian/Emperor
alias[effect:restore_galactic_community_leader_backup_data]: bool

# Activates crisis progression for the country
alias[effect:activate_crisis_progression]: yes

# Sets the room background of the empire. Provide an empty string to remove the override.
alias[effect:room_name_override]: <asset_selector.room>
alias[effect:room_name_override]#: ""

# Sets the AI personality of a country to a new one
alias[effect:set_ai_personality]: <ai_personality>

# Sets whether or not the scoped country is the Galactic Custodian
alias[effect:set_galactic_custodian]: bool

# Sets whether or not the scoped country is the Galactic Emperor
alias[effect:set_galactic_emperor]: bool

# Sets whether the Galactic Defense force or Imperial Armada exists
alias[effect:set_galactic_defense_force]: bool

# Add imperial_authority
alias[effect:add_imperial_authority]: float

# Adds a specific modifier to the current espionage operation stage for a set duration or until stage is changed
alias[effect:add_stage_modifier]:
  modifier: <static_modifier>
  # severity: info
  enum[days_months_years]@0..1: int
  multiplier@0..1: float

# Removes a specific modifier from the espionage operation current stage
alias[effect:remove_stage_modifier]: <static_modifier>

# Moves all owned GDF fleets to the target.
alias[effect:transfer_galactic_defense_force_fleets]: scope_group[target_country]

# Immediately cancels/removes the latest active/passed/proposed/voting for/failed resolution of this type
alias[effect:cancel_resolution]: <resolution>

# Adds the intel level for the category selected. Default duration (0) is forever.
alias[effect:add_intel_report]:
  category: <intel_category>
  level: int
  days@0..1: int
  who: scope_group[target_country]

# Removes all the intel reports related to the provided category.
alias[effect:clear_intel_report]:
  category: <intel_category>
  who: scope_group[target_country]

# Rounds a previously-set variable to the closest integer.
alias[effect:round_variable]: value[variable]

# Rounds a previously-set variable down to the previous integer.
alias[effect:floor_variable]: value[variable]

# Rounds a previously-set variable up to the next integer.
alias[effect:ceiling_variable]: value[variable]

# Exports the value of a specified simple value trigger (i.e. no  , returns a number on the right hand side) to a specified variable.
alias[effect:export_trigger_value_to_variable]:
  trigger: alias_keys_field[trigger]
  variable: value_set[variable]

# Exports the value of the current country's stockpile of the specified resource to a variable.
alias[effect:export_resource_stockpile_to_variable]:
  resource: <resource>
  variable: value_set[variable]

# Exports the value of the current country's monthly income of the specified resource to a variable.
alias[effect:export_resource_income_to_variable]:
  resource: <resource>
  variable: value_set[variable]

# Exports the value of a specified modifier in the current scope to a specified variable.
alias[effect:export_modifier_to_variable]:
  modifier: alias_keys_field[modifier]
  variable: value_set[variable]

# Finish the current operation phase
alias[effect:finish_current_operaton_stage]: yes

# Sets the target country as hostile. This will work on countries you don't have comms with, unlike set_faction_hostility.
alias[effect:set_hostile]: scope_group[target_country]

# Add specified country as an associate member
alias[effect:add_associate_member]:
  who: scope_group[target_country]
  override_requirements: bool

# Removes a specific associate member from the federation
alias[effect:remove_associate_member]:
  who: scope_group[target_country]
  override_requirements: bool

# Immediately passes the first found (oldest) proposed/voting for/failed resolution OR a new resolution of this type that has the specified target. Ignores whether the target is valid or not.
alias[effect:pass_targeted_resolution]:
  resolution: <resolution>
  target: scope_group[target_country]

# Increase the current Custodian term time
alias[effect:add_custodian_term_days]: int

# Set the current Custodian term time. -1 will make the Custodianship permanent.
alias[effect:set_custodian_term_days]: int

# The scoped country wins the game
alias[effect:win]: yes

# Adds levels to the current Spy Network
alias[effect:add_spy_network_level]: int
