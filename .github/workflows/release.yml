# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: Release

on:
  release:
    types: [ released ]

jobs:
  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    if: !contains(github.event.release.prerelease, 'true')

    steps:

    # Check out the current repository
    - name: Fetch Sources
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name }}

    # Set up Java environment for the next steps
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 21

    # Setup Gradle
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true

    # Set environment variables
    - name: Export Properties
      id: properties
      shell: bash
      run: |
        CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
        ${{ github.event.release.body }}
        EOM
        )"

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # Publish to JetBrains Marketplace
    - name: Publish Plugin
      run: ./gradlew publishPlugin
      env:
        PUBLISH_TOKEN: ${{ secrets.IDEA_TOKEN }}

    # Upload artifact as a release asset
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload v${{ steps.properties.outputs.pluginVersion }} ./build/distributions/*

    # Close the milestone
    - name: Close Milestone
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api repos/{owner}/{repo}/milestones \
          --jq '.[] | select(.title == "${{ github.event.release.tag_name }}") | .number' \
          | xargs -I '{}' gh api -X PATCH repos/{owner}/{repo}/milestones/{} -F state='closed'
